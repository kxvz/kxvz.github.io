{"total":94,"pageSize":10,"pageCount":10,"data":[{"title":"Centos转移Mysql的数据位置","slug":"Centos转移Mysql的数据位置","date":"2018-12-11T10:17:11.000Z","updated":"2018-12-11T10:17:11.470Z","comments":true,"path":"api/articles/Centos转移Mysql的数据位置.json","excerpt":"","keywords":null,"cover":null,"content":"<p>首先，假设我们需要把Mysql的数据存储位置转到到  /data 下面</p>\n<p>第一步：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld stop</span><br></pre></td></tr></table></figure></div></p>\n<p>第二步：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 备份原来的 mysql</span></span><br><span class=\"line\"></span><br><span class=\"line\">cp -a /var/lib/mysql /var/lib/mysql_bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 转移 mysql</span></span><br><span class=\"line\">cp -a /var/lib/mysql /data/</span><br></pre></td></tr></table></figure></div></p>\n<p>转移完成后我们需要修改一些参数让mysql能使用新的地址：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 备份原来的文件配置信息</span></span><br><span class=\"line\">cp -a /etc/my.cnf /etc/my.cnf_bak</span><br><span class=\"line\"><span class=\"comment\">### 修改原来的配置文件</span></span><br><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 找到 datadir 并把值修改为 ：  datadir=/data/mysql</span></span><br><span class=\"line\"><span class=\"comment\">### 找到 socket 并把值修改为 ：   socket=/data/mysql/mysql.sock</span></span><br></pre></td></tr></table></figure></div></p>\n<p>修改第二个配置文件：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 备份原来的文件信息</span></span><br><span class=\"line\">cp -a /etc/init.d/mysqld /etc/init.d/mysqld_bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 修改原来的文件信息</span></span><br><span class=\"line\">vi /etc/init.d/mysqld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 找到 get_mysql_option mysqld datadir </span></span><br><span class=\"line\"><span class=\"comment\">### 并把值修改为 ： get_mysql_option mysqld datadir \"/data/mysql\"</span></span><br><span class=\"line\"><span class=\"comment\">### 找到 datadir 并把值修改为 ： datadir=\"/data/mysql\"</span></span><br></pre></td></tr></table></figure></div></p>\n<p>配置文件修改完成后建立mysql sock 的软连接<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 进入原来的mysql目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /ver/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 移除里面的内容</span></span><br><span class=\"line\">rm -rf *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 建立 mysql.sock 的软连接</span></span><br><span class=\"line\">ln -s /data/mysql/mysql.sock /var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure></div></p>\n<p>启动 mysql<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure></div></p>\n<p>如果出现权限类的问题：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 修改权限错误的文件或文件夹 如修改：/data/mysql 的文件夹权限命令</span></span><br><span class=\"line\">chcon -R -t mysqld_db_t /data/mysql</span><br></pre></td></tr></table></figure></div></p>\n<p>如果修改了相应的文件夹权限还是无法启动</p>\n<p>修改系统的权限验证：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/selinux/config</span><br><span class=\"line\"><span class=\"comment\">### 找到 SELINUX 并把值修改为： SELINUX=disabled</span></span><br><span class=\"line\">Esc  :wq</span><br><span class=\"line\"><span class=\"comment\">### 修改完成保存后重启系统</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure></div></p>\n<p>==注意：以上操作如果是在生产环境中请谨慎操作。。==</p>\n","text":"首先，假设我们需要把Mysql的数据存储位置转到到  /data 下面第一步：<br>1<br>service mysqld stop<br>第二步：<br>1<br>2<br>3<br>4<br>5<br>6<br>### 备份原来的 mysql<br><br>cp -a /v","link":"","raw":null,"photos":[],"categories":[{"name":"Centos","slug":"Centos","count":30,"path":"api/categories/Centos.json"},{"name":"mysql","slug":"Centos/mysql","count":2,"path":"api/categories/Centos/mysql.json"}],"tags":[{"name":"Centos","slug":"Centos","count":29,"path":"api/tags/Centos.json"},{"name":"mysql","slug":"mysql","count":10,"path":"api/tags/mysql.json"}]},{"title":"Centos安装Java和Mysql","slug":"Centos安装Java和Mysql","date":"2018-12-11T10:14:40.000Z","updated":"2018-12-11T10:15:08.696Z","comments":true,"path":"api/articles/Centos安装Java和Mysql.json","excerpt":"","keywords":null,"cover":null,"content":"<p>首先,下载JDK: <a href=\"jdk-8u45-linux-x64.rpm\">jdk-8u45-linux-x64.rpm</a></p>\n<p>运行安装命令:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum localinstall -y jdk-8u45-linux-x64.rpm</span><br></pre></td></tr></table></figure></div></p>\n<p>安装Mysql:</p>\n<p>下载Mysql: <a href=\"http://repo.mysql.com/\" target=\"_blank\" rel=\"noopener\">mysql-community-release-el6-5.noarch.rpm</a></p>\n<p>运行安装命令:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum localinstall mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure></div></p>\n<p>更新好了Mysql的安装源后直接执行:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y mysql-community-server</span><br></pre></td></tr></table></figure></div></p>\n<p>启动Mysql:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure></div></p>\n<p>第一次启动需要设置root密码:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqladmin -u root password <span class=\"string\">'yourpassword'</span></span><br></pre></td></tr></table></figure></div></p>\n<p>5.7版本设置密码:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 5.7 安装好后会默认生成一个密码, 需要启动Mysqld服务后可以查看</span></span><br><span class=\"line\"></span><br><span class=\"line\">grep <span class=\"string\">'temporary password'</span> /var/<span class=\"built_in\">log</span>/mysqld.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看的结果: eHI9*)Tl/zP?</span></span><br><span class=\"line\">A temporary password is generated <span class=\"keyword\">for</span> root@localhost: eHI9*)Tl/zP?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 修改弱密码验证 避免无法更改为弱密码</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> global validate_password_policy = 0;</span><br><span class=\"line\"><span class=\"built_in\">set</span> global validate_password_length = 4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置新密码</span></span><br><span class=\"line\">SET PASSWORD = PASSWORD(<span class=\"string\">'123456'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 刷新</span></span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></div></p>\n<p>登陆Mysql:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p[yourpassword]  <span class=\"comment\">### 实际使用中,不需要写[],此处为了区分参数 -p 和 密码</span></span><br></pre></td></tr></table></figure></div></p>\n<p>检查Mysql是否开机启动:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --list | grep mysqld   <span class=\"comment\">### 刚安装的都是 off  没有开机启动的</span></span><br></pre></td></tr></table></figure></div></p>\n<p>设置mysql 的开机启动<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig mysqld on</span><br></pre></td></tr></table></figure></div></p>\n<p>外网访问:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host = <span class=\"string\">'%'</span> <span class=\"built_in\">where</span> user =<span class=\"string\">'root'</span> and password is not null and password != <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure></div></p>\n<p>Mysql8出现”cache_sha2_passward”的处理<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 更改密码规则 并设置密码为 123456</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'123456'</span> PASSWORD EXPIRE NEVER;</span><br><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"> </span><br><span class=\"line\">alter user <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> identified by <span class=\"string\">'123456'</span>;</span><br></pre></td></tr></table></figure></div></p>\n","text":"首先,下载JDK: jdk-8u45-linux-x64.rpm运行安装命令:<br>1<br>sudo yum localinstall -y jdk-8u45-linux-x64.rpm<br>安装Mysql:下载Mysql: mysql-community-release-","link":"","raw":null,"photos":[],"categories":[{"name":"Centos","slug":"Centos","count":30,"path":"api/categories/Centos.json"},{"name":"mysql","slug":"Centos/mysql","count":2,"path":"api/categories/Centos/mysql.json"},{"name":"java","slug":"Centos/mysql/java","count":1,"path":"api/categories/Centos/mysql/java.json"}],"tags":[{"name":"Centos","slug":"Centos","count":29,"path":"api/tags/Centos.json"},{"name":"install","slug":"install","count":9,"path":"api/tags/install.json"},{"name":"java","slug":"java","count":25,"path":"api/tags/java.json"},{"name":"mysql","slug":"mysql","count":10,"path":"api/tags/mysql.json"}]},{"title":"Centos挂载硬盘 ","slug":"Centos挂载硬盘","date":"2018-12-11T10:11:21.000Z","updated":"2018-12-11T10:11:21.175Z","comments":true,"path":"api/articles/Centos挂载硬盘.json","excerpt":"","keywords":null,"cover":null,"content":"<p>1.首先进到 /sbin 里面 执行 fdisk 查看数据盘是否存在,并记下路径 如 :<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"CMD\"><figure class=\"iseeu highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l    ### 查看需要挂载的硬盘 如:/dev/vdb</span><br></pre></td></tr></table></figure></div></p>\n<p> 2.格式化数据盘(请保存好重要数据):<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4  /dev/vdb</span><br></pre></td></tr></table></figure></div></p>\n<p> 3.挂载分区到指定的文件夹下:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data           <span class=\"comment\">### 创建文件夹</span></span><br><span class=\"line\">mount /dev/vdb /data   <span class=\"comment\">### 挂载硬盘到此文件夹下</span></span><br></pre></td></tr></table></figure></div></p>\n<p> 4.编辑/etc/fstab 文件,重启自动挂载<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/fstab</span><br></pre></td></tr></table></figure></div></p>\n<p>在文件最后添加<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/vdb    /mnt    ext4    defaults    0 0</span><br></pre></td></tr></table></figure></div></p>\n<p> Esc  -&gt;   :wq  </p>\n<p>保存退出,Reboot 重启…</p>\n","text":"1.首先进到 /sbin 里面 执行 fdisk 查看数据盘是否存在,并记下路径 如 :<br>1<br>fdisk -l    ### 查看需要挂载的硬盘 如:/dev/vdb<br> 2.格式化数据盘(请保存好重要数据):<br>1<br>mkfs.ext4  /dev/vd","link":"","raw":null,"photos":[],"categories":[{"name":"Centos","slug":"Centos","count":30,"path":"api/categories/Centos.json"},{"name":"mount","slug":"Centos/mount","count":2,"path":"api/categories/Centos/mount.json"},{"name":"disk","slug":"Centos/mount/disk","count":1,"path":"api/categories/Centos/mount/disk.json"}],"tags":[{"name":"Centos","slug":"Centos","count":29,"path":"api/tags/Centos.json"},{"name":"mount","slug":"mount","count":2,"path":"api/tags/mount.json"},{"name":"disk","slug":"disk","count":4,"path":"api/tags/disk.json"}]},{"title":"AngularJS 的安全Apply","slug":"AngularJS-的安全Apply","date":"2018-12-11T10:10:09.000Z","updated":"2018-12-11T10:10:09.292Z","comments":true,"path":"api/articles/AngularJS-的安全Apply.json","excerpt":"","keywords":null,"cover":null,"content":"<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.safeApply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> phase = <span class=\"keyword\">this</span>.$root.$$phase;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (phase == <span class=\"string\">'$apply'</span> || phase == <span class=\"string\">'$digest'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fn &amp;&amp; (<span class=\"keyword\">typeof</span>(fn) === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">            fn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$apply(fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n<p>使用NG的时候会遇到动态添加数据的情况,有可能在你动态添加数据后页面因为渲染已经完成了导致新添加的数据在页面中无法展示</p>\n<p>如使用select标签:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=<span class=\"string\">\"uidSelect\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"sel\"</span> ng-model=<span class=\"string\">\"sid\"</span> ng-init=<span class=\"string\">\"\"</span> ng-options=<span class=\"string\">\"user.name for user in users\"</span>&gt;</span><br><span class=\"line\">  &lt;option value=<span class=\"string\">\"\"</span> <span class=\"keyword\">default</span>&gt;-Select one-&lt;/option&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></span><br></pre></td></tr></table></figure></div></p>\n<p>因为开始的时候users数组的数据是固定的浏览器渲染出来后值就是固定的,那么如果在这之后我们想往users里面添加数据这个下拉选项是不会有改变的,这时候度娘上的各种攻略会告诉你加上 $scope.$apply() 就可以了…但是加好以后有可能会出现 [$rootScope:inprog] $apply already in progress 这样的错误信息,那么这时候只需要使用最上面提供的方法就可以了,</p>\n<p>先把最上面的 safeApply 方法加入你的 scope 里面,然后动态添加完数据后 使用 $scope.safeApply(); 就可以了….</p>\n","text":"1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>$scope.safeApply = function(fn) &#123;<br>    var phase = this.$root.$$phase;<br>    if (","link":"","raw":null,"photos":[],"categories":[{"name":"js","slug":"js","count":2,"path":"api/categories/js.json"},{"name":"angularjs","slug":"js/angularjs","count":1,"path":"api/categories/js/angularjs.json"}],"tags":[{"name":"js","slug":"js","count":2,"path":"api/tags/js.json"},{"name":"angularjs","slug":"angularjs","count":1,"path":"api/tags/angularjs.json"},{"name":"apply","slug":"apply","count":1,"path":"api/tags/apply.json"}]},{"title":"在CMD下备份和恢复Mysql数据库","slug":"在CMD下备份和恢复Mysql数据库","date":"2018-12-11T10:08:51.000Z","updated":"2018-12-11T10:08:51.880Z","comments":true,"path":"api/articles/在CMD下备份和恢复Mysql数据库.json","excerpt":"","keywords":null,"cover":null,"content":"<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###dbName:需要备份的数据库名字</span></span><br><span class=\"line\"><span class=\"comment\">###E:\\dump\\20130820.sql : 备份文件的存放地址</span></span><br><span class=\"line\"><span class=\"comment\">###需要指定连接地址请在参数里面加上  -h 127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\">###需要指定连接端口请在参数里面加上  -P 3306</span></span><br><span class=\"line\"><span class=\"comment\">###需要指定备份的编码请在参数里面加上  --default-character-set=utf8</span></span><br><span class=\"line\"><span class=\"comment\">###备份数据库</span></span><br><span class=\"line\">mysqldump -h 127.0.0.7 -u root -p dbName --<span class=\"built_in\">set</span>-gtid-purged=OFF --default-character-set=utf8 &gt; E:\\dump\\20130820.sql</span><br><span class=\"line\"><span class=\"comment\">###恢复数据库</span></span><br><span class=\"line\">mysql -u root -p dbName --default-character-set=utf8 &lt; E:\\dump\\20130820.sql</span><br></pre></td></tr></table></figure></div>\n<p>如果出现错误:mysqldump: Couldn’t execute ‘SELECT @@GTID_MODE’: Unknown system variable ‘GTID_MODE’ (1193)</p>\n<p>就用:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"CMD\"><figure class=\"iseeu highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">7</span> -u root -p dbName --<span class=\"built_in\">set</span>-gtid-purged=OFF &gt; E:\\dump\\<span class=\"number\">20140318</span>.sql</span><br></pre></td></tr></table></figure></div></p>\n<p>如果出现错误: ERROR at line 696: Unknown command ‘\\0’. 一般来说是字符集不匹配导致的</p>\n<p>就需要加上参数: –default-character-set=utf8 或者 –default-character-set=gbk</p>\n","text":"1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>###dbName:需要备份的数据库名字<br>###E:\\dump\\20130820.sql : 备份文件的存放地址<br>###需要指定连接地址请在参数里面加上  -h 127.0.0.","link":"","raw":null,"photos":[],"categories":[{"name":"mysql","slug":"mysql","count":8,"path":"api/categories/mysql.json"},{"name":"mysqldump","slug":"mysql/mysqldump","count":1,"path":"api/categories/mysql/mysqldump.json"}],"tags":[{"name":"mysql","slug":"mysql","count":10,"path":"api/tags/mysql.json"},{"name":"cmd","slug":"cmd","count":10,"path":"api/tags/cmd.json"},{"name":"mysqldump","slug":"mysqldump","count":1,"path":"api/tags/mysqldump.json"}]},{"title":"关于测试中使用ArgumentCaptor来验证执行过程中对象的值","slug":"关于测试中使用ArgumentCaptor来验证执行过程中对象的值","date":"2018-12-11T10:07:58.000Z","updated":"2018-12-11T10:07:58.153Z","comments":true,"path":"api/articles/关于测试中使用ArgumentCaptor来验证执行过程中对象的值.json","excerpt":"","keywords":null,"cover":null,"content":"<p>官方的示例：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);</span><br><span class=\"line\">verify(mock).doSomething(argument.capture());</span><br><span class=\"line\">assertEquals(<span class=\"string\">\"John\"</span>, argument.getValue().getName());</span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"大体步骤：\"><a href=\"#大体步骤：\" class=\"headerlink\" title=\"大体步骤：\"></a>大体步骤：</h3><p>﻿首先构建ArgumentCaptor需要传入需要被捕获变量的对象，如示例中的Person.class。</p>\n<p>然后在verify调用Mock对象的方法中调用argument.capture()来捕获执行该方法时该变量的值。</p>\n<p>这样取到值后就可以进行值的验证，通过argument.getValue()得到该对象执行时的值。﻿</p>\n<p>关于ArgumentCaptor最多用到的方法：</p>\n<p>argument.capture() 捕获方法参数  </p>\n<p>argument.getValue() 获取方法参数值，如果方法进行了多次调用，它将返回最后一个参数值 </p>\n<p>argument.getAllValues() 方法进行多次调用后，返回多个参数值</p>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><p>在使用的时候需要放在需要执行的方法之后，因为verify会验证执行，所以会放在调用方法之后,而不是像调用Mockito.when()设定条件时放在调用方法之前。</p>\n<p>当遇到复杂对象的时候，如：Map&lt;String,Map&lt;String,Long&gt;&gt; 这样的对象的时候，觉得不好取值，可以设断点调试到该处，查看argument的数据结构，再进行取值验证。</p>\n","text":"官方的示例：<br>1<br>2<br>3<br>ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);<br>verify(mock).doSomething(argument","link":"","raw":null,"photos":[],"categories":[{"name":"java","slug":"java","count":21,"path":"api/categories/java.json"},{"name":"test","slug":"java/test","count":1,"path":"api/categories/java/test.json"}],"tags":[{"name":"java","slug":"java","count":25,"path":"api/tags/java.json"},{"name":"test","slug":"test","count":1,"path":"api/tags/test.json"},{"name":"ArgumentCaptor","slug":"ArgumentCaptor","count":1,"path":"api/tags/ArgumentCaptor.json"}]},{"title":"关于Mysql使用存储过程，并且使用游标的Demo","slug":"关于Mysql使用存储过程，并且使用游标的Demo","date":"2018-12-11T10:06:50.000Z","updated":"2018-12-11T10:06:50.484Z","comments":true,"path":"api/articles/关于Mysql使用存储过程，并且使用游标的Demo.json","excerpt":"","keywords":null,"cover":null,"content":"<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"SQL\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"><span class=\"comment\">/* Mysql 创建存储过程 名为：new_pro */</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DEFINER=<span class=\"string\">`root`</span>@<span class=\"string\">`localhost`</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"string\">`new_pro`</span>()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"comment\">/* 声明变量 并设定默认值 */</span></span><br><span class=\"line\">    <span class=\"keyword\">Declare</span> not_found <span class=\"built_in\">int</span>  <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">Declare</span> collectionId <span class=\"built_in\">bigint</span>;</span><br><span class=\"line\">    <span class=\"keyword\">Declare</span> children_collectionId <span class=\"built_in\">bigint</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 创建游标 通过查询表 channelcollection创建出游标 */</span></span><br><span class=\"line\">    <span class=\"keyword\">Declare</span> idCursor <span class=\"keyword\">cursor</span> <span class=\"keyword\">for</span> <span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> channelcollection <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'a'</span> <span class=\"keyword\">or</span> <span class=\"keyword\">name</span>=<span class=\"string\">'c'</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 异常处理，当发生异常的时候设定 not_found的值为1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">Declare</span> continue <span class=\"keyword\">handler</span> <span class=\"keyword\">for</span> <span class=\"keyword\">not</span> <span class=\"keyword\">found</span> <span class=\"keyword\">set</span> not_found=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 设定collectionId的值为 查询出的ID */</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span> collectionId = (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> channelcollection <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'b'</span> <span class=\"keyword\">limit</span> <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* 使用游标之前先打开游标 */</span></span><br><span class=\"line\">    open idCursor;</span><br><span class=\"line\">    <span class=\"comment\">/* 循环游标并且把循环出来的游标赋值给 children_collectionId */</span></span><br><span class=\"line\">    idCursor_loop: LOOP fetch idCursor into children_collectionId;</span><br><span class=\"line\">        if not_found=1 then</span><br><span class=\"line\">            leave idCursor_loop;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            <span class=\"comment\">/* 将数据循环插入另外一个表 */</span></span><br><span class=\"line\">            <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> channelcollectionfamily <span class=\"keyword\">values</span> (collectionId,children_collectionId);</span><br><span class=\"line\">        <span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"keyword\">LOOP</span> idCursor_loop;</span><br><span class=\"line\">    <span class=\"comment\">/* 使用完之后关闭游标 */</span></span><br><span class=\"line\">    close idCursor;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure></div>\n","text":"1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br","link":"","raw":null,"photos":[],"categories":[{"name":"mysql","slug":"mysql","count":8,"path":"api/categories/mysql.json"},{"name":"游标","slug":"mysql/游标","count":1,"path":"api/categories/mysql/游标.json"}],"tags":[{"name":"mysql","slug":"mysql","count":10,"path":"api/tags/mysql.json"},{"name":"游标","slug":"游标","count":1,"path":"api/tags/游标.json"}]},{"title":"Mysql 基本命令","slug":"Mysql-基本命令","date":"2018-12-11T10:06:07.000Z","updated":"2018-12-11T10:06:07.389Z","comments":true,"path":"api/articles/Mysql-基本命令.json","excerpt":"","keywords":null,"cover":null,"content":"<p>启动：net start mySql;</p>\n<p>  进入：mysql -u root -p/mysql -h localhost -u root -p databaseName;</p>\n<p>  列出数据库：show databases;</p>\n<p>  选择数据库：use databaseName;</p>\n<p>  列出表格：show tables；</p>\n<p>  显示表格列的属性：show columns from tableName；</p>\n<p>  建立数据库：source fileName.txt;</p>\n<p>  匹配字符：可以用通配符_代表任何一个字符，％代表任何字符串;</p>\n<p>  增加一个字段：alter table tabelName add column fieldName dateType;</p>\n<p>  增加多个字段：alter table tabelName add column fieldName1 dateType,add columns fieldName2 dateType;</p>\n<p>  多行命令输入:注意不能将单词断开;当插入或更改数据时，不能将字段的字符串展开到多行里，否则硬回车将被储存到数据中;</p>\n<p>  增加一个管理员帐户：grant all on <em>.</em> to user@localhost identified by “password”;</p>\n<p>  每条语句输入完毕后要在末尾填加分号’;’，或者填加’\\g’也可以；</p>\n<p>  查询时间：select now();</p>\n<p>  查询当前用户：select user();</p>\n<p>  查询数据库版本：select version();</p>\n<p>  查询当前使用的数据库：select database();</p>\n<p>  1、删除student_course数据库中的students数据表：</p>\n<p>  rm -f student_course/students.*</p>\n<p>  2、备份数据库：(将数据库test备份)</p>\n<p>  mysqldump -u root -p test&gt;c:\\test.txt</p>\n<p>  备份表格：(备份test数据库下的mytable表格)</p>\n<p>  mysqldump -u root -p test mytable&gt;c:\\test.txt</p>\n<p>  将备份数据导入到数据库：(导回test数据库)</p>\n<p>  mysql -u root -p test</p>\n<p>  3、创建临时表：(建立临时表zengchao)</p>\n<p>  create temporary table zengchao(name varchar(10));</p>\n<p>  4、创建表是先判断表是否存在</p>\n<p>  create table if not exists students(……);</p>\n<p>  5、从已经有的表中复制表的结构</p>\n<p>  create table table2 select * from table1 where 1&lt;&gt;1;</p>\n<p>  6、复制表</p>\n<p>  create table table2 select * from table1;</p>\n<p>  7、对表重新命名</p>\n<p>  alter table table1 rename as table2;</p>\n<p>  8、修改列的类型</p>\n<p>  alter table table1 modify id int unsigned;//修改列id的类型为int unsigned</p>\n<p>  alter table table1 change id sid int unsigned;//修改列id的名字为sid，而且把属性修改为int unsigned</p>\n<p>  9、创建索引</p>\n<p>  alter table table1 add index ind_id (id);</p>\n<p>  create index ind_id on table1 (id);</p>\n<p>  create unique index ind_id on table1 (id);//建立唯一性索引</p>\n<p>  10、删除索引</p>\n<p>  drop index idx_id on table1;</p>\n<p>  alter table table1 drop index ind_id;</p>\n<p>  11、联合字符或者多个列(将列id与”:”和列name和”=”连接)</p>\n<p>  select concat(id,’:’,name,’=’) from students;</p>\n<p>  12、limit(选出10到20条)&lt;第一个记录集的编号是0&gt;</p>\n<p>  select * from students order by id limit 9,10;</p>\n<p>  13、MySQL不支持的功能</p>\n<p>  事务，视图，外键和引用完整性，存储过程和触发器</p>\n<p>  14、MySQL会使用索引的操作符号</p>\n<p>  &lt;,&lt;=,&gt;=,&gt;,=,between,in,不带%或者_开头的like</p>\n<p>  15、使用索引的缺点</p>\n<p>  1)减慢增删改数据的速度；</p>\n<p>  2）占用磁盘空间；</p>\n<p>  3）增加查询优化器的负担；</p>\n<p>  当查询优化器生成执行计划时，会考虑索引，太多的索引会给查询优化器增加工作量，导致无法选择最优的查询方案；</p>\n<p>  16、分析索引效率</p>\n<p>  方法：在一般的SQL语句前加上explain；</p>\n<p>  分析结果的含义：</p>\n<p>  1）table：表名；</p>\n<p>  2）type：连接的类型，(ALL/Range/Ref)。其中ref是最理想的；</p>\n<p>  3）possible_keys：查询可以利用的索引名；</p>\n<p>  4）key：实际使用的索引；</p>\n<p>  5）key_len：索引中被使用部分的长度（字节）；</p>\n<p>  6）ref：显示列名字或者”const”（不明白什么意思）；</p>\n<p>  7）rows：显示MySQL认为在找到正确结果之前必须扫描的行数；</p>\n<p>  8）extra：MySQL的建议；</p>\n<p>  17、使用较短的定长列</p>\n<p>  1）尽可能使用较短的数据类型；</p>\n<p>  2）尽可能使用定长数据类型；</p>\n<p>  a）用char代替varchar，固定长度的数据处理比变长的快些；</p>\n<p>  b）对于频繁修改的表，磁盘容易形成碎片，从而影响数据库的整体性能；</p>\n<p>  c）万一出现数据表崩溃，使用固定长度数据行的表更容易重新构造。使用固定长度的数据行，每个记录的开始位置都是固定记录长度的倍数，可以很容易被检测到，但是使用可变长度的数据行就不一定了；</p>\n<p>  d）对于MyISAM类型的数据表，虽然转换成固定长度的数据列可以提高性能，但是占据的空间也大；</p>\n<p>  18、使用not null和enum</p>\n<p>  尽量将列定义为not null，这样可使数据的出来更快，所需的空间更少，而且在查询时，MySQL不需要检查是否存在特例，即null值，从而优化查询；</p>\n<p>  如果一列只含有有限数目的特定值，如性别，是否有效或者入学年份等，在这种情况下应该考虑将其转换为enum列的值，MySQL处理的更快，因为所有的enum值在系统内都是以标识数值来表示的；</p>\n<p>  19、使用optimize table</p>\n<p>  对于经常修改的表，容易产生碎片，使在查询数据库时必须读取更多的磁盘块，降低查询性能。具有可变长的表都存在磁盘碎片问题，这个问题对blob数据类型更为突出，因为其尺寸变化非常大。可以通过使用optimize table来整理碎片，保证数据库性能不下降，优化那些受碎片影响的数据表。 optimize table可以用于MyISAM和BDB类型的数据表。实际上任何碎片整理方法都是用mysqldump来转存数据表，然后使用转存后的文件并重新建数据表；</p>\n<p>  20、使用procedure analyse()</p>\n<p>  可以使用procedure analyse()显示最佳类型的建议，使用很简单，在select语句后面加上procedure analyse()就可以了；例如：</p>\n<p>  select * from students procedure analyse();</p>\n<p>  select * from students procedure analyse(16,256);</p>\n<p>  第二条语句要求procedure analyse()不要建议含有多于16个值，或者含有多于256字节的enum类型，如果没有限制，输出可能会很长；</p>\n<p>  21、使用查询缓存</p>\n<p>  1）查询缓存的工作方式：</p>\n<p>  第一次执行某条select语句时，服务器记住该查询的文本内容和查询结果，存储在缓存中，下次碰到这个语句时，直接从缓存中返回结果；当更新数据表后，该数据表的任何缓存查询都变成无效的，并且会被丢弃。</p>\n<p>  2）配置缓存参数：</p>\n<p>  变量：query_cache _type，查询缓存的操作模式。有3中模式，0：不缓存；1：缓存查询，除非与 select sql_no_cache开头；2：根据需要只缓存那些以select sql_cache开头的查询； query_cache_size：设置查询缓存的最大结果集的大小，比这个值大的不会被缓存。</p>\n<p>  22、调整硬件</p>\n<p>  1）在机器上装更多的内存；</p>\n<p>  2）增加更快的硬盘以减少I/O等待时间；</p>\n<p>  寻道时间是决定性能的主要因素，逐字地移动磁头是最慢的，一旦磁头定位，从磁道读则很快；</p>\n<p>  3）在不同的物理硬盘设备上重新分配磁盘活动；</p>\n<p>  如果可能，应将最繁忙的数据库存放在不同的物理设备上，这跟使用同一物理设备的不同分区是不同的，因为它们将争用相同的物理资源（磁头）。</p>\n","text":"启动：net start mySql;  进入：mysql -u root -p/mysql -h localhost -u root -p databaseName;  列出数据库：show databases;  选择数据库：use databaseName;  列出表格：s","link":"","raw":null,"photos":[],"categories":[{"name":"mysql","slug":"mysql","count":8,"path":"api/categories/mysql.json"},{"name":"cmd","slug":"mysql/cmd","count":1,"path":"api/categories/mysql/cmd.json"}],"tags":[{"name":"mysql","slug":"mysql","count":10,"path":"api/tags/mysql.json"},{"name":"cmd","slug":"cmd","count":10,"path":"api/tags/cmd.json"}]},{"title":"JavaScript之eval() 函数","slug":"JavaScript之eval-函数","date":"2018-12-11T10:05:39.000Z","updated":"2018-12-11T10:05:39.238Z","comments":true,"path":"api/articles/JavaScript之eval-函数.json","excerpt":"","keywords":null,"cover":null,"content":"<p>定义和用法</p>\n<p>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p>\n<p>语法<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(string)</span><br></pre></td></tr></table></figure></div></p>\n<p>参数描述</p>\n<p>string必需。要计算的字符串，其中含有要计算的 JavaScript 表达式或要执行的语句。</p>\n<p>返回值</p>\n<p>通过计算 string 得到的值（如果有的话）。</p>\n<p>说明</p>\n<p>该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。因此请不要为 eval() 函数传递 String 对象来作为参数。</p>\n<p>如果试图覆盖 eval 属性或把 eval() 方法赋予另一个属性，并通过该属性调用它，则 ECMAScript 实现允许抛出一个 EvalError 异常。</p>\n<p>抛出</p>\n<p>如果参数中没有合法的表达式和语句，则抛出 SyntaxError 异常。</p>\n<p>如果非法调用 eval()，则抛出 EvalError 异常。</p>\n<p>如果传递给 eval() 的 Javascript 代码生成了一个异常，eval() 将把该异常传递给调用者。</p>\n<p>提示和注释</p>\n<p>提示：虽然 eval() 的功能非常强大，但在实际使用中用到它的情况并不多。</p>\n<p>eg：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SCRIPT language=<span class=\"string\">\"javascript\"</span>&gt;</span><br><span class=\"line\">    ﻿﻿<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showsubmenu</span>(<span class=\"params\">sid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        whichEl = <span class=\"built_in\">eval</span>(<span class=\"string\">\"submenu\"</span> + sid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (whichEl.style.display == <span class=\"string\">\"none\"</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">eval</span>(<span class=\"string\">\"submenu\"</span> + sid + <span class=\"string\">\".style.display=\\\"\\\";\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">eval</span>(<span class=\"string\">\"submenu\"</span> + sid + <span class=\"string\">\".style.display=\\\"none\\\";\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ﻿&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/SCRIPT&gt;</span></span><br></pre></td></tr></table></figure></div></p>\n","text":"定义和用法eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。语法<br>1<br>eval(string)<br>参数描述string必需。要计算的字符串，其中含有要计算的 JavaScript 表达式或要执行的语句。返回值通过计算 string 得","link":"","raw":null,"photos":[],"categories":[{"name":"js","slug":"js","count":2,"path":"api/categories/js.json"},{"name":"eval","slug":"js/eval","count":1,"path":"api/categories/js/eval.json"}],"tags":[{"name":"js","slug":"js","count":2,"path":"api/tags/js.json"},{"name":"javascript","slug":"javascript","count":1,"path":"api/tags/javascript.json"},{"name":"eval","slug":"eval","count":1,"path":"api/tags/eval.json"}]},{"title":"Ubuntu Clean the top panel ","slug":"Ubuntu-Clean-the-top-panel","date":"2018-12-11T10:04:42.000Z","updated":"2018-12-11T10:04:42.588Z","comments":true,"path":"api/articles/Ubuntu-Clean-the-top-panel.json","excerpt":"","keywords":null,"cover":null,"content":"<p>打开终端，终端窗口打开之后，在提示符后面分别执行下列命令：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gconftool --recursive-unset /apps/panel </span><br><span class=\"line\">rm -rf ~/.gconf/apps/panel </span><br><span class=\"line\">pkill gnome-panel</span><br></pre></td></tr></table></figure></div></p>\n<p>接下来，</p>\n<p>Ubuntu 默认的上下两栏面板就会恢复默认值，</p>\n<p>出现顶部+底部各一面板的默认布局…</p>\n","text":"打开终端，终端窗口打开之后，在提示符后面分别执行下列命令：<br>1<br>2<br>3<br>gconftool --recursive-unset /apps/panel <br>rm -rf ~/.gconf/apps/panel <br>pkill gnome-panel","link":"","raw":null,"photos":[],"categories":[{"name":"ubuntu","slug":"ubuntu","count":1,"path":"api/categories/ubuntu.json"}],"tags":[{"name":"ubuntu","slug":"ubuntu","count":1,"path":"api/tags/ubuntu.json"}]}]}