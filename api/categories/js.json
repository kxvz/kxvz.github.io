{"name":"js","slug":"js","count":2,"postlist":[{"title":"AngularJS 的安全Apply","slug":"AngularJS-的安全Apply","date":"2018-12-11T10:10:09.000Z","updated":"2018-12-11T10:10:09.292Z","comments":true,"path":"api/articles/AngularJS-的安全Apply.json","excerpt":"","keywords":null,"cover":null,"content":"<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.safeApply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> phase = <span class=\"keyword\">this</span>.$root.$$phase;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (phase == <span class=\"string\">'$apply'</span> || phase == <span class=\"string\">'$digest'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fn &amp;&amp; (<span class=\"keyword\">typeof</span>(fn) === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">            fn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$apply(fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n<p>使用NG的时候会遇到动态添加数据的情况,有可能在你动态添加数据后页面因为渲染已经完成了导致新添加的数据在页面中无法展示</p>\n<p>如使用select标签:<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=<span class=\"string\">\"uidSelect\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"sel\"</span> ng-model=<span class=\"string\">\"sid\"</span> ng-init=<span class=\"string\">\"\"</span> ng-options=<span class=\"string\">\"user.name for user in users\"</span>&gt;</span><br><span class=\"line\">  &lt;option value=<span class=\"string\">\"\"</span> <span class=\"keyword\">default</span>&gt;-Select one-&lt;/option&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></span><br></pre></td></tr></table></figure></div></p>\n<p>因为开始的时候users数组的数据是固定的浏览器渲染出来后值就是固定的,那么如果在这之后我们想往users里面添加数据这个下拉选项是不会有改变的,这时候度娘上的各种攻略会告诉你加上 $scope.$apply() 就可以了…但是加好以后有可能会出现 [$rootScope:inprog] $apply already in progress 这样的错误信息,那么这时候只需要使用最上面提供的方法就可以了,</p>\n<p>先把最上面的 safeApply 方法加入你的 scope 里面,然后动态添加完数据后 使用 $scope.safeApply(); 就可以了….</p>\n","text":"1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>$scope.safeApply = function(fn) &#123;<br>    var phase = this.$root.$$phase;<br>    if (","link":"","raw":null,"photos":[],"categories":[{"name":"js","slug":"js","count":2,"path":"api/categories/js.json"},{"name":"angularjs","slug":"js/angularjs","count":1,"path":"api/categories/js/angularjs.json"}],"tags":[{"name":"js","slug":"js","count":2,"path":"api/tags/js.json"},{"name":"angularjs","slug":"angularjs","count":1,"path":"api/tags/angularjs.json"},{"name":"apply","slug":"apply","count":1,"path":"api/tags/apply.json"}]},{"title":"JavaScript之eval() 函数","slug":"JavaScript之eval-函数","date":"2018-12-11T10:05:39.000Z","updated":"2018-12-11T10:05:39.238Z","comments":true,"path":"api/articles/JavaScript之eval-函数.json","excerpt":"","keywords":null,"cover":null,"content":"<p>定义和用法</p>\n<p>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p>\n<p>语法<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(string)</span><br></pre></td></tr></table></figure></div></p>\n<p>参数描述</p>\n<p>string必需。要计算的字符串，其中含有要计算的 JavaScript 表达式或要执行的语句。</p>\n<p>返回值</p>\n<p>通过计算 string 得到的值（如果有的话）。</p>\n<p>说明</p>\n<p>该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。因此请不要为 eval() 函数传递 String 对象来作为参数。</p>\n<p>如果试图覆盖 eval 属性或把 eval() 方法赋予另一个属性，并通过该属性调用它，则 ECMAScript 实现允许抛出一个 EvalError 异常。</p>\n<p>抛出</p>\n<p>如果参数中没有合法的表达式和语句，则抛出 SyntaxError 异常。</p>\n<p>如果非法调用 eval()，则抛出 EvalError 异常。</p>\n<p>如果传递给 eval() 的 Javascript 代码生成了一个异常，eval() 将把该异常传递给调用者。</p>\n<p>提示和注释</p>\n<p>提示：虽然 eval() 的功能非常强大，但在实际使用中用到它的情况并不多。</p>\n<p>eg：<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JS\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SCRIPT language=<span class=\"string\">\"javascript\"</span>&gt;</span><br><span class=\"line\">    ﻿﻿<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showsubmenu</span>(<span class=\"params\">sid</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        whichEl = <span class=\"built_in\">eval</span>(<span class=\"string\">\"submenu\"</span> + sid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (whichEl.style.display == <span class=\"string\">\"none\"</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">eval</span>(<span class=\"string\">\"submenu\"</span> + sid + <span class=\"string\">\".style.display=\\\"\\\";\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">eval</span>(<span class=\"string\">\"submenu\"</span> + sid + <span class=\"string\">\".style.display=\\\"none\\\";\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ﻿&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/SCRIPT&gt;</span></span><br></pre></td></tr></table></figure></div></p>\n","text":"定义和用法eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。语法<br>1<br>eval(string)<br>参数描述string必需。要计算的字符串，其中含有要计算的 JavaScript 表达式或要执行的语句。返回值通过计算 string 得","link":"","raw":null,"photos":[],"categories":[{"name":"js","slug":"js","count":2,"path":"api/categories/js.json"},{"name":"eval","slug":"js/eval","count":1,"path":"api/categories/js/eval.json"}],"tags":[{"name":"js","slug":"js","count":2,"path":"api/tags/js.json"},{"name":"javascript","slug":"javascript","count":1,"path":"api/tags/javascript.json"},{"name":"eval","slug":"eval","count":1,"path":"api/tags/eval.json"}]}]}