{"name":"幂等性","slug":"幂等性","count":1,"postlist":[{"title":"如何理解RESTful的幂等性","slug":"如何理解RESTful的幂等性","date":"2018-12-11T09:18:42.000Z","updated":"2018-12-11T09:21:11.231Z","comments":true,"path":"api/articles/如何理解RESTful的幂等性.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"如何理解RESTful的幂等性\"><a href=\"#如何理解RESTful的幂等性\" class=\"headerlink\" title=\"如何理解RESTful的幂等性\"></a>如何理解RESTful的幂等性</h1><h3 id=\"怎么理解幂等性\"><a href=\"#怎么理解幂等性\" class=\"headerlink\" title=\"怎么理解幂等性\"></a>怎么理解幂等性</h3><p>HTTP幂等方法，是指无论调用多少次都不会有不同结果的 HTTP 方法。不管你调用一次，还是调用一百次，一千次，结果都是相同的。<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"CMD\"><figure class=\"iseeu highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET     /tickets       # 获取ticket列表</span><br><span class=\"line\">GET     /tickets/<span class=\"number\">12</span>    # 查看某个具体的ticket</span><br><span class=\"line\">POST    /tickets       # 新建一个ticket</span><br><span class=\"line\">PUT     /tickets/<span class=\"number\">12</span>    # 更新ticket <span class=\"number\">12</span></span><br><span class=\"line\">PATCH   /tickets/<span class=\"number\">12</span>    # 更新ticket <span class=\"number\">12</span></span><br><span class=\"line\">DELETE  /tickets/<span class=\"number\">12</span>    # 删除ticekt <span class=\"number\">12</span></span><br></pre></td></tr></table></figure></div></p>\n<h3 id=\"HTTP-GET方法\"><a href=\"#HTTP-GET方法\" class=\"headerlink\" title=\"HTTP GET方法\"></a>HTTP GET方法</h3><p>HTTP GET方法，用于获取资源，不管调用多少次接口，结果都不会改变，所以是幂等的。<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"CMD\"><figure class=\"iseeu highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET     /tickets       # 获取ticket列表</span><br><span class=\"line\">GET     /tickets/<span class=\"number\">12</span>    # 查看某个具体的ticket</span><br></pre></td></tr></table></figure></div></p>\n<p>只是查询数据，不会影响到资源的变化，因此我们认为它幂等。</p>\n<p>值得注意，幂等性指的是作用于结果而非资源本身。怎么理解呢？</p>\n<p>例如，这个HTTP GET方法可能会每次得到不同的返回内容，但并不影响资源。</p>\n<p>可能你会问有这种情况么？当然有咯。例如，我们有一个接口获取当前时间，我们就应该设计成<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"CMD\"><figure class=\"iseeu highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET     /service_time # 获取服务器当前时间</span><br></pre></td></tr></table></figure></div></p>\n<p>它本身不会对资源本身产生影响，因此满足幂等性。</p>\n<h3 id=\"HTTP-POST方法\"><a href=\"#HTTP-POST方法\" class=\"headerlink\" title=\"HTTP POST方法\"></a>HTTP POST方法</h3><p>HTTP POST方法是一个非幂等方法，因为调用多次，都将产生新的资源。<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"CMD\"><figure class=\"iseeu highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST    /tickets       # 新建一个ticket</span><br></pre></td></tr></table></figure></div></p>\n<p>因为它会对资源本身产生影响，每次调用都会有新的资源产生，因此不满足幂等性。</p>\n<h3 id=\"HTTP-PUT方法\"><a href=\"#HTTP-PUT方法\" class=\"headerlink\" title=\"HTTP PUT方法\"></a>HTTP PUT方法</h3><p>HTTP PUT方法是不是幂等的呢？我们来看下<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"CMD\"><figure class=\"iseeu highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT     /tickets/<span class=\"number\">12</span>    # 更新ticket <span class=\"number\">12</span></span><br></pre></td></tr></table></figure></div></p>\n<p>因为它直接把实体部分的数据替换到服务器的资源，我们多次调用它，只会产生一次影响，但是有相同结果的 HTTP 方法，所以满足幂等性。</p>\n<h3 id=\"HTTP-PATCH方法\"><a href=\"#HTTP-PATCH方法\" class=\"headerlink\" title=\"HTTP PATCH方法\"></a>HTTP PATCH方法</h3><p>HTTP PATCH方法是非幂等的。HTTP POST方法和HTTP PUT方法可能比较好理解，但是HTTP PATCH方法只是更新部分资源，怎么是非幂等的呢?</p>\n<p>因为，PATCH提供的实体则需要根据程序或其它协议的定义，解析后在服务器上执行，以此来修改服务器上的资源。换句话说，PATCH请求是会执行某个程序的，如果重复提交，程序可能执行多次，对服务器上的资源就可能造成额外的影响，这就可以解释它为什么是非幂等的了。</p>\n<p>可能你还不能理解这点。我们举个例子<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"CMD\"><figure class=\"iseeu highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATCH   /tickets/<span class=\"number\">12</span>    # 更新ticket <span class=\"number\">12</span></span><br></pre></td></tr></table></figure></div></p>\n<p>此时，我们服务端对方法的处理是，当调用一次方法，更新部分字段，将这条ticket记录的操作记录加一，这次，每次调用的资源是不是变了呢，所以它是有可能是非幂等的操作。</p>\n<h3 id=\"HTTP-DELETE方法\"><a href=\"#HTTP-DELETE方法\" class=\"headerlink\" title=\"HTTP DELETE方法\"></a>HTTP DELETE方法</h3><p>HTTP DELETE方法用于删除资源，会将资源删除。<br><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"CMD\"><figure class=\"iseeu highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE  /tickets/<span class=\"number\">12</span>    # 删除ticekt <span class=\"number\">12</span></span><br></pre></td></tr></table></figure></div></p>\n<p>调用一次和多次对资源产生影响是相同的，所以也满足幂等性。</p>\n<h2 id=\"如何设计符合幂等性的高质量RESTful-API\"><a href=\"#如何设计符合幂等性的高质量RESTful-API\" class=\"headerlink\" title=\"如何设计符合幂等性的高质量RESTful API\"></a>如何设计符合幂等性的高质量RESTful API</h2><h3 id=\"HTTP-GET方法-vs-HTTP-POST方法\"><a href=\"#HTTP-GET方法-vs-HTTP-POST方法\" class=\"headerlink\" title=\"HTTP GET方法 vs HTTP POST方法\"></a>HTTP GET方法 vs HTTP POST方法</h3><p>也许，你会想起一个面试题。HTTP请求的GET与POST方式有什么区别？你可能会回答到：GET方式通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交。但是，我们现在从RESTful的资源角度来看待问题，HTTP GET方法是幂等的，所以它适合作为查询操作，HTTP POST方法是非幂等的，所以用来表示新增操作。</p>\n<p>但是，也有例外，我们有的时候可能需要把查询方法改造成HTTP POST方法。比如，超长（1k）的GET URL使用POST方法来替代，因为GET受到URL长度的限制。虽然，它不符合幂等性，但是它是一种折中的方案。</p>\n<h3 id=\"HTTP-POST方法-vs-HTTP-PUT方法\"><a href=\"#HTTP-POST方法-vs-HTTP-PUT方法\" class=\"headerlink\" title=\"HTTP POST方法 vs HTTP PUT方法\"></a>HTTP POST方法 vs HTTP PUT方法</h3><p>对于HTTP POST方法和TTP PUT方法，我们一般的理解是POST表示创建资源，PUT表示更新资源。当然，这个是正确的理解。</p>\n<p>但是，实际上，两个方法都用于创建资源，更为本质的差别是在幂等性。HTTP POST方法是非幂等，所以用来表示创建资源，HTTP PUT方法是幂等的，因此表示更新资源更加贴切。</p>\n<h3 id=\"HTTP-PUT方法-vs-HTTP-PATCH方法\"><a href=\"#HTTP-PUT方法-vs-HTTP-PATCH方法\" class=\"headerlink\" title=\"HTTP PUT方法 vs HTTP PATCH方法\"></a>HTTP PUT方法 vs HTTP PATCH方法</h3><p>此时，你看会有另外一个问题。HTTP PUT方法和HTTP PATCH方法，都是用来表述更新资源，它们之间有什么区别呢？我们一般的理解是PUT表示更新全部资源，PATCH表示更新部分资源。首先，这个是我们遵守的第一准则。根据上面的描述，PATCH方法是非幂等的，因此我们在设计我们服务端的RESTful API的时候，也需要考虑。如果，我们想要明确的告诉调用者我们的资源是幂等的，我的设计更倾向于使用HTTP PUT方法。</p>\n<p>原文链接:<a href=\"http://blog.720ui.com/2016/restful_idempotent/\" target=\"_blank\" rel=\"noopener\">http://blog.720ui.com/2016/restful_idempotent/</a></p>\n","text":"如何理解RESTful的幂等性怎么理解幂等性HTTP幂等方法，是指无论调用多少次都不会有不同结果的 HTTP 方法。不管你调用一次，还是调用一百次，一千次，结果都是相同的。<br>1<br>2<br>3<br>4<br>5<br>6<br>GET     /tickets    ","link":"","raw":null,"photos":[],"categories":[{"name":"幂等性","slug":"幂等性","count":1,"path":"api/categories/幂等性.json"},{"name":"restful","slug":"幂等性/restful","count":1,"path":"api/categories/幂等性/restful.json"}],"tags":[{"name":"restful","slug":"restful","count":1,"path":"api/tags/restful.json"},{"name":"幂等性","slug":"幂等性","count":1,"path":"api/tags/幂等性.json"}]}]}