{"meta":{"title":"Kxvz Blog","subtitle":"Kxvz的博客","description":"Kxvz Blog Java Centos","author":"kxvz","url":"http://blog.loyom.com"},"pages":[],"posts":[{"title":"Centos7安装rabbitmq server 3.6.0","slug":"Centos7安装rabbitmq-server-3-6-0","date":"2018-12-12T02:11:01.000Z","updated":"2018-12-12T02:11:15.317Z","comments":true,"path":"2018/12/12/Centos7安装rabbitmq-server-3-6-0/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Centos7安装rabbitmq-server-3-6-0/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132###假设所有操作在opt目录下进行cd /optmkdir appscd apps### 下载 RabbitMQ Serverwget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.0/rabbitmq-server-generic-unix-3.6.0.tar.xz### 解压tar -xvJf rabbitmq-server-generic-unix-3.6.0.tar.xz### 安装 Erlangyum install erlang.x86_64 -y### 进入RabbitMQ的解压目录中cd rabbitmq_server-3.6.0cd sbin### 启动RabbitMQ并在后台之行./rabbitmq-server start -detached### 添加网站管理插件./rabbitmq-plugins enable rabbitmq_management### 添加RabbitMQ的帐号和密码./rabbitmqctl add_user admin admin### 设定帐号权限(administrator[超级管理员]，monitoring[监控者]，policymaker[策略制定者]，management[普通管理者])./rabbitmqctl set_user_tags admin administrator### 完成后打开网站并使用帐号密码登录 http://ip:15672","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"rabbitmq","slug":"Centos/rabbitmq","permalink":"http://blog.loyom.com/categories/Centos/rabbitmq/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"install","slug":"install","permalink":"http://blog.loyom.com/tags/install/"},{"name":"rabbitmq","slug":"rabbitmq","permalink":"http://blog.loyom.com/tags/rabbitmq/"}]},{"title":"Centos7 安装 memcached 1.4.25","slug":"Centos7-安装-memcached-1-4-25","date":"2018-12-12T02:10:23.000Z","updated":"2018-12-12T02:10:23.441Z","comments":true,"path":"2018/12/12/Centos7-安装-memcached-1-4-25/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Centos7-安装-memcached-1-4-25/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061### 下载memcachedwget http://memcached.org/files/memcached-1.4.25.tar.gz### 安装 libeventyum install libevent-devel.x86_64 -y### 解压Memcachedtar -zvxf memcached-1.4.25.tar.gz### 进入memcached目录cd memcached-1.4.25### 设定安装位置./configure --prefix=/opt/apps/memcached### 安装 make &amp; make install### 启动cd /opt/apps/memcached/bin./memcached -d -m 256 -u root -p 11211 -c 1024 –P /tmp/memcached.pid### 参数说明:-p 监听的TCP端口(默认: 11211) -U 监听的UDP端口(默认: 11211, 0表示不监听) -s 用于监听的UNIX套接字路径（禁用网络支持） -a UNIX套接字访问掩码，八进制数字（默认：0700） -l 监听的IP地址。（默认：INADDR_ANY，所有地址） -d 作为守护进程来运行。 -r 最大核心文件限制。 -u 设定进程所属用户。（只有root用户可以使用这个参数） -m 单个数据项的最大可用内存，以MB为单位。（默认：64MB） -M 内存用光时报错。（不会删除数据） -c 最大并发连接数。（默认：1024） -k 锁定所有内存页。注意你可以锁定的内存上限。 试图分配更多内存会失败的，所以留意启动守护进程时所用的用户可分配的内存上限。 （不是前面的 -u 参数；在sh下，使用命令\"ulimit -S -l NUM_KB\"来设置。） -v 提示信息（在事件循环中打印错误/警告信息。） -vv 详细信息（还打印客户端命令/响应） -vvv 超详细信息（还打印内部状态的变化） -h 打印这个帮助信息并退出。 -i 打印memcached和libevent的许可。 -P 保存进程ID到指定文件，只有在使用 -d 选项的时候才有意义。 -f 块大小增长因子。（默认：1.25） -n 分配给key+value+flags的最小空间（默认：48） -L 尝试使用大内存页（如果可用的话）。提高内存页尺寸可以减少\"页表缓冲（TLB）\"丢失次数，提高运行效率。 为了从操作系统获得大内存页，memcached会把全部数据项分配到一个大区块。 -D 使用 作为前缀和ID的分隔符。 这个用于按前缀获得状态报告。默认是\":\"（冒号）。 如果指定了这个参数，则状态收集会自动开启；如果没指定，则需要用命令\"stats detail on\"来开启。 -t 使用的线程数（默认：4） -R 每个连接可处理的最大请求数。 -C 禁用CAS。 -b 设置后台日志队列的长度（默认：1024） -B 绑定协议 - 可能值：ascii,binary,auto（默认） -I 重写每个数据页尺寸。调整数据项最大尺寸。 ### 查看进程ps aux|grep memcached","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"memcached","slug":"Centos/memcached","permalink":"http://blog.loyom.com/categories/Centos/memcached/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"install","slug":"install","permalink":"http://blog.loyom.com/tags/install/"},{"name":"memcached","slug":"memcached","permalink":"http://blog.loyom.com/tags/memcached/"}]},{"title":"Centos7安装 mongodb-3.2.3","slug":"Centos7安装-mongodb-3-2-3","date":"2018-12-12T02:09:45.000Z","updated":"2018-12-12T02:09:45.980Z","comments":true,"path":"2018/12/12/Centos7安装-mongodb-3-2-3/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Centos7安装-mongodb-3-2-3/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738### 下载MongoDBwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.3.tgz### 解压tar -zxvf mongodb-linux-x86_64-3.2.3.tgz### 创建需要安装的目录mkdir -p /opt/mongodb### 复制过去cp -R -n mongodb-linux-x86_64-3.2.3 /opt/mongodb### 创建存储目录mkdir -p /opt/mongodb/datamkdir -p /opt/mongodb/data/db ### 数据目录mkdir -p /opt/mongodb/data/log ### 日志目录### 编辑环境变量vi ~/.bashrc### 在最后一行下面加上PATH=/opt/mongodb/mongodb-linux-x86_64-3.2.3/bin:$PATH### 启动./mongod --maxConns=100 --port=27017 --bind_ip=127.0.0.1 --dbpath=/opt/mongodb/data/db --logpath=/opt/mongodb/data/log/mongodb.log --logappend --fork## 添加管理员账号# 使用mongo 命令mongo# 使用 admin 库use admin# 添加root账号密码为rootdb.addUser(\"root\",\"root\")# 新版Mongodb 添加root账号密码为rootdb.createUser(&#123;user:'root',pwd:'root',roles:['userAdminAnyDatabase']&#125;)","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"mongodb","slug":"Centos/mongodb","permalink":"http://blog.loyom.com/categories/Centos/mongodb/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"install","slug":"install","permalink":"http://blog.loyom.com/tags/install/"},{"name":"mongodb","slug":"mongodb","permalink":"http://blog.loyom.com/tags/mongodb/"}]},{"title":"Android的Activity跳转和传值","slug":"Android的Activity跳转和传值","date":"2018-12-12T02:09:11.000Z","updated":"2018-12-12T02:09:11.712Z","comments":true,"path":"2018/12/12/Android的Activity跳转和传值/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Android的Activity跳转和传值/","excerpt":"","text":"12345678910111213141516171819//需要返回值:Intent intent = new Intent(MyAndroidAppActivity.this, SendSMSActivity.class); startActivityForResult(intent, SEND_SMS_REQUEST); //不需要返回值:startActivity(new Intent (MyAndroidAppActivity.this, Notepadv1.class) );// 1Intent intent = new Intent(this, TextInputActivity.class); intent.putExtra(\"Text\", mText); intent.putExtra(\"TextColor\", mTextColor); intent.putExtra(\"TextSize\", mTextSize); intent.putExtra(\"TextBold\", mTextBold); // 2Bundle extras = getIntent().getExtras(); mText = extras.getString(\"Text\"); mTextColor = extras.getInt(\"TextColor\"); mTextSize = extras.getFloat(\"TextSize\"); mTextBold = extras.getBoolean(\"TextBold\");","categories":[{"name":"android","slug":"android","permalink":"http://blog.loyom.com/categories/android/"},{"name":"activity","slug":"android/activity","permalink":"http://blog.loyom.com/categories/android/activity/"}],"tags":[{"name":"android","slug":"android","permalink":"http://blog.loyom.com/tags/android/"},{"name":"activity","slug":"activity","permalink":"http://blog.loyom.com/tags/activity/"}]},{"title":"Centos7安装Samba 共享文件夹","slug":"Centos7安装Samba-共享文件夹","date":"2018-12-12T02:08:37.000Z","updated":"2018-12-12T02:08:37.167Z","comments":true,"path":"2018/12/12/Centos7安装Samba-共享文件夹/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Centos7安装Samba-共享文件夹/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041### yum install -y samba samba-client samba-common### 备份cp /etc/samba/smb.conf /etc/samba/smb.conf_bak### 配置vi /etc/samba/smb.conf [global]workgroup = WORKGROUPserver string = Samba Server %vnetbios name = centossecurity = usermap to guest = bad userdns proxy = no#============================ Share Definitions ============================== [Anonymous]path = /samba/anonymousbrowsable =yeswritable = yesguest ok = yesread only = no :wq#保存并退出### 设置开机启动 并 启动mkdir -p /samba/anonymoussystemctl enable smb.servicesystemctl enable nmb.servicesystemctl restart smb.servicesystemctl restart nmb.service### 添加防火墙 -A INPUT -p udp -m tcp --dport 137 -j ACCEPT -A INPUT -p udp -m tcp --dport 138 -j ACCEPT -A INPUT -p tcp -m tcp --dport 139 -j ACCEPT -A INPUT -p tcp -m tcp --dport 445 -j ACCEPT ### 或者firewall-cmd --permanent --zone=public --add-service=samba","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"samba","slug":"Centos/samba","permalink":"http://blog.loyom.com/categories/Centos/samba/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"install","slug":"install","permalink":"http://blog.loyom.com/tags/install/"},{"name":"samba","slug":"samba","permalink":"http://blog.loyom.com/tags/samba/"}]},{"title":"Centos7使用YUM进行install或update出现KeyboardInterrupt错误","slug":"Centos7使用YUM进行install或update出现KeyboardInterrupt错误","date":"2018-12-12T02:08:06.000Z","updated":"2018-12-12T02:08:06.849Z","comments":true,"path":"2018/12/12/Centos7使用YUM进行install或update出现KeyboardInterrupt错误/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Centos7使用YUM进行install或update出现KeyboardInterrupt错误/","excerpt":"","text":"123456789101112131415161718192021### 错误信息File \"/usr/lib/python2.7/site-packages/urlgrabber/grabber.py\", line 1517, in _do_perform raise KeyboardInterrupt ### 解决方案 ###### 1.打开文件:/usr/lib/python2.7/site-packages/urlgrabber/grabber.py### 2.在文件的1510行左右找到下面这句代码:elif errcode in (42, 55, 56):### 修改为:elif errcode == 42:### 保存退出ESC:wq### 重新使用yum","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"yum","slug":"Centos/yum","permalink":"http://blog.loyom.com/categories/Centos/yum/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"yum","slug":"yum","permalink":"http://blog.loyom.com/tags/yum/"},{"name":"keyboardInterrupt","slug":"keyboardInterrupt","permalink":"http://blog.loyom.com/tags/keyboardInterrupt/"}]},{"title":"Centos7安装Erlang18.3","slug":"Centos7安装Erlang18-3","date":"2018-12-12T02:07:28.000Z","updated":"2018-12-12T02:07:28.392Z","comments":true,"path":"2018/12/12/Centos7安装Erlang18-3/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Centos7安装Erlang18-3/","excerpt":"","text":"12345678910111213141516171819202122232425### 首先下载资源wget http://erlang.org/download/otp_src_18.3.tar.gz### 解压tar -xzvf otp_src_18.3.tar.gz### 安装依赖包yum install -y gcc gcc-c++ unixODBC-devel openssl-devel ncurses-devel### 设定安装位置./configure --prefix=/opt/apps/erlang --without-javac### 安装make &amp;&amp; make install### 添加环境变量vi ~/.base_profile### 加到原有变量之后使用:隔开,&#123;erlang/bin&#125; 是你的安装路径,如:/opt/apps/erlang/binPATH=$PATH:&#123;erlang/bin&#125;export PATH:wq### 使之生效source ~/.base_profile","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"erlang","slug":"Centos/erlang","permalink":"http://blog.loyom.com/categories/Centos/erlang/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"install","slug":"install","permalink":"http://blog.loyom.com/tags/install/"},{"name":"erlang","slug":"erlang","permalink":"http://blog.loyom.com/tags/erlang/"}]},{"title":"Java使用AES加密解密时需要的Jar","slug":"Java使用AES加密解密时需要的Jar","date":"2018-12-12T02:05:35.000Z","updated":"2018-12-12T02:05:35.941Z","comments":true,"path":"2018/12/12/Java使用AES加密解密时需要的Jar/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Java使用AES加密解密时需要的Jar/","excerpt":"","text":"当使用Java进行AES加密或者解密的时候出现如下错误: java.security.InvalidKeyException: Illegal key size or default parameters 可尝试使用官方的JCE解决: 下载地址: http://www.oracle.com/technetwork/java/javase/downloads/index.html 选择当前使用的JDK版本下进行下载: 找到下面这句描述然后进行下载 Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files for JDK/JRE 下载下载后解压出来根据README.txt进行操作","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"aes","slug":"java/aes","permalink":"http://blog.loyom.com/categories/java/aes/"},{"name":"jce","slug":"java/aes/jce","permalink":"http://blog.loyom.com/categories/java/aes/jce/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"aes","slug":"aes","permalink":"http://blog.loyom.com/tags/aes/"},{"name":"jce","slug":"jce","permalink":"http://blog.loyom.com/tags/jce/"}]},{"title":"Mysql 修改Root密码和访问IP限制","slug":"Mysql-修改Root密码和访问IP限制","date":"2018-12-12T02:05:01.000Z","updated":"2018-12-12T02:05:01.588Z","comments":true,"path":"2018/12/12/Mysql-修改Root密码和访问IP限制/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Mysql-修改Root密码和访问IP限制/","excerpt":"","text":"12345678910111213141516171819202122suservice mysqld stopmysqld_safe --skip-grant-tables&amp;mysql -u root mysqluse mysql;delete from user where user is null;delete from user where user = '';UPDATE user SET password=PASSWORD(\"1234\") WHERE user='root';UPDATE user SET host='localhost' where user='root' and host='%';UPDATE user SET host='192.168.%.%' where user='root' and host='localhost.localdomain';FLUSH PRIVILEGES;select user,host,password from user;exit;service mysqld restart","categories":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/categories/mysql/"},{"name":"host","slug":"mysql/host","permalink":"http://blog.loyom.com/categories/mysql/host/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"},{"name":"host","slug":"host","permalink":"http://blog.loyom.com/tags/host/"}]},{"title":"配置Mysql主从服务","slug":"配置Mysql主从服务","date":"2018-12-12T02:04:06.000Z","updated":"2018-12-12T02:04:06.094Z","comments":true,"path":"2018/12/12/配置Mysql主从服务/","link":"","permalink":"http://blog.loyom.com/2018/12/12/配置Mysql主从服务/","excerpt":"","text":"配置主数据库 my.cnfserver-id=1log-bin=master-binlog-bin-index=master-bin.index 在主数据库上创建同步账号create user backup;GRANT REPLICATION SLAVE ON . TO ‘backup‘@’192.168.%.%’ IDENTIFIED BY ‘mysql’; 配置从数据库 my.cnfserver-id=2relay-log-index=slave-relay-bin.indexrelay-log=slave-relay-bin 重启mysql服务service mysqld restart 连接Master服务change master to master_host=’192.168.91.128’,master_port=3306,master_user=’backup’,master_password=’mysql’,master_log_file=’master-bin.000001’,master_log_pos=0; 启动slave服务start slave; 查看Master服务状态SHOW MASTER STATUS; 查看Slave服务状态SHOW slave STATUS \\G; 检查server_id是否一样,需要不一样show variables like ‘server_id’; 常见错误错误: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.解决方式: 检查data目录中的auto.cnf中的server-uuid=** 是否一样的,要改为不一样","categories":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/categories/mysql/"},{"name":"master-slave","slug":"mysql/master-slave","permalink":"http://blog.loyom.com/categories/mysql/master-slave/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"},{"name":"主从","slug":"主从","permalink":"http://blog.loyom.com/tags/主从/"},{"name":"master","slug":"master","permalink":"http://blog.loyom.com/tags/master/"},{"name":"slave","slug":"slave","permalink":"http://blog.loyom.com/tags/slave/"}]},{"title":"编译安装Ruby2.3.1","slug":"编译安装Ruby2-3-1","date":"2018-12-12T02:02:57.000Z","updated":"2018-12-12T02:02:57.174Z","comments":true,"path":"2018/12/12/编译安装Ruby2-3-1/","link":"","permalink":"http://blog.loyom.com/2018/12/12/编译安装Ruby2-3-1/","excerpt":"","text":"由于需要GCC和使用OpenSSL 所以需要先安装 安装 GCCsudo yum install -y gcc 安装 openssl下载: https://www.openssl.org/source/ 安装:tar -xzvf openssl-1.0.1t.tar.gz cd openssl-1.0.1t./configmakesudo make install 测试: openssl 安装Ruby下载: https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz安装: tar -xzvf ruby-2.3.1.tar.gz cd ruby-2.3.1./configure –with-openssl-dir=/usr/local/sslmakesudo make install 查看: ruby -v gem源gem sources -l ### 查询 gem sources –remove https://rubygems.org/ ## 移除 gem sources -a https://ruby.taobao.org/ ##添加 gem sources -a http://gems.ruby-china.org/","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"ruby","slug":"Centos/ruby","permalink":"http://blog.loyom.com/categories/Centos/ruby/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"install","slug":"install","permalink":"http://blog.loyom.com/tags/install/"},{"name":"ruby","slug":"ruby","permalink":"http://blog.loyom.com/tags/ruby/"}]},{"title":"在CentOS上制作CA证书并绑定到Nginx上","slug":"在CentOS上制作CA证书并绑定到Nginx上","date":"2018-12-12T02:02:06.000Z","updated":"2018-12-12T02:02:06.603Z","comments":true,"path":"2018/12/12/在CentOS上制作CA证书并绑定到Nginx上/","link":"","permalink":"http://blog.loyom.com/2018/12/12/在CentOS上制作CA证书并绑定到Nginx上/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//创建根证书密钥文件openssl genrsa -des3 -out test.key//创建根证书的申请文件openssl req -new -key test.key -out test.csr//创建一个自当前日期起为期十年的根证书openssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey test.key -in test.csr -out test.crt//创建服务器证书密钥openssl genrsa -des3 -out server.key 2048//创建服务器证书的申请文件openssl req -new -key server.key -out server.csr//创建自当前日期起有效期为期两年的服务器证书openssl x509 -req -days 730 -sha1 -extensions v3_req -CA test.crt -CAkey test.key -CAserial test.srl -CAcreateserial -in server.csr -out server.crt//创建客户端证书密钥文件openssl genrsa -des3 -out client.key 2048//创建客户端证书的申请文件openssl req -new -key client.key -out client.csr//创建一个自当前日期起有效期为两年的客户端证书openssl x509 -req -days 730 -sha1 -extensions v3_req -CA test.crt -CAkey test.key -CAserial test.srl -CAcreateserial -in client.csr -out client.crt//将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfxopenssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx//保存生成的文件备用，其中server.crt和server.key是配置单向SSL时需要使用的证书文件，client.crt是配置双向SSL时需要使用的证书文件，client.pfx是配置双向SSL时需要客户端安装的证书文件//证书合并cat server.key server.crt &gt; server.pemcat client.key client.crt &gt; client.pem//配置到Nginx中:server &#123; #添加443监听 listen 443; #开启SSL ssl on; #指定PEM格式的证书文件 ssl_certificate /etc/nginx/conf.d/keys/server.pem; ssl_client_certificate /etc/nginx/conf.d/keys/client.pem; ssl_certificate_key /etc/nginx/conf.d/keys/server.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_protocols SSLv2 SSLv3 TLSv1; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; #将所有的http请求通过rewrite重写到https上即可 # rewrite ^(.*)$ https://$host$1 permanent;&#125;// 所有的操作完成后需要重启 Nginx 并输入证书密码 service nginx restart 附 nginx.conf:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; upstream backend &#123; server 127.0.0.1:8080; &#125; server &#123; listen 443; server_name loyom.com; #填写绑定证书的域名 ssl on; ssl_certificate /opt/ca/1_loyom.com_bundle.crt; ssl_certificate_key /opt/ca/2_loyom.com.key; ssl_session_timeout 5m; ssl_protocols TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_buffering off; proxy_pass http://backend; &#125; &#125; server &#123; listen 80; location / &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_buffering off; proxy_pass http://backend; &#125; &#125;&#125;","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"nginx","slug":"Centos/nginx","permalink":"http://blog.loyom.com/categories/Centos/nginx/"},{"name":"ca","slug":"Centos/nginx/ca","permalink":"http://blog.loyom.com/categories/Centos/nginx/ca/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"nginx","slug":"nginx","permalink":"http://blog.loyom.com/tags/nginx/"},{"name":"ca","slug":"ca","permalink":"http://blog.loyom.com/tags/ca/"},{"name":"openssl","slug":"openssl","permalink":"http://blog.loyom.com/tags/openssl/"}]},{"title":"检测服务器是否连接着网络","slug":"检测服务器是否连接着网络","date":"2018-12-12T02:00:48.000Z","updated":"2018-12-12T02:00:48.336Z","comments":true,"path":"2018/12/12/检测服务器是否连接着网络/","link":"","permalink":"http://blog.loyom.com/2018/12/12/检测服务器是否连接着网络/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/bin/bash# 检测服务器是否连接着网络,如果网络不通 则 3次后 关机# crontab -e# */5 * * * * ./check.shecho \"Starting test network was clear...\"if test -e ./checkInfo then echo \"CheckInfo File Exist...\"else cat /dev/null &gt; ./checkInfofilast_res=`head -1 ./checkInfo`checkInternet()&#123; ping_res=1 for url in \"8.8.8.8\" \"61.139.2.69\" \"114.114.114.114\" \"168.95.1.1\" \"223.5.5.5\" \"180.76.76.76\" do echo \"PING $&#123;url&#125;\" ping=`ping -c 3 $&#123;url&#125;|awk 'NR==7 &#123;print $4&#125;'` if [ $&#123;ping&#125; -eq 0 ] then ping_res=1 else ping_res=2 fi if [ $&#123;ping_res&#125; -eq 2 ] then break fi done return $&#123;ping_res&#125;&#125;checkInternetresult=\"$?\"if [ $&#123;result&#125; -eq 1 ] then if [ \"$&#123;last_res&#125;\" = \"1\" ] then echo \"2\" &gt; ./checkInfo elif [ \"$&#123;last_res&#125;\" = \"2\" ] then cat /dev/null &gt; ./checkInfo init 0 else echo \"1\" &gt; ./checkInfo fi else cat /dev/null &gt; ./checkInfofi","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"network","slug":"Centos/network","permalink":"http://blog.loyom.com/categories/Centos/network/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"network","slug":"network","permalink":"http://blog.loyom.com/tags/network/"},{"name":"shell","slug":"shell","permalink":"http://blog.loyom.com/tags/shell/"}]},{"title":"Centos Linux 7 设置静态IP","slug":"Centos-Linux-7-设置静态IP","date":"2018-12-12T02:00:04.000Z","updated":"2018-12-12T02:00:04.606Z","comments":true,"path":"2018/12/12/Centos-Linux-7-设置静态IP/","link":"","permalink":"http://blog.loyom.com/2018/12/12/Centos-Linux-7-设置静态IP/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647## 先进入配置文件的放置位置:cd /etc/sysconfig/network-scripts/## 查看当前网卡使用的是哪个文件ip add## 过滤出配置文件列表ll | grep ifcfg## 编辑配置文件 vi ifcfg-ens160## 配置文件内容 主要:BOOTPROTO IPADDR NETMASK NM_CONTROLLED ONBOOT 这几个字段,其他的不变TYPE=EthernetBOOTPROTO=staticIPADDR=192.168.1.251NETMASK=255.255.255.0DNS1=8.8.8.8DNS2=8.8.4.4NM_CONTROLLED=noDEFROUTE=yesPEERDNS=yesPEERROUTES=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_PEERDNS=yesIPV6_PEERROUTES=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens160UUID=23a77b70-a6e3-4399-a5bd-4ca312a0f123DEVICE=ens160ONBOOT=yes## 修改网关配置文件: vi /etc/sysconfig/networkNETWORKING=yesNETWORKING_IPV6=noHOSTNAME=localhost.localdomainGATEWAY=192.168.1.1## 重启网络服务systemctl restart network.service","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"ip","slug":"Centos/ip","permalink":"http://blog.loyom.com/categories/Centos/ip/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"ip","slug":"ip","permalink":"http://blog.loyom.com/tags/ip/"},{"name":"ifcfg","slug":"ifcfg","permalink":"http://blog.loyom.com/tags/ifcfg/"}]},{"title":"关于Nginx的反向代理配置","slug":"关于Nginx的反向代理配置","date":"2018-12-12T01:59:26.000Z","updated":"2018-12-12T01:59:26.862Z","comments":true,"path":"2018/12/12/关于Nginx的反向代理配置/","link":"","permalink":"http://blog.loyom.com/2018/12/12/关于Nginx的反向代理配置/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940worker_processes 4;error_log /home/tools/nginx-1.8.1/logs/error.log;events &#123; worker_connections 512;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; upstream backend &#123; server 192.168.10.251; server 192.168.10.252; server 192.168.10.253; server 192.168.10.254; &#125; server &#123; listen 88; server_name localhost; location / &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_buffering off; proxy_pass http://backend; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125;","categories":[{"name":"nginx","slug":"nginx","permalink":"http://blog.loyom.com/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.loyom.com/tags/nginx/"},{"name":"反向代理","slug":"反向代理","permalink":"http://blog.loyom.com/tags/反向代理/"}]},{"title":"Centos常用操作记录","slug":"Centos常用操作记录","date":"2018-12-11T10:39:21.000Z","updated":"2018-12-11T10:39:21.309Z","comments":true,"path":"2018/12/11/Centos常用操作记录/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos常用操作记录/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#!/bin/bash### 重新设置nohup的输出文件nohup command &gt; myout.file 2&gt;&amp;1 &amp;### 修改文件夹以及文件夹下的子文件权限chmod 755 files/ -R### 设置开机启动服务 sshsystemctl enable sshd.service### 禁用开机启动服务 firewalldsystemctl disable firewalld.service### Centos 解压 *.tar.xz 文件 tar -xvJf *.tar.xz### 如果这条命令出现错误:### tar (child): xz: Cannot exec: No such file or directory### tar (child): Error is not recoverable: exiting now### 请安装: yum install xz -y### 查看ssh服务systemctl list-unit-files | grep ssh###启动SSH服务systemctl start sshd.service### 安装常用工具 如: iostatyum install sysstat -y### Centos 解压 *.tar.gz 文件 tar -xzvf *.tar.gz### 解压 *.tar 文件tar -xvf *.tar### 解压 *.tar.bz2 文件tar -xjvf *.tar.bz2### 解压 *.tar.Z 文件tar -xZvf *.tar.Z### 查看连接数netstat -nat |awk '&#123;print $6&#125;'|sort|uniq -c|sort -rnnetstat -n | awk '/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'netstat -ano | grep 80 | grep -v EST | less### 查看80端口的连接数netstat -nat|grep -i \"80\"|wc -l### 安装常用的工具yum install -y gcc gcc-c++ openssl-devel unixODBC-devel### ==单用户修改密码================================================### Centos7 忘记密码 单用户修改### 将ro改为rw init=/sysroot/bin/sh### 进入chrootchroot /sysroot### 重置密码passwd root### 更新系统信息touch /.autorelabel### 退出chrootexit### 重启init 6### ==单用户修改密码结束================================================###Centos7 停用防火墙systemctl stop firewalld.service### 查看mongo程序的监听端口netstat -tnlp | grep mongod### 启动Memcached服务./memcached -d -m 256 -u root -p 11211 -c 1024 –P /tmp/memcached.pid### 后台启动Redis服务./redis-server &amp;### 后台启动RabbitMQ服务./rabbitmq-server start -detached### 启动Solr服务./solr start -p 8984### 启动MongoDB服务./mongod --maxConns=100 --port=27017 --bind_ip=127.0.0.1 --dbpath=/opt/mongodb/data/db --logpath=/opt/mongodb/data/log/mongodb.log --logappend --fork","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"bash","slug":"Centos/bash","permalink":"http://blog.loyom.com/categories/Centos/bash/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"bash","slug":"bash","permalink":"http://blog.loyom.com/tags/bash/"}]},{"title":"Linux释放内存的命令","slug":"Linux释放内存的命令","date":"2018-12-11T10:38:49.000Z","updated":"2018-12-11T10:38:49.545Z","comments":true,"path":"2018/12/11/Linux释放内存的命令/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Linux释放内存的命令/","excerpt":"","text":"Linux释放内存的命令： 123456789101112131415##强制将内存中的文件缓冲内容写到磁盘sync##手动释放Linux中的所有缓存echo 3 &gt; /proc/sys/vm/drop_caches##释放完内存后改回去让系统重新自动分配内存echo 0 &gt;/proc/sys/vm/drop_caches##=================================drop_caches值的含义：0：不释放（系统默认值）1：释放页缓存2：释放dentries和inodes3：释放所有缓存","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"sync","slug":"Centos/sync","permalink":"http://blog.loyom.com/categories/Centos/sync/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"sync","slug":"sync","permalink":"http://blog.loyom.com/tags/sync/"}]},{"title":"家庭电路 功率和负荷","slug":"家庭电路-功率和负荷","date":"2018-12-11T10:38:06.000Z","updated":"2018-12-11T10:38:06.618Z","comments":true,"path":"2018/12/11/家庭电路-功率和负荷/","link":"","permalink":"http://blog.loyom.com/2018/12/11/家庭电路-功率和负荷/","excerpt":"","text":"功率=电压*电流 铜心电线负荷=电压系数安培横切面积 （这个系数安培粗略点说应该在大约5–10安培之间，空气中为10左右，直接水泥坐死5左右，在线管中根据空间多少多在6–8之间） 4平方的电线最大负荷是多少？42206=5280 （保险起见，我们系数算低点） 一般客厅大空调3000多瓦吧","categories":[{"name":"功率","slug":"功率","permalink":"http://blog.loyom.com/categories/功率/"},{"name":"负荷","slug":"功率/负荷","permalink":"http://blog.loyom.com/categories/功率/负荷/"}],"tags":[{"name":"功率","slug":"功率","permalink":"http://blog.loyom.com/tags/功率/"},{"name":"负荷","slug":"负荷","permalink":"http://blog.loyom.com/tags/负荷/"}]},{"title":"C#读取XML文件","slug":"C-读取XML文件","date":"2018-12-11T10:37:26.000Z","updated":"2018-12-11T10:37:26.592Z","comments":true,"path":"2018/12/11/C-读取XML文件/","link":"","permalink":"http://blog.loyom.com/2018/12/11/C-读取XML文件/","excerpt":"","text":"12345678910111213141516try&#123; XmlDocument xmlDoc = new XmlDocument(); xmlDoc.Load(@\"types.xml\"); XmlElement xmlRoot = xmlDoc.DocumentElement; foreach (XmlNode node in xmlRoot.ChildNodes) &#123; Type type = new Type(); string num = node[\"num\"].InnerText; string desc = node[\"desc\"].InnerText; string content = node[\"content\"].InnerXml; &#125;&#125;catch &#123; &#125;","categories":[{"name":"C#","slug":"C","permalink":"http://blog.loyom.com/categories/C/"},{"name":"xml","slug":"C/xml","permalink":"http://blog.loyom.com/categories/C/xml/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://blog.loyom.com/tags/C/"},{"name":"xml","slug":"xml","permalink":"http://blog.loyom.com/tags/xml/"}]},{"title":"C#进行Socket 连接发送和接收数据","slug":"C-进行Socket-连接发送和接收数据","date":"2018-12-11T10:36:44.000Z","updated":"2018-12-11T10:37:33.561Z","comments":true,"path":"2018/12/11/C-进行Socket-连接发送和接收数据/","link":"","permalink":"http://blog.loyom.com/2018/12/11/C-进行Socket-连接发送和接收数据/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/// &lt;summary&gt;/// 获取四位数的数字得到数据长度/// &lt;/summary&gt;/// &lt;param name=\"b\"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;private int byte2Int(byte[] b)&#123; return ((b[0] &amp; 0xff) &lt;&lt; 24) | ((b[1] &amp; 0xff) &lt;&lt; 16) | ((b[2] &amp; 0xff) &lt;&lt; 8) | (b[3] &amp; 0xff);&#125;/// &lt;summary&gt;/// 把数据长度转换为二进制/// &lt;/summary&gt;/// &lt;param name=\"a\"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;private byte[] int2Byte(int a)&#123; byte[] b = new byte[4]; b[0] = (byte)(a &gt;&gt; 24); b[1] = (byte)(a &gt;&gt; 16); b[2] = (byte)(a &gt;&gt; 8); b[3] = (byte)(a); return b;&#125;/// &lt;summary&gt;/// 读取Socket的数据/// &lt;/summary&gt;/// &lt;param name=\"ip\"&gt;&lt;/param&gt;/// &lt;param name=\"port\"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;private void readSocketData(String ip,int port,String requestData)&#123; try &#123; IPAddress ipAddress = IPAddress.Parse(ip); Socket clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); clientSocket.ReceiveTimeout = 5000; clientSocket.SendTimeout = 5000; clientSocket.Connect(new IPEndPoint(ipAddress, port)); Task&lt;String&gt; readRes = Task.Factory.StartNew&lt;String&gt;(() =&gt; &#123; byte[] result = new byte[40960]; clientSocket.Receive(result); int receiveLength = byte2Int(result); String response = Encoding.UTF8.GetString(result, headLength, receiveLength); return response; &#125;); byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(requestData); int length = byteArray.Length; byte[] lenBytes = int2Byte(length); byte[] newBytes = new byte[lenBytes.Length + length]; lenBytes.CopyTo(newBytes, 0); byteArray.CopyTo(newBytes, lenBytes.Length); clientSocket.Send(newBytes); string resultStr = readRes.Result; MessageBox.Show(resultStr, \"Socket Result\", MessageBoxButtons.OK, MessageBoxIcon.Error); &#125; catch (Exception ex) &#123; MessageBox.Show(\"Socket connect fail.\\r\\n\" + ex.Message, \"ERROR\", MessageBoxButtons.OK, MessageBoxIcon.Error); &#125; finally &#123; this.btn_submit.Enabled = true; &#125;&#125;","categories":[{"name":"C#","slug":"C","permalink":"http://blog.loyom.com/categories/C/"},{"name":"socket","slug":"C/socket","permalink":"http://blog.loyom.com/categories/C/socket/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://blog.loyom.com/tags/C/"},{"name":"socket","slug":"socket","permalink":"http://blog.loyom.com/tags/socket/"}]},{"title":"关于Java去连接HTTP地址的操作","slug":"关于Java去连接HTTP地址的操作","date":"2018-12-11T10:36:15.000Z","updated":"2018-12-11T10:36:15.250Z","comments":true,"path":"2018/12/11/关于Java去连接HTTP地址的操作/","link":"","permalink":"http://blog.loyom.com/2018/12/11/关于Java去连接HTTP地址的操作/","excerpt":"","text":"使用HTTPClient进行操作,可以忽略SSL 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180/** * @author Kai * @Date 2015-7-28 19:47:16 */public class HTTPClient &#123; //HTTP请求读取超时时间 private static final int SOCKET_TIME_OUT = 5000; //HTTP请求连接时间 private static final int CONNECT_TIME_OUT = 5000; //请求重试次数 private static final int RETRY_TIMES = 3; /** * * @param address 请求地址 * @param method 请求方式 * @param params 请求参数 * @param paramSendType 发送类型 * @param cookies 设置cookies值发送 * @return */ public String request(String address, String method, String params, String paramSendType, String cookies) &#123; address = address.trim(); CloseableHttpResponse closeableHttpResponse = null; if (SupportProtocol.HTTP_METHOD_GET.equalsIgnoreCase(method)) &#123; closeableHttpResponse = this.GET(address, params, paramSendType, cookies); &#125; else if (SupportProtocol.HTTP_METHOD_POST.equalsIgnoreCase(method)) &#123; closeableHttpResponse = this.POST(address, params, paramSendType, cookies); &#125; else if (SupportProtocol.HTTP_METHOD_PUT.equalsIgnoreCase(method)) &#123; closeableHttpResponse = this.PUT(address, params, paramSendType, cookies); &#125; else &#123; closeableHttpResponse = this.POST(address, params, paramSendType, cookies); &#125; return this.buildReponseMsg(closeableHttpResponse); &#125; private CloseableHttpResponse PUT(String address, String params, String paramSendType, String cookies) &#123; try &#123; URI uri = URI.create(address); HttpPut httpPut = new HttpPut(uri); RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(SOCKET_TIME_OUT).setConnectTimeout(CONNECT_TIME_OUT).build(); httpPut.setConfig(requestConfig); if (SupportProtocol.SUPPORT_JSON.equalsIgnoreCase(paramSendType)) &#123; httpPut.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\"); StringEntity entity = new StringEntity(params, ContentType.APPLICATION_JSON); httpPut.setEntity(entity); &#125; else if (SupportProtocol.SUPPORT_JSON.equalsIgnoreCase(paramSendType)) &#123; httpPut.setHeader(\"Content-Type\", \"application/xml; charset=UTF-8\"); StringEntity entity = new StringEntity(params, ContentType.APPLICATION_XML); httpPut.setEntity(entity); &#125; else &#123; httpPut.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\"); StringEntity entity = new StringEntity(params, ContentType.APPLICATION_FORM_URLENCODED); httpPut.setEntity(entity); &#125; if (StrUtil.isNotEmpty(cookies)) &#123; httpPut.setHeader(\"Cookie\", cookies); &#125; CloseableHttpClient httpClient = HttpClients.createDefault(); if (address.toLowerCase().startsWith(\"https\")) &#123; httpClient = this.createSSLClientDefault(); &#125; return httpClient.execute(httpPut); &#125; catch (Exception ex) &#123; LogUtil.error(ex); &#125; return null; &#125; private CloseableHttpResponse GET(String address, String params, String paramSendType, String cookies) &#123; try &#123; URI uri; if (EmptyUtil.isNotEmpty(params)) &#123; uri = URI.create(String.format(\"%s?%s\", address, params)); &#125; else &#123; uri = URI.create(address); &#125; HttpGet httpGet = new HttpGet(uri); RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(SOCKET_TIME_OUT).setConnectTimeout(CONNECT_TIME_OUT).build(); httpGet.setConfig(requestConfig); if (SupportProtocol.SUPPORT_JSON.equalsIgnoreCase(paramSendType)) &#123; httpGet.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\"); &#125; else if (SupportProtocol.SUPPORT_XML.equalsIgnoreCase(paramSendType)) &#123; httpGet.setHeader(\"Content-Type\", \"application/xml; charset=UTF-8\"); &#125; else &#123; httpGet.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\"); &#125; if (StrUtil.isNotEmpty(cookies)) &#123; httpGet.setHeader(\"Cookie\", cookies); &#125; CloseableHttpClient httpClient = HttpClients.createDefault(); if (address.toLowerCase().startsWith(\"https\")) &#123; httpClient = this.createSSLClientDefault(); &#125; return httpClient.execute(httpGet); &#125; catch (Exception ex) &#123; LogUtil.error(ex); &#125; return null; &#125; private CloseableHttpResponse POST(String address, String params, String paramSendType, String cookies) &#123; try &#123; URI uri = URI.create(address); HttpPost httpPost = new HttpPost(uri); RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(SOCKET_TIME_OUT).setConnectTimeout(CONNECT_TIME_OUT).build(); httpPost.setConfig(requestConfig); if (SupportProtocol.SUPPORT_JSON.equalsIgnoreCase(paramSendType)) &#123; httpPost.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\"); StringEntity entity = new StringEntity(params, ContentType.APPLICATION_JSON); httpPost.setEntity(entity); &#125; else if (SupportProtocol.SUPPORT_XML.equalsIgnoreCase(paramSendType)) &#123; httpPost.setHeader(\"Content-Type\", \"application/xml; charset=UTF-8\"); StringEntity entity = new StringEntity(params, ContentType.APPLICATION_XML); httpPost.setEntity(entity); &#125; else &#123; httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\"); StringEntity entity = new StringEntity(params, ContentType.APPLICATION_FORM_URLENCODED); httpPost.setEntity(entity); &#125; if (StrUtil.isNotEmpty(cookies)) &#123; httpPost.setHeader(\"Cookie\", cookies); &#125; CloseableHttpClient httpClient = HttpClients.createDefault(); if (address.toLowerCase().startsWith(\"https\")) &#123; httpClient = this.createSSLClientDefault(); &#125; return httpClient.execute(httpPost); &#125; catch (Exception ex) &#123; LogUtil.error(ex); &#125; return null; &#125; private CloseableHttpClient createSSLClientDefault() &#123; try &#123; SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy() &#123; @Override public boolean isTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123; return true; &#125; &#125;).build(); SSLSocketFactory ssf = new SSLSocketFactory(sslContext, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); return HttpClients.custom().setSSLSocketFactory(ssf).build(); &#125; catch (Exception e) &#123; LogUtil.error(e.getMessage()); &#125; return HttpClients.createDefault(); &#125; private String buildReponseMsg(CloseableHttpResponse closeableHttpResponse) &#123; if (closeableHttpResponse == null) &#123; return null; &#125; try &#123; int code = closeableHttpResponse.getStatusLine().getStatusCode(); String msg = EntityUtils.toString(closeableHttpResponse.getEntity()); if (code == HttpStatus.SC_OK) &#123; return msg; &#125; &#125; catch (Exception ex) &#123; LogUtil.error(ex); &#125; return null; &#125;&#125; 使用URLConnection读取数据,访问HTTPS貌似有问题 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.net.URL;import java.net.URLConnection;import java.net.URLEncoder;import java.util.Map;/** * * @author Kai */public class Connector &#123; public String GET(String address, Map&lt;String, String&gt; params) throws Exception &#123; String param = this.buildParams(params); URL url = new URL(address + \"?\" + param); URLConnection conn = url.openConnection(); return this.readData(conn); &#125; public String GET(String address, String params) throws Exception &#123; URL url = new URL(address + \"?\" + params); URLConnection conn = url.openConnection(); return this.readData(conn); &#125; public String POST(String address, Map&lt;String, String&gt; params) throws Exception &#123; String param = this.buildParams(params); URL url = new URL(address); URLConnection conn = url.openConnection(); this.postData(conn, param); return this.readData(conn); &#125; public String POST(String address, String param) throws Exception &#123; URL url = new URL(address); URLConnection conn = url.openConnection(); this.postData(conn, param); return this.readData(conn); &#125; private String buildParams(Map&lt;String, String&gt; params) throws UnsupportedEncodingException &#123; StringBuilder sb = new StringBuilder(); for (Map.Entry&lt;String, String&gt; param : params.entrySet()) &#123; sb.append(param.getKey()).append(\"=\"); sb.append(URLEncoder.encode(param.getValue(), \"UTF-8\")); sb.append(\"&amp;\"); &#125; return sb.toString(); &#125; private void postData(final URLConnection conn, String requestData) throws Exception &#123; conn.setDoOutput(true); OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()); wr.write(requestData); wr.flush(); wr.close(); &#125; private String readData(final URLConnection conn) throws Exception &#123; String responseData = \"\"; BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"UTF-8\")); String line; while ((line = rd.readLine()) != null) &#123; responseData += line; &#125; responseData = new String(responseData.getBytes(), \"UTF-8\"); rd.close(); return responseData; &#125;&#125; 做个代码记录 Maven引用123456789101112131415&lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;4.4&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpcore&lt;/artifactId&gt; &lt;version&gt;4.4&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpcore-nio&lt;/artifactId&gt; &lt;version&gt;4.4&lt;/version&gt;&lt;/dependency&gt;","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"http","slug":"java/http","permalink":"http://blog.loyom.com/categories/java/http/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"http","slug":"http","permalink":"http://blog.loyom.com/tags/http/"}]},{"title":"Java的Web项目使用DWR简单配置说明","slug":"Java的Web项目使用DWR简单配置说明","date":"2018-12-11T10:35:07.000Z","updated":"2018-12-11T10:35:07.372Z","comments":true,"path":"2018/12/11/Java的Web项目使用DWR简单配置说明/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Java的Web项目使用DWR简单配置说明/","excerpt":"","text":"首先使用Maven引入DWR的Jar包12345&lt;dependency&gt; &lt;groupId&gt;org.directwebremoting&lt;/groupId&gt; &lt;artifactId&gt;dwr&lt;/artifactId&gt; &lt;version&gt;3.0.1-RELEASE&lt;/version&gt;&lt;/dependency&gt; 其次建立一个测试用的Java类 123456789101112/** * @author Kai * @Date 2016-1-7 14:32:08 */public class TestDwr &#123; public String getName(String name) &#123; System.out.println(\"Call GetName Method!\"); return \"Hello:\" + name; &#125;&#125; 然后配置dwr.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE dwr PUBLIC \"-//GetAhead Limited//DTD Direct Web Remoting 3.0//EN\" \"http://directwebremoting.org/schema/dwr30.dtd\"&gt;&lt;dwr&gt; &lt;allow&gt; &lt;create creator=\"new\" javascript=\"test\" scope=\"page\"&gt; &lt;param name=\"class\" value=\"com.k.ctc.web.dwr.TestDwr\" /&gt; &lt;/create&gt; &lt;/allow&gt;&lt;/dwr&gt;配置web.xml```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"&gt; &lt;servlet&gt; &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt; &lt;servlet-class&gt;org.directwebremoting.servlet.DwrServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;debug&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;!-- 如果改为false将会能接收其它域的请求，存在安全风险 --&gt; &lt;param-name&gt;crossDomainSessionSecurity&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;!-- 设置超时时间 --&gt; &lt;param-name&gt;scriptSessionTimeout&lt;/param-name&gt; &lt;param-value&gt;1800000&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;maxCallCount&lt;/param-name&gt; &lt;param-value&gt;20&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;config-xml&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/conf/dwr.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt; &lt;url-pattern&gt;/dwr/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt; 最后在HTML页面中使用12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Dwr Test Demo&lt;/title&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt; &lt;script type='text/javascript' src='/dwr/engine.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='/dwr/interface/test.js'&gt;&lt;/script&gt; &lt;script&gt; var reply = function (data) &#123; document.getElementById(\"result\").innerText = data; &#125;; function btn_click() &#123; var name = document.getElementById(\"name\").value; test.getName(name, reply); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=\"text\" id=\"name\"/&gt; &lt;input type=\"button\" value=\"GetName\" onclick=\"btn_click();\"/&gt; &lt;div id=\"result\"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 注意:js的路径需要引用正确,附带说明截图↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 写好后的测试页面 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓![image][http://static.oschina.net/uploads/space/2016/0107/151242_zpre_2370543.png] ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ DWR生成的模块列表页面 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓![image][http://static.oschina.net/uploads/space/2016/0107/151242_fqmL_2370543.png] ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 模块详情页面和需要引用的js路径说明等 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓![image][http://static.oschina.net/uploads/space/2016/0107/151242_L64D_2370543.jpg]","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"web","slug":"java/web","permalink":"http://blog.loyom.com/categories/java/web/"},{"name":"dwr","slug":"java/web/dwr","permalink":"http://blog.loyom.com/categories/java/web/dwr/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"web","slug":"web","permalink":"http://blog.loyom.com/tags/web/"},{"name":"dwr","slug":"dwr","permalink":"http://blog.loyom.com/tags/dwr/"}]},{"title":"使用HttpAsyncClient进行异步获取数据","slug":"使用HttpAsyncClient进行异步获取数据","date":"2018-12-11T10:33:13.000Z","updated":"2018-12-11T10:33:13.744Z","comments":true,"path":"2018/12/11/使用HttpAsyncClient进行异步获取数据/","link":"","permalink":"http://blog.loyom.com/2018/12/11/使用HttpAsyncClient进行异步获取数据/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import java.util.concurrent.CountDownLatch;import org.apache.http.HttpResponse;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.methods.HttpGet;import org.apache.http.concurrent.FutureCallback;import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;import org.apache.http.impl.nio.client.HttpAsyncClients;/** * @author Kai * @Date 2016-1-6 11:14:56 * @Desc */public class AsyncClient &#123; public static void main(String[] args) throws Exception &#123; // 设置HTTP请求的超时配置 RequestConfig config = RequestConfig.custom().setSocketTimeout(3000).setConnectTimeout(3000).build(); // 根据配置创建异步的HTTP客户端 CloseableHttpAsyncClient httpclient = HttpAsyncClients.custom().setDefaultRequestConfig(config).build(); //运行客户端 httpclient.start(); //构建5个HTTPGET请求 HttpGet[] requests = new HttpGet[]&#123; new HttpGet(\"https://www.baidu.com/\"), new HttpGet(\"https://www.baidu.com/\"), new HttpGet(\"https://www.baidu.com/\"), new HttpGet(\"https://www.baidu.com/\"), new HttpGet(\"https://www.baidu.com/\")&#125;; //创建一个计数器 final CountDownLatch latch = new CountDownLatch(requests.length); //循环请求 for (final HttpGet get : requests) &#123; httpclient.execute(get, new FutureCallback&lt;HttpResponse&gt;() &#123; @Override public void completed(HttpResponse t) &#123; latch.countDown(); System.out.println(\"==================================\"); System.out.println(t.getStatusLine()); &#125; @Override public void failed(Exception excptn) &#123; latch.countDown(); System.out.println(\"HttpGet failed\"); &#125; @Override public void cancelled() &#123; latch.countDown(); System.out.println(\"HttpGet cancelled\"); &#125; &#125;); &#125; //等待5个都请求完成 latch.await(); System.out.println(\"Shutting down\"); //关闭 httpclient.close(); &#125;&#125; 以下是使用Maven引用的jar(并不知道是不是都有使用到):1234567891011121314151617181920212223242526 &lt;properties&gt; &lt;httpclient.version&gt;4.4&lt;/httpclient.version&gt; &lt;/properties&gt; &lt;!-- HTTP CLIENT START --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpasyncclient&lt;/artifactId&gt; &lt;version&gt;4.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;$&#123;httpclient.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpcore&lt;/artifactId&gt; &lt;version&gt;$&#123;httpclient.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpcore-nio&lt;/artifactId&gt; &lt;version&gt;$&#123;httpclient.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;!-- HTTP CLIENT END --&gt;","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"httpclient","slug":"java/httpclient","permalink":"http://blog.loyom.com/categories/java/httpclient/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"httpclient","slug":"httpclient","permalink":"http://blog.loyom.com/tags/httpclient/"}]},{"title":"一些SQL语句的收集","slug":"一些SQL语句的收集","date":"2018-12-11T10:32:25.000Z","updated":"2018-12-11T10:32:25.720Z","comments":true,"path":"2018/12/11/一些SQL语句的收集/","link":"","permalink":"http://blog.loyom.com/2018/12/11/一些SQL语句的收集/","excerpt":"","text":"1234---Mysql查询表的容量use information_schema;select table_name,concat(round((data_length+index_length)/1024/1024/1024),'GB') as table_capacity,table_rows from tables where table_schema='db_name' order by table_capacity desc;","categories":[{"name":"sql","slug":"sql","permalink":"http://blog.loyom.com/categories/sql/"}],"tags":[{"name":"sql","slug":"sql","permalink":"http://blog.loyom.com/tags/sql/"}]},{"title":"Linux安装Redis,并用Java进行操作","slug":"Linux安装Redis-并用Java进行操作","date":"2018-12-11T10:32:02.000Z","updated":"2018-12-11T10:32:02.380Z","comments":true,"path":"2018/12/11/Linux安装Redis-并用Java进行操作/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Linux安装Redis-并用Java进行操作/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142## 进入目录cd /opt/app/redis## 下载Rediswget http://download.redis.io/releases/redis-3.0.7.tar.gz## 改权限?chmod -R 777 redis-3.0.5.tar.gz## 解压tar xzf redis-3.0.5.tar.gz## 进入Redis的目录cd redis-3.0.5## 安装到指定目录make MALLOC=libc PREFIX=/opt/app/redis install ## 如果安装失败,缺少GCC 则需要先安装 GCCyum install -y gcc## 安装成功后进入到 /opt/app/redis/cont/bin 目录可以看到如下文件redis-benchmarkredis-check-aofredis-check-dumpredis-cliredis-sentinel -&gt; redis-serverredis-server## 后台启动Redis服务./redis-server &amp;## 测试连接./redis-cli127.0.0.1:6379&gt; set a bOK127.0.0.1:6379&gt; get a\"b\"## 到此Redis的安装和启动完成 测试Java使用Redis123456// 使用Maven引入支持的Jar &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; 1234567891011121314151617//测试方法 public static void main(String[] params) throws Exception &#123; Jedis jedis = new Jedis(\"127.0.0.1\"); jedis.set(\"a\", \"b....\"); System.out.println(\"================================================\"); System.out.println(jedis.get(\"a\")); System.out.println(\"================================================\"); jedis.rename(\"a\", \"a1\"); System.out.println(jedis.get(\"a\")); System.out.println(\"================================================\"); System.out.println(jedis.get(\"a1\")); System.out.println(\"================================================\"); jedis.del(\"a1\"); System.out.println(jedis.get(\"a1\")); System.out.println(\"================================================\"); &#125; 1234567891011// 运行结果================================================b....================================================null================================================b....================================================null================================================","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"java","slug":"Centos/java","permalink":"http://blog.loyom.com/categories/Centos/java/"},{"name":"redis","slug":"Centos/java/redis","permalink":"http://blog.loyom.com/categories/Centos/java/redis/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"redis","slug":"redis","permalink":"http://blog.loyom.com/tags/redis/"}]},{"title":"Java使用GoogleProtocolBuffer简单说明","slug":"Java使用GoogleProtocolBuffer简单说明","date":"2018-12-11T10:30:34.000Z","updated":"2018-12-11T10:30:34.117Z","comments":true,"path":"2018/12/11/Java使用GoogleProtocolBuffer简单说明/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Java使用GoogleProtocolBuffer简单说明/","excerpt":"","text":"![image][http://static.oschina.net/uploads/space/2015/1203/145344_36DW_2370543.png] 12345###关于数据结构文件的描述符的含义1.required （表示必须存在）2.optional （表示可选，不一定需要有值）3.repeated （表示集合类）###定义一个简单的数据结构 1234567891011121314package com.test;option java_outer_classname = \"PersonData\";message person &#123; // ID（必需） required int32 id = 1; // 姓名（必需） required string name = 2 [default = 'Test']; // 年龄（可选） optional string age= 3; // 朋友的引用（集合） repeated int32 ids= 4 [packed=true]; &#125; 123456### 使用protoc工具转换为Java类###参数：-I 表示结构文件所在的目录，#### --java_out 表示输出的文件目录#### 第三个参数person.proto 表示使用的是哪个结构文件protoc -I=.\\ --java_out=.\\ person.proto 转换完成后把java文件考入对应的java包中，并在项目中引入 GoogleProtocolBuffer的使用jar包12345&lt;dependency&gt; &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt; &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt; 以下是生成后的Java测试:123456789101112131415161718192021222324252627package com.k.ctc.code;import com.test.PersonData;/** * @author Kai * @Date 2015-11-23 17:54:48 * @Desc */public class MainLauncher &#123; public static void main(String[] params) throws Exception &#123; long time1 = System.currentTimeMillis(); PersonData.person p = PersonData.person.newBuilder().setId(1).setAge(\"18\").setName(\"LiLei\").build(); System.out.println(\"======================================\"); System.out.println(p); byte[] bytes = p.toByteArray(); System.out.println(\"======================================\"); System.out.println(bytes.length); PersonData.person p1 = PersonData.person.parseFrom(bytes); System.out.println(\"======================================\"); System.out.println(p1); long time2 = System.currentTimeMillis(); System.out.println(\"======================================\"); System.out.println(\"time:\" + (time2 - time1)); &#125;&#125; 执行结果是:1234567891011121314======================================id: 1name: \"LiLei\"age: \"18\"======================================13======================================id: 1name: \"LiLei\"age: \"18\"======================================time:125","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"protobuf","slug":"java/protobuf","permalink":"http://blog.loyom.com/categories/java/protobuf/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"protobuf","slug":"protobuf","permalink":"http://blog.loyom.com/tags/protobuf/"}]},{"title":"游戏类别相关简称","slug":"游戏类别相关简称","date":"2018-12-11T10:28:52.000Z","updated":"2018-12-11T10:28:52.516Z","comments":true,"path":"2018/12/11/游戏类别相关简称/","link":"","permalink":"http://blog.loyom.com/2018/12/11/游戏类别相关简称/","excerpt":"","text":"ACT:动作游戏A-RPG:动作角色扮演游戏AVG:冒险游戏A-AVG:动作冒险游戏EDU:养成类游戏FLY:模拟飞行FPS:第一人称视角射击游戏FTG:格斗游戏MIX:合成类游戏MMO-RPG:大型多人在线角色扮演游戏MUD:网络游戏MUG:音乐游戏OTH:其他类游戏PUZ:益智类游戏RAC:赛车类游戏RPG:角色扮演游戏RTS:即时战略游戏SIM:模拟经营SLG:策略战棋游戏SPG:运动游戏S-RPG:战略角色扮演游戏SPT:体育游戏STG:射击游戏TAB:桌面棋类游戏","categories":[{"name":"game","slug":"game","permalink":"http://blog.loyom.com/categories/game/"},{"name":"游戏类别","slug":"game/游戏类别","permalink":"http://blog.loyom.com/categories/game/游戏类别/"}],"tags":[{"name":"game","slug":"game","permalink":"http://blog.loyom.com/tags/game/"},{"name":"游戏类别","slug":"游戏类别","permalink":"http://blog.loyom.com/tags/游戏类别/"}]},{"title":"Java读取HttpServletRequest的post数据流","slug":"Java读取HttpServletRequest的post数据流","date":"2018-12-11T10:28:18.000Z","updated":"2018-12-11T10:28:18.365Z","comments":true,"path":"2018/12/11/Java读取HttpServletRequest的post数据流/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Java读取HttpServletRequest的post数据流/","excerpt":"","text":"12345678910111213public String readPostData(HttpServletRequest request) &#123; StringBuilder result = new StringBuilder(); try &#123; String line; BufferedReader reader = request.getReader(); while (null != (line = reader.readLine())) &#123; result.append(line); &#125; &#125; catch (Exception e) &#123; Log.info(e.getMessage()); &#125; return result.toString(); &#125;","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"readpost","slug":"java/readpost","permalink":"http://blog.loyom.com/categories/java/readpost/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"post","slug":"post","permalink":"http://blog.loyom.com/tags/post/"},{"name":"request","slug":"request","permalink":"http://blog.loyom.com/tags/request/"}]},{"title":"通过Java操作ActiveMQ的代码记录","slug":"通过Java操作ActiveMQ的代码记录","date":"2018-12-11T10:27:40.000Z","updated":"2018-12-11T10:27:40.790Z","comments":true,"path":"2018/12/11/通过Java操作ActiveMQ的代码记录/","link":"","permalink":"http://blog.loyom.com/2018/12/11/通过Java操作ActiveMQ的代码记录/","excerpt":"","text":"ActiveMQ的数据发送类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import javax.jms.DeliveryMode;import javax.jms.Destination;import javax.jms.MessageProducer;import javax.jms.Session;import javax.jms.TextMessage;import org.apache.activemq.ActiveMQConnectionFactory;import org.apache.activemq.pool.PooledConnection;import org.apache.activemq.pool.PooledConnectionFactory;public class ActiveMQSend &#123; private final String ip; private final String port; private PooledConnection pooledConnection; /** * 构造方法（传入需要连接的IP和端口） * * @param ip （AvctiveMQ的服务IP） * @param port （ActiveMQ的服务端口） */ public ActiveMQSend(String ip, String port) &#123; this.ip = ip; this.port = port; this.init(); &#125; /** * 初始化ActiveMQ的连接池 */ private void init() &#123; try &#123; String[] ips = this.ip.split(\",\"); String[] ports = this.port.split(\",\"); StringBuilder tcpLink = new StringBuilder(); for (int i = 0; i &lt; ips.length; i++) &#123; tcpLink.append(\"tcp://\").append(ips[i]).append(\":\").append(ports[i]).append(\",\"); &#125; String mqLink = tcpLink.toString(); if (tcpLink.length() &gt; 0) &#123; if (',' == tcpLink.charAt(tcpLink.length() - 1)) &#123; mqLink = tcpLink.substring(0, tcpLink.length() - 1); &#125; &#125; String url = String.format(\"failover:(%s)?initialReconnectDelay=1000&amp;timeout=3000&amp;startupMaxReconnectAttempts=2\", mqLink); ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url); factory.setMaxThreadPoolSize(50); PooledConnectionFactory poolFactory = new PooledConnectionFactory(factory); pooledConnection = (PooledConnection) poolFactory.createConnection(); pooledConnection.start(); &#125; catch (Exception ex) &#123; LogUtil.error(ex); this.destroy(); &#125; &#125; /** * 向ActiveMQ中发送数据 * * @param needSendMsg 需要发送的数据信息 * @param sendMQName 需要发送到的队列名称 */ public void send(String needSendMsg, String sendMQName) &#123; if (this.pooledConnection == null) &#123; this.init(); &#125; if (this.pooledConnection != null) &#123; try &#123; Session session = this.pooledConnection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); Destination destination = session.createQueue(sendMQName); MessageProducer producer = session.createProducer(destination); producer.setDeliveryMode(DeliveryMode.PERSISTENT); TextMessage message = session.createTextMessage(needSendMsg); producer.send(message); session.close(); &#125; catch (Exception ex) &#123; LogUtil.error(ex); this.destroy(); &#125; &#125; &#125; /** * 回收连接池 */ public void destroy() &#123; try &#123; if (pooledConnection != null) &#123; pooledConnection.stop(); &#125; &#125; catch (Exception e) &#123; LogUtil.error(e); &#125; try &#123; if (pooledConnection != null) &#123; pooledConnection.close(); &#125; &#125; catch (Exception e) &#123; LogUtil.error(e); &#125; pooledConnection = null; &#125;&#125; 调用发送1234567891011121314151617181920212223242526public static void main(String[] args) &#123; Thread t1 = new Thread(new Runnable() &#123; @Override public void run() &#123; ActiveMQSend sen = new ActiveMQSend(\"127.0.0.1\", \"61616\"); for (int i = 0; i &lt; 50000; i++) &#123; String msg = String.format(\"这是TestQueue 2 第 %s 条发送的数据！\", i); sen.send(msg, \"TestQueue2\"); &#125; &#125; &#125;); Thread t2 = new Thread(new Runnable() &#123; @Override public void run() &#123; ActiveMQSend sen = new ActiveMQSend(\"127.0.0.1\", \"61616\"); for (int i = 0; i &lt; 50000; i++) &#123; String msg = String.format(\"这是TestQueue 1 第 %s 条发送的数据！\", i); sen.send(msg, \"TestQueue1\"); &#125; &#125; &#125;); t1.start(); t2.start(); &#125; ActiveMQ数据接收类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import javax.jms.MessageConsumer;import javax.jms.Destination;import javax.jms.Session;import javax.jms.TextMessage;import org.apache.activemq.ActiveMQConnectionFactory;import org.apache.activemq.pool.PooledConnection;import org.apache.activemq.pool.PooledConnectionFactory;public class Receiver &#123; private PooledConnection pooledConnection; private void init() &#123; try &#123; String url = \"failover:(tcp://192.168.10.219:61616)?initialReconnectDelay=1000&amp;timeout=3000&amp;startupMaxReconnectAttempts=2\"; ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url); factory.setMaxThreadPoolSize(100); PooledConnectionFactory poolFactory = new PooledConnectionFactory(factory); pooledConnection = (PooledConnection) poolFactory.createConnection(); pooledConnection.start(); &#125; catch (Exception ex) &#123; Log.error(ex); this.destroy(); &#125; &#125; public void receive(String queueName) &#123; if (this.pooledConnection == null) &#123; this.init(); &#125; if (this.pooledConnection != null) &#123; try &#123; Session session = this.pooledConnection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); Destination destination = session.createQueue(queueName); MessageConsumer consumer = session.createConsumer(destination); while (true) &#123; TextMessage message = (TextMessage) consumer.receive(10); if (null != message) &#123; System.out.println(\"收到消息\" + message.getText()); &#125; &#125; &#125; catch (Exception ex) &#123; Log.info(ex.getMessage()); this.destroy(); &#125; &#125; &#125; public void destroy() &#123; try &#123; if (pooledConnection != null) &#123; pooledConnection.stop(); &#125; &#125; catch (Exception e) &#123; Log.error(e); &#125; try &#123; if (pooledConnection != null) &#123; pooledConnection.close(); &#125; &#125; catch (Exception e) &#123; Log.error(e); &#125; pooledConnection = null; &#125;&#125; 数据接收类的调用123456789101112131415161718public static void main(String[] args) &#123; Thread t1 = new Thread(new Runnable() &#123; @Override public void run() &#123; Receiver r1 = new Receiver(); r1.receive(\"TestQueue2\"); &#125; &#125;); Thread t2 = new Thread(new Runnable() &#123; @Override public void run() &#123; Receiver r2 = new Receiver(); r2.receive(\"TestQueue1\"); &#125; &#125;); t1.start(); t2.start(); &#125;","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"activemq","slug":"java/activemq","permalink":"http://blog.loyom.com/categories/java/activemq/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"activemq","slug":"activemq","permalink":"http://blog.loyom.com/tags/activemq/"}]},{"title":"javax.mail发送邮件","slug":"javax-mail发送邮件","date":"2018-12-11T10:26:41.000Z","updated":"2018-12-11T10:26:41.062Z","comments":true,"path":"2018/12/11/javax-mail发送邮件/","link":"","permalink":"http://blog.loyom.com/2018/12/11/javax-mail发送邮件/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334/* @param fromMail 发送邮箱 * @param user 发送邮箱账号 * @param password 邮箱密码 * @param toMail 接收邮件地址 * @param mailTitle 邮件标题 * @param mailContent 邮件内容 * @throws Exception */ public static void sendMail(String fromMail, String user, String password, String toMail, String mailTitle, String mailContent) throws Exception &#123; MailSSLSocketFactory sf = new MailSSLSocketFactory(); sf.setTrustAllHosts(true); Properties props = new Properties(); props.put(\"mail.smtp.host\", \"mail.*****.com\"); props.put(\"mail.smtp.port\", 465); props.put(\"mail.transport.protocol\", \"smtp\"); props.put(\"mail.smtp.auth\", \"true\"); props.put(\"mail.smtp.ssl.enable\", \"true\"); props.put(\"mail.smtp.ssl.socketFactory\", sf); Session session = Session.getInstance(props); MimeMessage message = new MimeMessage(session); message.setFrom(new InternetAddress(fromMail)); message.setRecipient(Message.RecipientType.TO, new InternetAddress(toMail)); message.setSubject(mailTitle); message.setText(mailContent); message.setSentDate(new Date()); message.saveChanges(); Transport transport = session.getTransport(); transport.connect(user, password); transport.sendMessage(message, message.getAllRecipients()); transport.close(); &#125; 下面是需要添加的包：12345&lt;dependency&gt; &lt;groupId&gt;javax.mail&lt;/groupId&gt; &lt;artifactId&gt;mail&lt;/artifactId&gt; &lt;version&gt;1.4.7&lt;/version&gt;&lt;/dependency&gt;","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"mail","slug":"java/mail","permalink":"http://blog.loyom.com/categories/java/mail/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"mail","slug":"mail","permalink":"http://blog.loyom.com/tags/mail/"}]},{"title":"安装Nginx","slug":"安装Nginx","date":"2018-12-11T10:26:08.000Z","updated":"2018-12-11T10:26:08.718Z","comments":true,"path":"2018/12/11/安装Nginx/","link":"","permalink":"http://blog.loyom.com/2018/12/11/安装Nginx/","excerpt":"","text":"1234567891011121314151617181920212223### 官方下载地址下载Nginx的压缩包 .tar.gzwget http://nginx.org/download/### 解压tar –xzvf nginx-1.2.1.tar.gz### 安装依赖的相关工具yum -y install pcre-devel openssl openssl-devel### 配置编译./configure --prefix=/usr/local/nginx### 编译并安装make &amp;&amp; make install### 常用命令nginx #启动Nginxnginx -s reload #修改配置后重新加载生效nginx -s reopen #重新打开日志文件nginx -t -c /path/to/nginx.conf #测试nginx配置文件是否正确nginx -s stop #快速停止Nginx","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"nginx","slug":"Centos/nginx","permalink":"http://blog.loyom.com/categories/Centos/nginx/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"nginx","slug":"nginx","permalink":"http://blog.loyom.com/tags/nginx/"}]},{"title":"Centos7 防火墙配置","slug":"Centos7-防火墙配置","date":"2018-12-11T10:25:35.000Z","updated":"2018-12-11T10:25:35.159Z","comments":true,"path":"2018/12/11/Centos7-防火墙配置/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos7-防火墙配置/","excerpt":"","text":"CentOS 7.0默认使用的是firewall作为防火墙，这里改为iptables防火墙。123456789101112131415### 关闭firewall：systemctl stop firewalld.service #停止firewallsystemctl disable firewalld.service #禁止firewall开机启动### 安装iptables防火墙yum install iptables-services #安装vi /etc/sysconfig/iptables #编辑防火墙配置文件-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT #加入80端口:wq! #保存退出###最后重启防火墙使配置生效systemctl restart iptables.service ###设置防火墙开机启动systemctl enable iptables.service","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"firewall","slug":"Centos/firewall","permalink":"http://blog.loyom.com/categories/Centos/firewall/"},{"name":"iptables","slug":"Centos/firewall/iptables","permalink":"http://blog.loyom.com/categories/Centos/firewall/iptables/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"firewall-cmd","slug":"firewall-cmd","permalink":"http://blog.loyom.com/tags/firewall-cmd/"},{"name":"iptables","slug":"iptables","permalink":"http://blog.loyom.com/tags/iptables/"}]},{"title":"强行重置Mysql的账号密码","slug":"强行重置Mysql的账号密码","date":"2018-12-11T10:24:52.000Z","updated":"2018-12-11T10:24:52.164Z","comments":true,"path":"2018/12/11/强行重置Mysql的账号密码/","link":"","permalink":"http://blog.loyom.com/2018/12/11/强行重置Mysql的账号密码/","excerpt":"","text":"1234567891011121314151617181920212223242526### 首先停止mysql服务service mysqld stop### 设置跳过密码检查mysqld_safe --skip-grant-tables &amp;### 进入mysql服务器mysql -uroot -p #回车进入### 使用mysql数据库use mysql;### 更新数据库中的账号密码为 newpassupdate user set password=PASSWORD(\"newpass\")where user=\"root\";### 更新权限flush privileges;### 退出mysqlquit### 重启mysql服务service mysqld restart### 使用新密码进入mysql -uroot -p newpass","categories":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/categories/mysql/"},{"name":"resetpass","slug":"mysql/resetpass","permalink":"http://blog.loyom.com/categories/mysql/resetpass/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"},{"name":"resetpass","slug":"resetpass","permalink":"http://blog.loyom.com/tags/resetpass/"}]},{"title":"MySQL的四种BLOB类型","slug":"MySQL的四种BLOB类型","date":"2018-12-11T10:24:26.000Z","updated":"2018-12-11T10:24:26.929Z","comments":true,"path":"2018/12/11/MySQL的四种BLOB类型/","link":"","permalink":"http://blog.loyom.com/2018/12/11/MySQL的四种BLOB类型/","excerpt":"","text":"123456###MySQL的四种BLOB类型 类型 大小(单位：字节)TinyBlob 最大 255Blob 最大 65KMediumBlob 最大 16MLongBlob 最大 4G","categories":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/categories/mysql/"},{"name":"blob","slug":"mysql/blob","permalink":"http://blog.loyom.com/categories/mysql/blob/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"},{"name":"blob","slug":"blob","permalink":"http://blog.loyom.com/tags/blob/"}]},{"title":"获取map中第一个数据值","slug":"获取map中第一个数据值","date":"2018-12-11T10:22:44.000Z","updated":"2018-12-11T10:22:44.739Z","comments":true,"path":"2018/12/11/获取map中第一个数据值/","link":"","permalink":"http://blog.loyom.com/2018/12/11/获取map中第一个数据值/","excerpt":"","text":"123456789101112131415161718/** * 获取map中第一个非空数据值 * * @param &lt;K&gt; Key的类型 * @param &lt;V&gt; Value的类型 * @param map 数据源 * @return 返回的值 */ public static &lt;K, V&gt; V getFirstNotNull(Map&lt;K, V&gt; map) &#123; V obj = null; for (Entry&lt;K, V&gt; entry : map.entrySet()) &#123; obj = entry.getValue(); if (obj != null) &#123; break; &#125; &#125; return obj; &#125;","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"map","slug":"java/map","permalink":"http://blog.loyom.com/categories/java/map/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"map","slug":"map","permalink":"http://blog.loyom.com/tags/map/"}]},{"title":"Java 图片合并类","slug":"Java-图片合并类","date":"2018-12-11T10:22:19.000Z","updated":"2018-12-11T10:22:19.668Z","comments":true,"path":"2018/12/11/Java-图片合并类/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Java-图片合并类/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import javax.imageio.ImageIO;public class ImageHandle &#123; public BufferedImage marge(String first, String last, boolean isVertical) &#123; BufferedImage one = this.readImage(first); BufferedImage two = this.readImage(last); if (isVertical) &#123; return this.mergeTwoImageByVertical(one, two); &#125; else &#123; return this.mergeTwoImageByHorizontal(one, two); &#125; &#125; public void saveImage(String savePath, BufferedImage image) &#123; try &#123; File file = new File(savePath); ImageIO.write(image, \"jpg\", file);// 写图片 &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; &#125; private BufferedImage mergeTwoImageByVertical(BufferedImage one, BufferedImage two) &#123; int width = this.getWidth(one); int height = this.getHeight(one); int[] oneRPG = this.readImageRPG(one); int[] twoRPG = this.readImageRPG(two); BufferedImage result = new BufferedImage(width, height * 2, BufferedImage.TYPE_INT_RGB); result.setRGB(0, 0, width, height, oneRPG, 0, width); result.setRGB(0, height, width, height, twoRPG, 0, width); return result; &#125; private BufferedImage mergeTwoImageByHorizontal(BufferedImage one, BufferedImage two) &#123; int width = this.getWidth(one); int height = this.getHeight(one); int[] oneRPG = this.readImageRPG(one); int[] twoRPG = this.readImageRPG(two); BufferedImage result = new BufferedImage(width * 2, height, BufferedImage.TYPE_INT_RGB); result.setRGB(0, 0, width, height, oneRPG, 0, width); result.setRGB(width, 0, width, height, twoRPG, 0, width); return result; &#125; private int[] readImageRPG(BufferedImage image) &#123; int width = this.getWidth(image); int height = this.getHeight(image); int[] imageRPG = new int[width * height];// 从图片中读取RGB imageRPG = image.getRGB(0, 0, width, height, imageRPG, 0, width); return imageRPG; &#125; private int getWidth(BufferedImage image) &#123; if (image == null) &#123; return 0; &#125; return image.getWidth(); &#125; private int getHeight(BufferedImage image) &#123; if (image == null) &#123; return 0; &#125; return image.getHeight(); &#125; private BufferedImage readImage(String path) &#123; try &#123; File file = new File(path); return ImageIO.read(file); &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; return null; &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"image","slug":"java/image","permalink":"http://blog.loyom.com/categories/java/image/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"image","slug":"image","permalink":"http://blog.loyom.com/tags/image/"}]},{"title":"Linux设置Java环境变量","slug":"Linux设置Java环境变量","date":"2018-12-11T10:21:45.000Z","updated":"2018-12-11T10:21:45.114Z","comments":true,"path":"2018/12/11/Linux设置Java环境变量/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Linux设置Java环境变量/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637###Linux下使用”export“命令设定环境变量 一次性的，退出shell则消失export JAVA_HOME=/opt/app/jdk1.7.0_51export CLASSPATH=.:$JAVA_HOME/libexport PATH=$JAVA_HOME/bin:$cd### 添加针对当前用户的永久环境变量，先进入根目录： cd ~### 查看隐藏文件命令 ll -al### 通过 .bash_profile 保存vi ~/.bash_profile### 找到 PATH = *****### 加入以下代码PATH=&#123;原来已经存在的内容&#125;:/opt/app/jdk1.7.0_51/bin### 配置JAVA_HOMEexport JAVA_HOME=/opt/app/jdk1.7.0_51/binexport PATH### 保存退出 Esc :wq### 让新的环境变量生效命令 [root@localhost ~]#. .bash_profile### 查看环境变量命令 [root@localhost ~]# env### 附录WinJAVA_HOME = E:\\Program Files\\Java\\jdk1.8.0_73;CLASSPATH = .;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar;PATH = ;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;### 全部用户可以用需要修改 /etc/profile 在最后加上:export JAVA_HOME=/opt/app/jdk1.7.0_51export CLASSPATH=.:$JAVA_HOME/libexport PATH=$PATH:$JAVA_HOME/bin","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"java","slug":"Centos/java","permalink":"http://blog.loyom.com/categories/Centos/java/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"path","slug":"path","permalink":"http://blog.loyom.com/tags/path/"}]},{"title":"SOLID原则","slug":"SOLID原则","date":"2018-12-11T10:21:10.000Z","updated":"2018-12-11T10:21:10.181Z","comments":true,"path":"2018/12/11/SOLID原则/","link":"","permalink":"http://blog.loyom.com/2018/12/11/SOLID原则/","excerpt":"","text":"面向对象设计的SOLID原则S.O.L.I.D是面向对象设计和编程(OOD&amp;OOP)中几个重要编码原则(Programming Priciple)的首字母缩写。 单一责任原则：当需要修改某个类的时候原因有且只有一个（THERE SHOULD NEVER BE MORE THAN ONE REASON FOR A CLASS TO CHANGE）。换句话说就是让一个类只做一种类型责任，当这个类需要承当其他类型的责任的时候，就需要分解这个类。 开放封闭原则软件实体应该是可扩展，而不可修改的。也就是说，对扩展是开放的，而对修改是封闭的。这个原则是诸多面向对象编程原则中最抽象、最难理解的一个。 里氏替换原则当一个子类的实例应该能够替换任何其超类的实例时，它们之间才具有is-A关系 依赖倒置原则1. 高层模块不应该依赖于低层模块，二者都应该依赖于抽象 2. 抽象不应该依赖于细节，细节应该依赖于抽象 接口分离原则不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。","categories":[{"name":"solid","slug":"solid","permalink":"http://blog.loyom.com/categories/solid/"}],"tags":[{"name":"solid","slug":"solid","permalink":"http://blog.loyom.com/tags/solid/"}]},{"title":"Centos 安装 Solr","slug":"Centos-安装-Solr","date":"2018-12-11T10:20:21.000Z","updated":"2018-12-11T10:20:22.008Z","comments":true,"path":"2018/12/11/Centos-安装-Solr/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos-安装-Solr/","excerpt":"","text":"首先下载 点击下载:Solr-5.1.0 (注下载:solr-5.1.0.tgz) 点击下载:Tomcat-7.0.62.tar.gz 注意:默认下载的存放路径为Centos的登陆用户的根目录 然后在Centos上准备一个目录:如 /tools/123456789101112#### 部署tomcat #######解压tar -xzvf Tomcat-7.0.62.tar.gz###复制到安装目录cp ~/tomcat-7.0.62 /tools/###进入bincd /tools/tomcat-7.0.62/bin###启动Tomcat./startup.sh 操作Solr123#### 部署Solr #######解压Solrtar -xzvf solr-5.1.0.tar 上传solr.war到Tomcat然后关闭tomcat. 配置Solr:123456789101112131415161718###进入tomcat的solr目录:cd /tools/tomcat-7.0.62/webapps/solr/###建立Solr_Homemkdir solr_home###配置Solr的web.xmlvi web.xml###修改内容,取消env-entry的注释&lt;env-entry&gt; &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt; &lt;env-entry-value&gt;/tools/tomcat-7.0.62/webapps/solr/solr_home&lt;/env-entry-value&gt; &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;&lt;/env-entry&gt;### 保存退出Esc :wq 配置Solr的日志:1234### 复制相关Jar到Solr的lib中cp ~/solr-5.1.0/server/lib/ext/* /tools/tomcat-7.0.62/webapps/solr/WEB-INF/lib/### 复制log4j的配置文件到solr中cp ~/solr-5.1.0/server/resources/log4j.properties /tools/tomcat-7.0.62/webapps/solr/WEB-INF/classes/ 重新启动Tomcat 访问: http://127.0.0.1:8080/solr/","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"solr","slug":"Centos/solr","permalink":"http://blog.loyom.com/categories/Centos/solr/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"solr","slug":"solr","permalink":"http://blog.loyom.com/tags/solr/"},{"name":"tomcat","slug":"tomcat","permalink":"http://blog.loyom.com/tags/tomcat/"}]},{"title":"Centos 设置 时间同步","slug":"Centos-设置-时间同步","date":"2018-12-11T10:18:24.000Z","updated":"2018-12-11T10:18:24.841Z","comments":true,"path":"2018/12/11/Centos-设置-时间同步/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos-设置-时间同步/","excerpt":"","text":"安装ntpdate1yum install -y ntpdate 停止ntpdate服务1/etc/init.d/ntpdate stop 手动同步时间1/usr/sbin/ntpdate ntp.fudan.edu.cn 设定定时执行1234crontab -e### 在出现的输入框中输入下面的内容, 1440 表示 一天 1440分钟*/1440 * * * * /usr/sbin/ntpdate ntp.fudan.edu.cn 查看定时任务是否成功1crontab -l","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"ntp","slug":"Centos/ntp","permalink":"http://blog.loyom.com/categories/Centos/ntp/"},{"name":"crontab","slug":"Centos/ntp/crontab","permalink":"http://blog.loyom.com/categories/Centos/ntp/crontab/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"ntp","slug":"ntp","permalink":"http://blog.loyom.com/tags/ntp/"},{"name":"crontab","slug":"crontab","permalink":"http://blog.loyom.com/tags/crontab/"}]},{"title":"Centos转移Mysql的数据位置","slug":"Centos转移Mysql的数据位置","date":"2018-12-11T10:17:11.000Z","updated":"2018-12-11T10:17:11.470Z","comments":true,"path":"2018/12/11/Centos转移Mysql的数据位置/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos转移Mysql的数据位置/","excerpt":"","text":"首先，假设我们需要把Mysql的数据存储位置转到到 /data 下面 第一步：1service mysqld stop 第二步：123456### 备份原来的 mysqlcp -a /var/lib/mysql /var/lib/mysql_bak### 转移 mysqlcp -a /var/lib/mysql /data/ 转移完成后我们需要修改一些参数让mysql能使用新的地址：1234567### 备份原来的文件配置信息cp -a /etc/my.cnf /etc/my.cnf_bak### 修改原来的配置文件vi /etc/my.cnf### 找到 datadir 并把值修改为 ： datadir=/data/mysql### 找到 socket 并把值修改为 ： socket=/data/mysql/mysql.sock 修改第二个配置文件：123456789### 备份原来的文件信息cp -a /etc/init.d/mysqld /etc/init.d/mysqld_bak### 修改原来的文件信息vi /etc/init.d/mysqld### 找到 get_mysql_option mysqld datadir ### 并把值修改为 ： get_mysql_option mysqld datadir \"/data/mysql\"### 找到 datadir 并把值修改为 ： datadir=\"/data/mysql\" 配置文件修改完成后建立mysql sock 的软连接12345678### 进入原来的mysql目录cd /ver/lib/mysql### 移除里面的内容rm -rf *### 建立 mysql.sock 的软连接ln -s /data/mysql/mysql.sock /var/lib/mysql/mysql.sock 启动 mysql1service mysqld start 如果出现权限类的问题：12### 修改权限错误的文件或文件夹 如修改：/data/mysql 的文件夹权限命令chcon -R -t mysqld_db_t /data/mysql 如果修改了相应的文件夹权限还是无法启动 修改系统的权限验证：12345vi /etc/selinux/config### 找到 SELINUX 并把值修改为： SELINUX=disabledEsc :wq### 修改完成保存后重启系统reboot ==注意：以上操作如果是在生产环境中请谨慎操作。。==","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"mysql","slug":"Centos/mysql","permalink":"http://blog.loyom.com/categories/Centos/mysql/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"}]},{"title":"Centos安装Java和Mysql","slug":"Centos安装Java和Mysql","date":"2018-12-11T10:14:40.000Z","updated":"2018-12-11T10:15:08.696Z","comments":true,"path":"2018/12/11/Centos安装Java和Mysql/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos安装Java和Mysql/","excerpt":"","text":"首先,下载JDK: jdk-8u45-linux-x64.rpm 运行安装命令:1sudo yum localinstall -y jdk-8u45-linux-x64.rpm 安装Mysql: 下载Mysql: mysql-community-release-el6-5.noarch.rpm 运行安装命令:1sudo yum localinstall mysql-community-release-el6-5.noarch.rpm 更新好了Mysql的安装源后直接执行:1sudo yum install -y mysql-community-server 启动Mysql:1service mysqld start 第一次启动需要设置root密码:1mysqladmin -u root password 'yourpassword' 5.7版本设置密码:12345678910111213141516### 5.7 安装好后会默认生成一个密码, 需要启动Mysqld服务后可以查看grep 'temporary password' /var/log/mysqld.log## 查看的结果: eHI9*)Tl/zP?A temporary password is generated for root@localhost: eHI9*)Tl/zP?## 修改弱密码验证 避免无法更改为弱密码set global validate_password_policy = 0;set global validate_password_length = 4;## 设置新密码SET PASSWORD = PASSWORD('123456');## 刷新FLUSH PRIVILEGES; 登陆Mysql:1mysql -u root -p[yourpassword] ### 实际使用中,不需要写[],此处为了区分参数 -p 和 密码 检查Mysql是否开机启动:1chkconfig --list | grep mysqld ### 刚安装的都是 off 没有开机启动的 设置mysql 的开机启动1chkconfig mysqld on 外网访问:12345use mysql;update user set host = '%' where user ='root' and password is not null and password != '';flush privileges; Mysql8出现”cache_sha2_passward”的处理1234567### 更改密码规则 并设置密码为 123456 ALTER USER 'root'@'localhost' IDENTIFIED BY '123456' PASSWORD EXPIRE NEVER;ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';FLUSH PRIVILEGES; alter user 'root'@'localhost' identified by '123456';","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"mysql","slug":"Centos/mysql","permalink":"http://blog.loyom.com/categories/Centos/mysql/"},{"name":"java","slug":"Centos/mysql/java","permalink":"http://blog.loyom.com/categories/Centos/mysql/java/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"install","slug":"install","permalink":"http://blog.loyom.com/tags/install/"},{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"}]},{"title":"Centos挂载硬盘 ","slug":"Centos挂载硬盘","date":"2018-12-11T10:11:21.000Z","updated":"2018-12-11T10:11:21.175Z","comments":true,"path":"2018/12/11/Centos挂载硬盘/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos挂载硬盘/","excerpt":"","text":"1.首先进到 /sbin 里面 执行 fdisk 查看数据盘是否存在,并记下路径 如 :1fdisk -l ### 查看需要挂载的硬盘 如:/dev/vdb 2.格式化数据盘(请保存好重要数据):1mkfs.ext4 /dev/vdb 3.挂载分区到指定的文件夹下:12mkdir /data ### 创建文件夹mount /dev/vdb /data ### 挂载硬盘到此文件夹下 4.编辑/etc/fstab 文件,重启自动挂载1vi /etc/fstab 在文件最后添加1/dev/vdb /mnt ext4 defaults 0 0 Esc -&gt; :wq 保存退出,Reboot 重启…","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"mount","slug":"Centos/mount","permalink":"http://blog.loyom.com/categories/Centos/mount/"},{"name":"disk","slug":"Centos/mount/disk","permalink":"http://blog.loyom.com/categories/Centos/mount/disk/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"disk","slug":"disk","permalink":"http://blog.loyom.com/tags/disk/"},{"name":"mount","slug":"mount","permalink":"http://blog.loyom.com/tags/mount/"}]},{"title":"AngularJS 的安全Apply","slug":"AngularJS-的安全Apply","date":"2018-12-11T10:10:09.000Z","updated":"2018-12-11T10:10:09.292Z","comments":true,"path":"2018/12/11/AngularJS-的安全Apply/","link":"","permalink":"http://blog.loyom.com/2018/12/11/AngularJS-的安全Apply/","excerpt":"","text":"12345678910$scope.safeApply = function(fn) &#123; var phase = this.$root.$$phase; if (phase == '$apply' || phase == '$digest') &#123; if (fn &amp;&amp; (typeof(fn) === 'function')) &#123; fn(); &#125; &#125; else &#123; this.$apply(fn); &#125;&#125;; 使用NG的时候会遇到动态添加数据的情况,有可能在你动态添加数据后页面因为渲染已经完成了导致新添加的数据在页面中无法展示 如使用select标签:123&lt;select id=\"uidSelect\" class=\"sel\" ng-model=\"sid\" ng-init=\"\" ng-options=\"user.name for user in users\"&gt; &lt;option value=\"\" default&gt;-Select one-&lt;/option&gt;&lt;/select&gt; 因为开始的时候users数组的数据是固定的浏览器渲染出来后值就是固定的,那么如果在这之后我们想往users里面添加数据这个下拉选项是不会有改变的,这时候度娘上的各种攻略会告诉你加上 $scope.$apply() 就可以了…但是加好以后有可能会出现 [$rootScope:inprog] $apply already in progress 这样的错误信息,那么这时候只需要使用最上面提供的方法就可以了, 先把最上面的 safeApply 方法加入你的 scope 里面,然后动态添加完数据后 使用 $scope.safeApply(); 就可以了….","categories":[{"name":"js","slug":"js","permalink":"http://blog.loyom.com/categories/js/"},{"name":"angularjs","slug":"js/angularjs","permalink":"http://blog.loyom.com/categories/js/angularjs/"}],"tags":[{"name":"js","slug":"js","permalink":"http://blog.loyom.com/tags/js/"},{"name":"angularjs","slug":"angularjs","permalink":"http://blog.loyom.com/tags/angularjs/"},{"name":"apply","slug":"apply","permalink":"http://blog.loyom.com/tags/apply/"}]},{"title":"在CMD下备份和恢复Mysql数据库","slug":"在CMD下备份和恢复Mysql数据库","date":"2018-12-11T10:08:51.000Z","updated":"2018-12-11T10:08:51.880Z","comments":true,"path":"2018/12/11/在CMD下备份和恢复Mysql数据库/","link":"","permalink":"http://blog.loyom.com/2018/12/11/在CMD下备份和恢复Mysql数据库/","excerpt":"","text":"123456789###dbName:需要备份的数据库名字###E:\\dump\\20130820.sql : 备份文件的存放地址###需要指定连接地址请在参数里面加上 -h 127.0.0.1###需要指定连接端口请在参数里面加上 -P 3306###需要指定备份的编码请在参数里面加上 --default-character-set=utf8###备份数据库mysqldump -h 127.0.0.7 -u root -p dbName --set-gtid-purged=OFF --default-character-set=utf8 &gt; E:\\dump\\20130820.sql###恢复数据库mysql -u root -p dbName --default-character-set=utf8 &lt; E:\\dump\\20130820.sql 如果出现错误:mysqldump: Couldn’t execute ‘SELECT @@GTID_MODE’: Unknown system variable ‘GTID_MODE’ (1193) 就用:1mysqldump -h 127.0.0.7 -u root -p dbName --set-gtid-purged=OFF &gt; E:\\dump\\20140318.sql 如果出现错误: ERROR at line 696: Unknown command ‘\\0’. 一般来说是字符集不匹配导致的 就需要加上参数: –default-character-set=utf8 或者 –default-character-set=gbk","categories":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/categories/mysql/"},{"name":"mysqldump","slug":"mysql/mysqldump","permalink":"http://blog.loyom.com/categories/mysql/mysqldump/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"},{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"},{"name":"mysqldump","slug":"mysqldump","permalink":"http://blog.loyom.com/tags/mysqldump/"}]},{"title":"关于测试中使用ArgumentCaptor来验证执行过程中对象的值","slug":"关于测试中使用ArgumentCaptor来验证执行过程中对象的值","date":"2018-12-11T10:07:58.000Z","updated":"2018-12-11T10:07:58.153Z","comments":true,"path":"2018/12/11/关于测试中使用ArgumentCaptor来验证执行过程中对象的值/","link":"","permalink":"http://blog.loyom.com/2018/12/11/关于测试中使用ArgumentCaptor来验证执行过程中对象的值/","excerpt":"","text":"官方的示例：123ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);verify(mock).doSomething(argument.capture());assertEquals(\"John\", argument.getValue().getName()); 大体步骤： 首先构建ArgumentCaptor需要传入需要被捕获变量的对象，如示例中的Person.class。 然后在verify调用Mock对象的方法中调用argument.capture()来捕获执行该方法时该变量的值。 这样取到值后就可以进行值的验证，通过argument.getValue()得到该对象执行时的值。 关于ArgumentCaptor最多用到的方法： argument.capture() 捕获方法参数 argument.getValue() 获取方法参数值，如果方法进行了多次调用，它将返回最后一个参数值 argument.getAllValues() 方法进行多次调用后，返回多个参数值 注意：在使用的时候需要放在需要执行的方法之后，因为verify会验证执行，所以会放在调用方法之后,而不是像调用Mockito.when()设定条件时放在调用方法之前。 当遇到复杂对象的时候，如：Map&lt;String,Map&lt;String,Long&gt;&gt; 这样的对象的时候，觉得不好取值，可以设断点调试到该处，查看argument的数据结构，再进行取值验证。","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"test","slug":"java/test","permalink":"http://blog.loyom.com/categories/java/test/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"test","slug":"test","permalink":"http://blog.loyom.com/tags/test/"},{"name":"ArgumentCaptor","slug":"ArgumentCaptor","permalink":"http://blog.loyom.com/tags/ArgumentCaptor/"}]},{"title":"关于Mysql使用存储过程，并且使用游标的Demo","slug":"关于Mysql使用存储过程，并且使用游标的Demo","date":"2018-12-11T10:06:50.000Z","updated":"2018-12-11T10:06:50.484Z","comments":true,"path":"2018/12/11/关于Mysql使用存储过程，并且使用游标的Demo/","link":"","permalink":"http://blog.loyom.com/2018/12/11/关于Mysql使用存储过程，并且使用游标的Demo/","excerpt":"","text":"12345678910111213141516171819202122232425262728DELIMITER $$/* Mysql 创建存储过程 名为：new_pro */CREATE DEFINER=`root`@`localhost` PROCEDURE `new_pro`()BEGIN /* 声明变量 并设定默认值 */ Declare not_found int default 0; Declare collectionId bigint; Declare children_collectionId bigint; /* 创建游标 通过查询表 channelcollection创建出游标 */ Declare idCursor cursor for select id from channelcollection where name='a' or name='c'; /* 异常处理，当发生异常的时候设定 not_found的值为1 */ Declare continue handler for not found set not_found=1; /* 设定collectionId的值为 查询出的ID */ set collectionId = (SELECT id FROM channelcollection where name='b' limit 1); /* 使用游标之前先打开游标 */ open idCursor; /* 循环游标并且把循环出来的游标赋值给 children_collectionId */ idCursor_loop: LOOP fetch idCursor into children_collectionId; if not_found=1 then leave idCursor_loop; else /* 将数据循环插入另外一个表 */ insert into channelcollectionfamily values (collectionId,children_collectionId); end if; end LOOP idCursor_loop; /* 使用完之后关闭游标 */ close idCursor;END","categories":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/categories/mysql/"},{"name":"游标","slug":"mysql/游标","permalink":"http://blog.loyom.com/categories/mysql/游标/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"},{"name":"游标","slug":"游标","permalink":"http://blog.loyom.com/tags/游标/"}]},{"title":"Mysql 基本命令","slug":"Mysql-基本命令","date":"2018-12-11T10:06:07.000Z","updated":"2018-12-11T10:06:07.389Z","comments":true,"path":"2018/12/11/Mysql-基本命令/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Mysql-基本命令/","excerpt":"","text":"启动：net start mySql; 进入：mysql -u root -p/mysql -h localhost -u root -p databaseName; 列出数据库：show databases; 选择数据库：use databaseName; 列出表格：show tables； 显示表格列的属性：show columns from tableName； 建立数据库：source fileName.txt; 匹配字符：可以用通配符_代表任何一个字符，％代表任何字符串; 增加一个字段：alter table tabelName add column fieldName dateType; 增加多个字段：alter table tabelName add column fieldName1 dateType,add columns fieldName2 dateType; 多行命令输入:注意不能将单词断开;当插入或更改数据时，不能将字段的字符串展开到多行里，否则硬回车将被储存到数据中; 增加一个管理员帐户：grant all on . to user@localhost identified by “password”; 每条语句输入完毕后要在末尾填加分号’;’，或者填加’\\g’也可以； 查询时间：select now(); 查询当前用户：select user(); 查询数据库版本：select version(); 查询当前使用的数据库：select database(); 1、删除student_course数据库中的students数据表： rm -f student_course/students.* 2、备份数据库：(将数据库test备份) mysqldump -u root -p test&gt;c:\\test.txt 备份表格：(备份test数据库下的mytable表格) mysqldump -u root -p test mytable&gt;c:\\test.txt 将备份数据导入到数据库：(导回test数据库) mysql -u root -p test 3、创建临时表：(建立临时表zengchao) create temporary table zengchao(name varchar(10)); 4、创建表是先判断表是否存在 create table if not exists students(……); 5、从已经有的表中复制表的结构 create table table2 select * from table1 where 1&lt;&gt;1; 6、复制表 create table table2 select * from table1; 7、对表重新命名 alter table table1 rename as table2; 8、修改列的类型 alter table table1 modify id int unsigned;//修改列id的类型为int unsigned alter table table1 change id sid int unsigned;//修改列id的名字为sid，而且把属性修改为int unsigned 9、创建索引 alter table table1 add index ind_id (id); create index ind_id on table1 (id); create unique index ind_id on table1 (id);//建立唯一性索引 10、删除索引 drop index idx_id on table1; alter table table1 drop index ind_id; 11、联合字符或者多个列(将列id与”:”和列name和”=”连接) select concat(id,’:’,name,’=’) from students; 12、limit(选出10到20条)&lt;第一个记录集的编号是0&gt; select * from students order by id limit 9,10; 13、MySQL不支持的功能 事务，视图，外键和引用完整性，存储过程和触发器 14、MySQL会使用索引的操作符号 &lt;,&lt;=,&gt;=,&gt;,=,between,in,不带%或者_开头的like 15、使用索引的缺点 1)减慢增删改数据的速度； 2）占用磁盘空间； 3）增加查询优化器的负担； 当查询优化器生成执行计划时，会考虑索引，太多的索引会给查询优化器增加工作量，导致无法选择最优的查询方案； 16、分析索引效率 方法：在一般的SQL语句前加上explain； 分析结果的含义： 1）table：表名； 2）type：连接的类型，(ALL/Range/Ref)。其中ref是最理想的； 3）possible_keys：查询可以利用的索引名； 4）key：实际使用的索引； 5）key_len：索引中被使用部分的长度（字节）； 6）ref：显示列名字或者”const”（不明白什么意思）； 7）rows：显示MySQL认为在找到正确结果之前必须扫描的行数； 8）extra：MySQL的建议； 17、使用较短的定长列 1）尽可能使用较短的数据类型； 2）尽可能使用定长数据类型； a）用char代替varchar，固定长度的数据处理比变长的快些； b）对于频繁修改的表，磁盘容易形成碎片，从而影响数据库的整体性能； c）万一出现数据表崩溃，使用固定长度数据行的表更容易重新构造。使用固定长度的数据行，每个记录的开始位置都是固定记录长度的倍数，可以很容易被检测到，但是使用可变长度的数据行就不一定了； d）对于MyISAM类型的数据表，虽然转换成固定长度的数据列可以提高性能，但是占据的空间也大； 18、使用not null和enum 尽量将列定义为not null，这样可使数据的出来更快，所需的空间更少，而且在查询时，MySQL不需要检查是否存在特例，即null值，从而优化查询； 如果一列只含有有限数目的特定值，如性别，是否有效或者入学年份等，在这种情况下应该考虑将其转换为enum列的值，MySQL处理的更快，因为所有的enum值在系统内都是以标识数值来表示的； 19、使用optimize table 对于经常修改的表，容易产生碎片，使在查询数据库时必须读取更多的磁盘块，降低查询性能。具有可变长的表都存在磁盘碎片问题，这个问题对blob数据类型更为突出，因为其尺寸变化非常大。可以通过使用optimize table来整理碎片，保证数据库性能不下降，优化那些受碎片影响的数据表。 optimize table可以用于MyISAM和BDB类型的数据表。实际上任何碎片整理方法都是用mysqldump来转存数据表，然后使用转存后的文件并重新建数据表； 20、使用procedure analyse() 可以使用procedure analyse()显示最佳类型的建议，使用很简单，在select语句后面加上procedure analyse()就可以了；例如： select * from students procedure analyse(); select * from students procedure analyse(16,256); 第二条语句要求procedure analyse()不要建议含有多于16个值，或者含有多于256字节的enum类型，如果没有限制，输出可能会很长； 21、使用查询缓存 1）查询缓存的工作方式： 第一次执行某条select语句时，服务器记住该查询的文本内容和查询结果，存储在缓存中，下次碰到这个语句时，直接从缓存中返回结果；当更新数据表后，该数据表的任何缓存查询都变成无效的，并且会被丢弃。 2）配置缓存参数： 变量：query_cache _type，查询缓存的操作模式。有3中模式，0：不缓存；1：缓存查询，除非与 select sql_no_cache开头；2：根据需要只缓存那些以select sql_cache开头的查询； query_cache_size：设置查询缓存的最大结果集的大小，比这个值大的不会被缓存。 22、调整硬件 1）在机器上装更多的内存； 2）增加更快的硬盘以减少I/O等待时间； 寻道时间是决定性能的主要因素，逐字地移动磁头是最慢的，一旦磁头定位，从磁道读则很快； 3）在不同的物理硬盘设备上重新分配磁盘活动； 如果可能，应将最繁忙的数据库存放在不同的物理设备上，这跟使用同一物理设备的不同分区是不同的，因为它们将争用相同的物理资源（磁头）。","categories":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/categories/mysql/"},{"name":"cmd","slug":"mysql/cmd","permalink":"http://blog.loyom.com/categories/mysql/cmd/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"},{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"}]},{"title":"JavaScript之eval() 函数","slug":"JavaScript之eval-函数","date":"2018-12-11T10:05:39.000Z","updated":"2018-12-11T10:05:39.238Z","comments":true,"path":"2018/12/11/JavaScript之eval-函数/","link":"","permalink":"http://blog.loyom.com/2018/12/11/JavaScript之eval-函数/","excerpt":"","text":"定义和用法 eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。 语法1eval(string) 参数描述 string必需。要计算的字符串，其中含有要计算的 JavaScript 表达式或要执行的语句。 返回值 通过计算 string 得到的值（如果有的话）。 说明 该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。因此请不要为 eval() 函数传递 String 对象来作为参数。 如果试图覆盖 eval 属性或把 eval() 方法赋予另一个属性，并通过该属性调用它，则 ECMAScript 实现允许抛出一个 EvalError 异常。 抛出 如果参数中没有合法的表达式和语句，则抛出 SyntaxError 异常。 如果非法调用 eval()，则抛出 EvalError 异常。 如果传递给 eval() 的 Javascript 代码生成了一个异常，eval() 将把该异常传递给调用者。 提示和注释 提示：虽然 eval() 的功能非常强大，但在实际使用中用到它的情况并不多。 eg：1234567891011&lt;SCRIPT language=\"javascript\"&gt; function showsubmenu(sid) &#123; whichEl = eval(\"submenu\" + sid); if (whichEl.style.display == \"none\")&#123; eval(\"submenu\" + sid + \".style.display=\\\"\\\";\"); &#125;else&#123; eval(\"submenu\" + sid + \".style.display=\\\"none\\\";\"); &#125; &#125;&lt;/SCRIPT&gt;","categories":[{"name":"js","slug":"js","permalink":"http://blog.loyom.com/categories/js/"},{"name":"eval","slug":"js/eval","permalink":"http://blog.loyom.com/categories/js/eval/"}],"tags":[{"name":"js","slug":"js","permalink":"http://blog.loyom.com/tags/js/"},{"name":"javascript","slug":"javascript","permalink":"http://blog.loyom.com/tags/javascript/"},{"name":"eval","slug":"eval","permalink":"http://blog.loyom.com/tags/eval/"}]},{"title":"Ubuntu Clean the top panel ","slug":"Ubuntu-Clean-the-top-panel","date":"2018-12-11T10:04:42.000Z","updated":"2018-12-11T10:04:42.588Z","comments":true,"path":"2018/12/11/Ubuntu-Clean-the-top-panel/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Ubuntu-Clean-the-top-panel/","excerpt":"","text":"打开终端，终端窗口打开之后，在提示符后面分别执行下列命令：123gconftool --recursive-unset /apps/panel rm -rf ~/.gconf/apps/panel pkill gnome-panel 接下来， Ubuntu 默认的上下两栏面板就会恢复默认值， 出现顶部+底部各一面板的默认布局…","categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.loyom.com/categories/ubuntu/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.loyom.com/tags/ubuntu/"}]},{"title":"Java 用反射设置对象的属性值","slug":"Java-用反射设置对象的属性值","date":"2018-12-11T10:04:03.000Z","updated":"2018-12-11T10:04:03.489Z","comments":true,"path":"2018/12/11/Java-用反射设置对象的属性值/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Java-用反射设置对象的属性值/","excerpt":"","text":"1234567891011121314/** * 用反射设置对象的属性值 * @param obj 需要設置值的對象 * @param fieldName 需要設置值的屬性 * @param value 需要设置的值 * @return 设置值后的对象 */private Object invoke(Object obj, String fieldName, Object value) &#123; String firstWord = fieldName.substring(0, 1).toUpperCase(); String methodName = String.format(\"set%s%s\", firstWord, fieldName.substring(1)); Method method = obj.getClass().getMethod(methodName, value.getClass()); method.invoke(obj, value); return obj;&#125; Java 反射 创建对象的方法1、通过Class对象的newInstance()方法，这种方法的局限是只能取调用默认的构造函数 2、通过取得Class对象的getConstructor方法取得Construtor对象，然后再通过调用Constructor类的newInstance的两个方法","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"反射","slug":"java/反射","permalink":"http://blog.loyom.com/categories/java/反射/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"invoke","slug":"invoke","permalink":"http://blog.loyom.com/tags/invoke/"},{"name":"反射","slug":"反射","permalink":"http://blog.loyom.com/tags/反射/"}]},{"title":"Win下使用CMD查看端口占用","slug":"Win下使用CMD查看端口占用","date":"2018-12-11T10:03:06.000Z","updated":"2018-12-11T10:03:06.379Z","comments":true,"path":"2018/12/11/Win下使用CMD查看端口占用/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Win下使用CMD查看端口占用/","excerpt":"","text":"首先使用 Win+R 然后输入 cmd 回车 打开 cmd界面 所有端口占用情况输入 :1netstat -ano 查看指定的端口(如:8080)占用情况输入 :1netstat -aon|findstr \"8080\" 结束某个进程(如:1234)输入 :1tskill 1234 注:1234是进程的PID,使用上面的查看命令的时候会看到 Ubuntu下查找占用端口的进程：1sudo lsof -i:8080","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/categories/windows/"},{"name":"port","slug":"windows/port","permalink":"http://blog.loyom.com/categories/windows/port/"}],"tags":[{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"},{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/tags/windows/"},{"name":"port","slug":"port","permalink":"http://blog.loyom.com/tags/port/"}]},{"title":"Tomcat Server xml 配置","slug":"Tomcat-Server-xml-配置","date":"2018-12-11T10:02:13.000Z","updated":"2018-12-11T10:02:13.614Z","comments":true,"path":"2018/12/11/Tomcat-Server-xml-配置/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Tomcat-Server-xml-配置/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;Server port=\"8005\" shutdown=\"SHUTDOWN\"&gt; &lt;Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" /&gt; &lt;Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" /&gt; &lt;Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" /&gt; &lt;Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" /&gt; &lt;GlobalNamingResources&gt; &lt;Resource name=\"UserDatabase\" auth=\"Container\" type=\"org.apache.catalina.UserDatabase\" description=\"User database that can be updated and saved\" factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\" pathname=\"conf/tomcat-users.xml\" /&gt; &lt;/GlobalNamingResources&gt; &lt;Service name=\"Catalina\"&gt; &lt;Connector port=\"80\" protocol=\"HTTP/1.1\" connectionTimeout=\"30000\" acceptCount=\"500\" URIEncoding=\"utf-8\" minSpareThreads=\"20\" compression=\"on\" compressionMinSize=\"512\" compressableMimeType=\"text/html,text/xml,text/javascript,text/css,text/plain\" redirectPort=\"8443\" enableLookups=\"false\" /&gt; &lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" /&gt; &lt;Engine name=\"Catalina\" defaultHost=\"www.xxxx.com\"&gt; &lt;Realm className=\"org.apache.catalina.realm.LockOutRealm\"&gt; &lt;Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\" resourceName=\"UserDatabase\"/&gt; &lt;/Realm&gt; &lt;Host name=\"www.xxxx.com\" appBase=\"/data/www\" unpackWARs=\"false\" autoDeploy=\"true\"&gt; &lt;Context path=\"/\" docBase=\"\"/&gt; &lt;Alias&gt;xxxx.com&lt;/Alias&gt; &lt;/Host&gt; &lt;/Engine&gt; &lt;/Service&gt;&lt;/Server&gt;","categories":[{"name":"tomcat","slug":"tomcat","permalink":"http://blog.loyom.com/categories/tomcat/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"http://blog.loyom.com/tags/tomcat/"},{"name":"server.xml","slug":"server-xml","permalink":"http://blog.loyom.com/tags/server-xml/"}]},{"title":"SCP 命令详解","slug":"SCP-命令详解","date":"2018-12-11T10:01:40.000Z","updated":"2018-12-11T10:01:40.461Z","comments":true,"path":"2018/12/11/SCP-命令详解/","link":"","permalink":"http://blog.loyom.com/2018/12/11/SCP-命令详解/","excerpt":"","text":"scp [options] source target 命令使用参数: -a #尽可能将档案状态、权限等资料都照原状予以复制。 -r #若 source 中含有目录名，则将目录下之档案亦皆依序拷贝至目的地。 -f #若目的地已经有相同档名的档案存在，则在复制前先予以删除再行复制。 -v #用来显示进度,查看连接,认证,或是配置错误 -C #使能压缩选项 -P #选择端口 -4 #强行使用 IPV4 地址 -6 #强行使用 IPV6 地址 使用示例:1scp -r -P 22386 Game root@10.10.0.8:/home/root/","categories":[{"name":"scp","slug":"scp","permalink":"http://blog.loyom.com/categories/scp/"}],"tags":[{"name":"scp","slug":"scp","permalink":"http://blog.loyom.com/tags/scp/"}]},{"title":"修改Eclipse中中文的字体大小","slug":"修改Eclipse中中文的字体大小","date":"2018-12-11T10:00:59.000Z","updated":"2018-12-11T10:00:59.339Z","comments":true,"path":"2018/12/11/修改Eclipse中中文的字体大小/","link":"","permalink":"http://blog.loyom.com/2018/12/11/修改Eclipse中中文的字体大小/","excerpt":"","text":"首先进入到eclipse的安装目录下面: 然后找到/plugins/org.eclipse.jface_*.jar 使用rar打开这个Jar文件进入到目录:/org/eclipse/jface/resources 找到你当前系统所属的属性文件,如Win8系统的则是:jfacefonts_windows8.properties 然后使用文本编辑器打开并修改里面的字体大小(后面是字体的像素)12345678org.eclipse.jface.bannerfont.0=Segoe UI-bold-12org.eclipse.jface.bannerfont.1=Tahoma-bold-12 org.eclipse.jface.headerfont.0=Segoe UI-bold-14org.eclipse.jface.headerfont.1=Tahoma-bold-14 org.eclipse.jface.textfont.0=Consolas-regular-12org.eclipse.jface.textfont.1=Courier New-regular-12","categories":[{"name":"eclipse","slug":"eclipse","permalink":"http://blog.loyom.com/categories/eclipse/"}],"tags":[{"name":"eclipse","slug":"eclipse","permalink":"http://blog.loyom.com/tags/eclipse/"},{"name":"font-size","slug":"font-size","permalink":"http://blog.loyom.com/tags/font-size/"}]},{"title":"关掉Mysql外键检查","slug":"关掉Mysql外键检查","date":"2018-12-11T10:00:15.000Z","updated":"2018-12-11T10:00:15.774Z","comments":true,"path":"2018/12/11/关掉Mysql外键检查/","link":"","permalink":"http://blog.loyom.com/2018/12/11/关掉Mysql外键检查/","excerpt":"","text":"在Mysql中执行truncate的时候如果遇到下面错误的解决方式 cannot truncate a table referenced in a foreign key constraint… truncate table_name 的时候提示有外键关联执行失败使用下面的语句暂时关掉外键检查:1SET foreign_key_checks=0; 再使用清除,完成后再打开检查1SET foreign_key_checks=1; truncate table_name 的时候提示有外键关联执行失败使用下面的语句暂时关掉外键检查:1SET foreign_key_checks=0; 再使用清除,完成后再打开检查1SET foreign_key_checks=1;","categories":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/categories/mysql/"},{"name":"外键","slug":"mysql/外键","permalink":"http://blog.loyom.com/categories/mysql/外键/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://blog.loyom.com/tags/mysql/"},{"name":"外键","slug":"外键","permalink":"http://blog.loyom.com/tags/外键/"}]},{"title":"NetBean 启动 Tomcat 报错 '127.0.0.1' 不是内部或外部命令,也不是可运行","slug":"NetBean-启动-Tomcat-报错-127-0-0-1-不是内部或外部命令-也不是可运行","date":"2018-12-11T09:59:11.000Z","updated":"2018-12-11T09:59:11.374Z","comments":true,"path":"2018/12/11/NetBean-启动-Tomcat-报错-127-0-0-1-不是内部或外部命令-也不是可运行/","link":"","permalink":"http://blog.loyom.com/2018/12/11/NetBean-启动-Tomcat-报错-127-0-0-1-不是内部或外部命令-也不是可运行/","excerpt":"","text":"Tomcat 版本是 7.0.56 和8.0.14 的解决方法： 在Tomcat的安装目录下 找到 bin/catalina.bat 这个文件的 179行 和 184行 把：12345:noJuliConfigset \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_CONFIG%\":noJuliManagerset \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%\" 改为：12345:noJuliConfigset JAVA_OPTS=%JAVA_OPTS% %LOGGING_CONFIG%:noJuliManagerset JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER% 去掉引号，就可以启动了！","categories":[{"name":"netbeans","slug":"netbeans","permalink":"http://blog.loyom.com/categories/netbeans/"},{"name":"tomcat","slug":"netbeans/tomcat","permalink":"http://blog.loyom.com/categories/netbeans/tomcat/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"http://blog.loyom.com/tags/tomcat/"},{"name":"netbeans","slug":"netbeans","permalink":"http://blog.loyom.com/tags/netbeans/"},{"name":"catalina","slug":"catalina","permalink":"http://blog.loyom.com/tags/catalina/"}]},{"title":"修改 BlueStacks 分辨率","slug":"修改-BlueStacks-分辨率","date":"2018-12-11T09:58:03.000Z","updated":"2018-12-11T09:58:03.043Z","comments":true,"path":"2018/12/11/修改-BlueStacks-分辨率/","link":"","permalink":"http://blog.loyom.com/2018/12/11/修改-BlueStacks-分辨率/","excerpt":"","text":"安装好BlueStacks后一般来说分辨率都是和个人电脑的分辨率相关的看起来会很不好，没有用手机的感觉！ 所以我们有可能需要调整分辨率： 调整的步骤： Win+R 打开 Cmd 输入 Regedit 打开注册表 找到： 1HKEY_LOCAL_MACHINE\\SOFTWARE\\BlueStacks\\Guests\\Android\\FrameBuffer\\0 这个路径下关于Width和Hight的属性也许是 WindowHight和WindowWidth 修改里面的值就可以了.","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/categories/windows/"},{"name":"bluestacks","slug":"windows/bluestacks","permalink":"http://blog.loyom.com/categories/windows/bluestacks/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/tags/windows/"},{"name":"bluestacks","slug":"bluestacks","permalink":"http://blog.loyom.com/tags/bluestacks/"}]},{"title":"Java 录制语音的实现代码","slug":"Java-录制语音的实现代码","date":"2018-12-11T09:57:15.000Z","updated":"2018-12-11T09:57:15.516Z","comments":true,"path":"2018/12/11/Java-录制语音的实现代码/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Java-录制语音的实现代码/","excerpt":"","text":"SoundServer 音频录制类:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364public class SoundServer &#123; AudioRecord record; public void startRecordSound() &#123; try &#123; record = new AudioRecord(); record.start(); &#125; catch (Exception e) &#123; LogUtil.error(e); &#125; &#125; public byte[] stopRecordSound() &#123; if (record != null) &#123; record.endRecord(); return record.getBuf(); &#125; return null; &#125;&#125; class AudioRecord extends Thread &#123; AudioInputStream audioInputStream; TargetDataLine line; AudioFileFormat.Type targetType; ByteArrayOutputStream bos = new ByteArrayOutputStream(); byte[] buf; AudioRecord() throws Exception &#123; AudioFormat audioFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, 16000, 8, 1, 1, 16000, false); DataLine.Info info = new DataLine.Info(TargetDataLine.class, audioFormat); line = (TargetDataLine) AudioSystem.getLine(info); line.open(audioFormat); audioInputStream = new AudioInputStream(line); targetType = AudioFileFormat.Type.AU; &#125; @Override public void start() &#123; line.start(); super.start(); &#125; public void endRecord() &#123; line.stop(); line.close(); buf = bos.toByteArray(); &#125; public byte[] getBuf() &#123; return buf; &#125; @Override public void run() &#123; try &#123; AudioSystem.write(audioInputStream, targetType, bos); &#125; catch (IOException e) &#123; LogUtil.error(e); &#125; &#125;&#125; Launcher 测试主类:123456789101112131415161718public class Launcher &#123; public static void main(String[] args) throws Exception &#123; SoundServer ss = new SoundServer(); Scanner sc = new Scanner(System.in); System.out.println(\"请输入Start开始：\"); String input = sc.nextLine(); if (\"start\".equalsIgnoreCase(input)) &#123; ss.startRecordSound(); &#125; System.out.println(\"请输入End结束：\"); input = sc.nextLine(); if (\"end\".equalsIgnoreCase(input)) &#123; byte[] voice = ss.stopRecordSound(); LogUtil.info(voice); &#125; &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"录音","slug":"java/录音","permalink":"http://blog.loyom.com/categories/java/录音/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"audiorecord","slug":"audiorecord","permalink":"http://blog.loyom.com/tags/audiorecord/"},{"name":"录音","slug":"录音","permalink":"http://blog.loyom.com/tags/录音/"}]},{"title":"无法启动Windows Defender","slug":"无法启动Windows-Defender","date":"2018-12-11T09:56:20.000Z","updated":"2018-12-11T09:56:20.901Z","comments":true,"path":"2018/12/11/无法启动Windows-Defender/","link":"","permalink":"http://blog.loyom.com/2018/12/11/无法启动Windows-Defender/","excerpt":"","text":"进入windows的注册表并修改为如下数值:1HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\DisableAntiSpyware=0","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/categories/windows/"},{"name":"defender","slug":"windows/defender","permalink":"http://blog.loyom.com/categories/windows/defender/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/tags/windows/"},{"name":"defender","slug":"defender","permalink":"http://blog.loyom.com/tags/defender/"},{"name":"regedit","slug":"regedit","permalink":"http://blog.loyom.com/tags/regedit/"}]},{"title":"Centos 安装 Scala","slug":"Centos-安装-Scala","date":"2018-12-11T09:53:44.000Z","updated":"2018-12-11T09:53:44.795Z","comments":true,"path":"2018/12/11/Centos-安装-Scala/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos-安装-Scala/","excerpt":"","text":"12345678910111213141516## 下载: http://www.scala-lang.org/download/all.html## 下载地址: https://downloads.lightbend.com/scala/2.12.2/scala-2.12.2.rpm### 使用本地安装yum localinstall -y scala-2.12.2.rpm### 查看版本scala -version### 测试scala","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"scala","slug":"Centos/scala","permalink":"http://blog.loyom.com/categories/Centos/scala/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"scala","slug":"scala","permalink":"http://blog.loyom.com/tags/scala/"},{"name":"install","slug":"install","permalink":"http://blog.loyom.com/tags/install/"}]},{"title":"Centos安装Kafka","slug":"Centos安装Kafka","date":"2018-12-11T09:52:51.000Z","updated":"2018-12-11T09:52:51.182Z","comments":true,"path":"2018/12/11/Centos安装Kafka/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos安装Kafka/","excerpt":"","text":"1234567891011121314### 首先需要安装好 Scala 2.12### 下载页面: http://kafka.apache.org/downloads### 下载地址:https://www.apache.org/dyn/closer.cgi?path=/kafka/0.10.2.0/kafka_2.12-0.10.2.0.tgz### 解压出来tar -zxvf kafka_2.12-0.10.2.0.tgzcd kafka_2.12-0.10.2.0### 启动 (启动之前需要先启动好Zookeeper 并在 server.properties 配置好zookeeper的连接)bin/kafka-server-start.sh -daemon config/server.properties### 停止bin/kafka-server-stop.sh 配置文件 server.properties 说明:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687# 当前机器在集群中的唯一标识，和zookeeper的myid性质一样broker.id=0# Switch to enable topic deletion or not, default value is false#delete.topic.enable=true# 消息保存的最大值5Mmessage.max.byte=5242880# kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务default.replication.factor=2# 取消息的最大直接数replica.fetch.max.bytes=5242880############################# Socket Server Settings ############################## 当前kafka对外提供服务的端口默认是9092port=18082host.name=192.168.99.250# Hostname and port the broker will advertise to producers and consumers. If not set, # it uses the value for \"listeners\" if configured. Otherwise, it will use the value# returned from java.net.InetAddress.getCanonicalHostName().#advertised.listeners=PLAINTEXT://your.host.name:9092# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL# 这个是borker进行网络处理的线程数num.network.threads=3# 这个是borker进行I/O处理的线程数num.io.threads=8# 发送缓冲区buffer大小，数据不是一下子就发送的，先回存储到缓冲区了到达一定的大小后在发送，能提高性能socket.send.buffer.bytes=102400# kafka接收缓冲区大小，当数据到达一定大小后在序列化到磁盘socket.receive.buffer.bytes=102400# 这个参数是向kafka请求消息或者向kafka发送消息的请请求的最大数，这个值不能超过java的堆栈大小socket.request.max.bytes=104857600############################# Log Basics ############################## 消息存放的目录，这个目录可以配置为“，”逗号分割的表达式，上面的num.io.threads要大于这个目录的个数这个目录，如果配置多个目录，新创建的topic他把消息持久化的地方是，当前以逗号分割的目录中，那个分区数最少就放那一个log.dirs=/tmp/kafka-logs# 默认的分区数，一个topic默认1个分区数num.partitions=1# 每个数据目录用来日志恢复的线程数num.recovery.threads.per.data.dir=1############################# Log Flush Policy ############################## 是否启用log压缩，一般不用启用，启用的话可以提高性能log.cleaner.enable=false # 当消息数量到达10000时强制写入到磁盘 (一般不建议使用这个选项)#log.flush.interval.messages=10000# 强制写入磁盘的间隔时间 (一般不建议使用这个选项)#log.flush.interval.ms=1000############################# Log Retention Policy ############################## 默认消息的最大持久化时间，168小时，7天log.retention.hours=168# 这个参数是：因为kafka的消息是以追加的形式落地到文件，当超过这个值的时候，kafka会新起一个文件log.segment.bytes=1073741824# 每隔300000毫秒去检查上面配置的log失效时间（log.retention.hours=168 ），到目录查看是否有过期的消息如果有，删除log.retention.check.interval.ms=300000############################# Zookeeper ############################## zookeeper的连接配置zookeeper.connect=192.168.101.251:2181,192.168.10.252:2181,192.168.10.253:2181,192.168.10.254:2181# 访问zookeeper的超时时间zookeeper.connection.timeout.ms=6000","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"kafka","slug":"Centos/kafka","permalink":"http://blog.loyom.com/categories/Centos/kafka/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"kafka","slug":"kafka","permalink":"http://blog.loyom.com/tags/kafka/"}]},{"title":"Centos7 重新分配数据盘","slug":"Centos7-重新分配数据盘","date":"2018-12-11T09:51:47.000Z","updated":"2018-12-11T09:51:47.289Z","comments":true,"path":"2018/12/11/Centos7-重新分配数据盘/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos7-重新分配数据盘/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344## 假设有一块 500G的空间分配给了/home 现在需要重新进行分配 /home 100G 和 /opt 400G==注意备份数据==## 卸载/home, 如果无法卸载请先终止使用/home的进程umount /home## 删除/home所在的lvlvremove /dev/mapper/cl-home## 新创建一个容量为100G的/home lvlvcreate -L 100G -n home cl## 创建文件系统mkfs.xfs /dev/cl/home## 挂载此lv到/home目录mount /dev/cl/home /home ## 新创建一个容量为400G的/opt lvlvcreate -L 400G -n opt cl## 创建文件系统mkfs.xfs /dev/cl/opt## 挂载此lv到/optmount /dev/cl/opt /opt ## 编辑系统磁盘vi /ect/fstab## 添加两行配置/dev/mapper/cl-home /home xfs defaults 0 0/dev/mapper/cl-opt /opt xfs defaults 0 0## 验证配置是否正确mount -a## 重新进行一次 mountmount -n -o remount,rw /## 重启服务器init 6","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"mount","slug":"Centos/mount","permalink":"http://blog.loyom.com/categories/Centos/mount/"}],"tags":[{"name":"centos","slug":"centos","permalink":"http://blog.loyom.com/tags/centos/"},{"name":"disk","slug":"disk","permalink":"http://blog.loyom.com/tags/disk/"},{"name":"mount","slug":"mount","permalink":"http://blog.loyom.com/tags/mount/"}]},{"title":"设置证书登录Centos7","slug":"设置证书登录Centos7","date":"2018-12-11T09:50:58.000Z","updated":"2018-12-11T09:50:58.329Z","comments":true,"path":"2018/12/11/设置证书登录Centos7/","link":"","permalink":"http://blog.loyom.com/2018/12/11/设置证书登录Centos7/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061## 修改系统检查项getenforcesetenforce 0## 使用 ssh-keygen 生成证书 私钥 (id_rsa) 与公钥 (id_rsa.pub)ssh-keygen -t rsa## 如果没有则创建此目录mkdir ~/.ssh## 如果没有则创建此文件touch ~/.ssh/authorized_keys## 将公钥写入授权文件cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keyscat id_rsa_home_t1.pub &gt;&gt; ~/.ssh/authorized_keys## 添加9010的端口firewall-cmd --zone=public --add-port=9010/tcp --permanentfirewall-cmd --zone=public --add-port=9010/udp --permanent## 删除22端口firewall-cmd --zone=public --remove-port=22/tcp --permanentfirewall-cmd --zone=public --remove-port=22/udp --permanent## 查看已经开放的端口firewall-cmd --list-ports## 重启防火墙firewall-cmd --reloadfirewall-cmd --complete-reload## 编辑SSH配置文件vi /etc/ssh/sshd_config## 修改默认端口,非必要Port 9010## 禁用root账户登录，非必要PermitRootLogin no## 禁用密码登录PasswordAuthentication no## 是否让 sshd 去检查用户家目录或相关档案的权限数据StrictModes no# 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。# 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内RSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile %h/.ssh/authorized_keys## 重启ssh服务systemctl stop firewalldsystemctl restart sshdsystemctl start firewalld","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"ssh","slug":"Centos/ssh","permalink":"http://blog.loyom.com/categories/Centos/ssh/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"firewall-cmd","slug":"firewall-cmd","permalink":"http://blog.loyom.com/tags/firewall-cmd/"},{"name":"ssh-keygen","slug":"ssh-keygen","permalink":"http://blog.loyom.com/tags/ssh-keygen/"}]},{"title":"关于Windows关闭相关端口的操作","slug":"关于Windows关闭相关端口的操作","date":"2018-12-11T09:50:15.000Z","updated":"2018-12-11T09:50:15.105Z","comments":true,"path":"2018/12/11/关于Windows关闭相关端口的操作/","link":"","permalink":"http://blog.loyom.com/2018/12/11/关于Windows关闭相关端口的操作/","excerpt":"","text":"针对目前爆发的比特币勒索病毒传播端口的处理, 禁用本机上的 相关端口 以阻止 电脑感染 (PS. 以后相关禁用端口的操作此步骤也可用 ) 首先找到 控制面板 在控制面板中找到 Windows 防火墙 并点开 在防火墙中 选择高级设置 在高级设置中选择 入站规则 选择好 入站规则 后 在右侧选择 新建规则 在新建规则中选择 端口 并 下一步 此处先选择 TCP(UDP) 输入需要禁用的端口 445,137,138,139 并进行 下一步 (注意 完成设置后需要重复 设置 UDP 的相同禁用端口 ) 选择 阻止连接 并 下一步 勾选所有的选项 然后下一步 为此规则起个名字 然后 点击 完成 至此 阻止 TCP 协议上的 445相关端口 就已经可以了 需要重复 新建规则 建立 阻止 UDP 协议上的 相关端口,操作步骤相同… 图文参考: https://my.oschina.net/Kxvz/blog/901607","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/categories/windows/"},{"name":"firewall","slug":"windows/firewall","permalink":"http://blog.loyom.com/categories/windows/firewall/"},{"name":"port","slug":"windows/firewall/port","permalink":"http://blog.loyom.com/categories/windows/firewall/port/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/tags/windows/"},{"name":"port","slug":"port","permalink":"http://blog.loyom.com/tags/port/"},{"name":"firewall","slug":"firewall","permalink":"http://blog.loyom.com/tags/firewall/"}]},{"title":"使用SpringBoot和Dubbo开发分布式系统","slug":"使用SpringBoot和Dubbo开发分布式系统","date":"2018-12-11T09:48:39.000Z","updated":"2018-12-11T09:48:39.879Z","comments":true,"path":"2018/12/11/使用SpringBoot和Dubbo开发分布式系统/","link":"","permalink":"http://blog.loyom.com/2018/12/11/使用SpringBoot和Dubbo开发分布式系统/","excerpt":"","text":"首先我们先建立一个文件夹 demo 作为项目的存放目录 其次我们建立三个maven的jar项目 分别为 demo-lib, demo-db, demo-web ![image][https://static.oschina.net/uploads/space/2017/0517/100633_8H1J_2370543.png] ![image][https://static.oschina.net/uploads/space/2017/0517/100649_YQLE_2370543.png] ![image][https://static.oschina.net/uploads/space/2017/0517/100709_UJyB_2370543.png] lib 用于 提供web和db互通的数据接口和接口 web 用于 提供网站访问 db 用于提供数据支持 我们为了便于管理 使用 maven 的 parent 配置, 在demo 文件夹中 建立一个 pom.xml 文件 并写入以下内容:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.demo&lt;/groupId&gt; &lt;artifactId&gt;demo-parent&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;name&gt;$&#123;project.artifactId&#125;&lt;/name&gt; &lt;description&gt;The parent project of demo&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.3.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;/parent&gt; &lt;modules&gt; &lt;module&gt;demo-lib&lt;/module&gt; &lt;module&gt;demo-db&lt;/module&gt; &lt;module&gt;demo-web&lt;/module&gt; &lt;/modules&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;2.5.4-SNAPSHOT&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring&lt;/artifactId&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.guava&lt;/groupId&gt; &lt;artifactId&gt;guava&lt;/artifactId&gt; &lt;version&gt;21.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.3.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.thoughtworks.xstream&lt;/groupId&gt; &lt;artifactId&gt;xstream&lt;/artifactId&gt; &lt;version&gt;1.4.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.24&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;configuration&gt; &lt;compilerArgument&gt;-parameters&lt;/compilerArgument&gt; &lt;source&gt;$&#123;maven.compiler.source&#125;&lt;/source&gt; &lt;target&gt;$&#123;maven.compiler.target&#125;&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;name&gt;Spring Milestones&lt;/name&gt; &lt;url&gt;https://repo.spring.io/libs-milestone&lt;/url&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt;&lt;/project&gt; 其次 demo-lib , demo-db , demo-web 分别配置 pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;!-- demo-lib 的 pom.xml 配置 --&gt;&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;com.demo&lt;/groupId&gt; &lt;artifactId&gt;demo-parent&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;demo-lib&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt;&lt;/project&gt;&lt;!-- demo-db 的 pom.xml 配置 --&gt;&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;com.demo&lt;/groupId&gt; &lt;artifactId&gt;demo-parent&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;demo-db&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.demo&lt;/groupId&gt; &lt;artifactId&gt;demo-lib&lt;/artifactId&gt; &lt;version&gt;$&#123;project.parent.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;&lt;!-- demo-web 的 pom.xml 配置 --&gt;&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;com.demo&lt;/groupId&gt; &lt;artifactId&gt;demo-parent&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;demo-web&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.demo&lt;/groupId&gt; &lt;artifactId&gt;demo-lib&lt;/artifactId&gt; &lt;version&gt;$&#123;project.parent.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;demo-web&lt;/finalName&gt; &lt;defaultGoal&gt;compile&lt;/defaultGoal&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 配置好了pom.xml文件后 项目结构就出来了 现在,我们在 Lib 中建立一个 Data 名为 Test (注意:结构需要可序列化 Serializable) 再建立一个 接口 为 TestService 在db模块中实现TestServiceImpl 在web中使用TestService db模块中实现后需要注册到zookeeper中 需要设置 提供方的配置文件:1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt; &lt;!-- 提供方应用信息，用于计算依赖关系 --&gt; &lt;dubbo:application name=\"provider-of-demo\" /&gt; &lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt; &lt;dubbo:registry address=\"zookeeper://192.168.80.251:2181?backup=192.168.80.252:2181,192.168.80.253:2181,192.168.80.254:2181\" /&gt; &lt;!-- 用dubbo协议在20880端口暴露服务,同一个机子上启动多个需要配置不同的 port --&gt; &lt;dubbo:protocol name=\"dubbo\" port=\"20881\" /&gt; &lt;!-- 和本地bean一样实现服务 --&gt; &lt;bean id=\"testService\" class=\"com.demo.db.service.TestServiceImpl\" /&gt; &lt;!-- 声明需要暴露的服务接口 --&gt; &lt;dubbo:service interface=\"com.demo.lib.service.TestService\" ref=\"testService\" /&gt;&lt;/beans&gt; web模块使用需要 设置 使用方的 配置文件:123456789101112&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt; &lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt; &lt;dubbo:application name=\"web-of-demo\" /&gt; &lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt; &lt;dubbo:registry address=\"zookeeper://192.168.80.253:2181?backup=192.168.80.252:2181,192.168.80.251:2181,192.168.80.254:2181\" /&gt; &lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt; &lt;dubbo:reference id=\"TestService\" interface=\"com.demo.lib.service.TestService\" /&gt;&lt;/beans&gt; 完成后使用SpringBoot的启动方式启动: db模块的启动方式:1234567891011121314151617@SpringBootApplication@ImportResource(\"classpath:provider.xml\")public class Launcher &#123; public static void main(String[] args) &#123; SpringApplication.run(Launcher.class, args); Thread t = new Thread(() -&gt; &#123; while (true) &#123; try &#123; Thread.sleep(Long.MAX_VALUE); &#125; catch (Exception e) &#123; &#125; &#125; &#125;); t.start(); &#125;&#125; web模块的启动方式:12345678@SpringBootApplication@ImportResource(\"classpath:consumer.xml\")public class Launcher &#123; public static void main(String[] args) &#123; SpringApplication.run(Launcher.class, args); &#125;&#125; 启动完成后的测试效果: ![image][https://static.oschina.net/uploads/space/2017/0517/102613_Da10_2370543.png] ![image][https://static.oschina.net/uploads/space/2017/0517/102627_sO9N_2370543.png] ![image][https://static.oschina.net/uploads/space/2017/0517/102638_0BKb_2370543.png] ![image][https://static.oschina.net/uploads/space/2017/0517/102650_hUBA_2370543.png] 大家可以动手实验一下,本次使用的是zookeeper做注册发现服务,安装方式请参阅之前的blog内容 地址: https://my.oschina.net/Kxvz/blog/718483 此Demo源码地址: https://github.com/KevinAtlans/SpringDemo/tree/master/SpringDubbo/Demo","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"Spring","slug":"java/Spring","permalink":"http://blog.loyom.com/categories/java/Spring/"},{"name":"dubbo","slug":"java/Spring/dubbo","permalink":"http://blog.loyom.com/categories/java/Spring/dubbo/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"spring-boot","slug":"spring-boot","permalink":"http://blog.loyom.com/tags/spring-boot/"},{"name":"dubbo","slug":"dubbo","permalink":"http://blog.loyom.com/tags/dubbo/"},{"name":"分布式","slug":"分布式","permalink":"http://blog.loyom.com/tags/分布式/"}]},{"title":"使用Redis-cli操作Redis","slug":"使用Redis-cli操作Redis","date":"2018-12-11T09:44:18.000Z","updated":"2018-12-11T09:44:18.475Z","comments":true,"path":"2018/12/11/使用Redis-cli操作Redis/","link":"","permalink":"http://blog.loyom.com/2018/12/11/使用Redis-cli操作Redis/","excerpt":"","text":"12345678910111213## 使用端口和密码登录redis-cli -p 6379 -a test123## 先使用端口进入 然后在授权密码redis-cli -p 6379127.0.0.1:6379&gt; auth test123## 清空所有缓存127.0.0.1:6379&gt; flushall## 查询所有存在缓存数据127.0.0.1:6379&gt; keys '*'","categories":[{"name":"redis","slug":"redis","permalink":"http://blog.loyom.com/categories/redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://blog.loyom.com/tags/redis/"},{"name":"redis-cli","slug":"redis-cli","permalink":"http://blog.loyom.com/tags/redis-cli/"}]},{"title":"Java向RocketMQ中发送数据","slug":"Java向RocketMQ中发送数据","date":"2018-12-11T09:43:44.000Z","updated":"2018-12-11T09:43:44.796Z","comments":true,"path":"2018/12/11/Java向RocketMQ中发送数据/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Java向RocketMQ中发送数据/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940public class RocketProducer &#123; private DefaultMQProducer producer; public RocketProducer() &#123; this.init(); &#125; private void init() &#123; if (producer == null) &#123; try &#123; producer = new DefaultMQProducer(\"DataRecord\"); producer.setNamesrvAddr(\"192.168.1.11:9876\"); producer.start(); &#125; catch (Exception ex) &#123; LogUtil.error(ex); this.destory(); producer = null; &#125; &#125; &#125; public boolean send(String group, String queue, byte[] message) &#123; try &#123; this.init(); Message msg = new Message(group, queue, message); SendResult result = producer.send(msg); return (SendStatus.SEND_OK.equals(result.getSendStatus())); &#125; catch (Exception ex) &#123; LogUtil.error(ex); &#125; return false; &#125; public void destory() &#123; if (this.producer != null) &#123; this.producer.shutdown(); &#125; &#125;&#125; 文档地址: https://rocketmq.incubator.apache.org/docs/best-practice-producer/","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"rocketmq","slug":"java/rocketmq","permalink":"http://blog.loyom.com/categories/java/rocketmq/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"rocketmq","slug":"rocketmq","permalink":"http://blog.loyom.com/tags/rocketmq/"},{"name":"producer","slug":"producer","permalink":"http://blog.loyom.com/tags/producer/"}]},{"title":"在Centos7上搭建Ngrok服务","slug":"在Centos7上搭建Ngrok服务","date":"2018-12-11T09:42:59.000Z","updated":"2018-12-11T09:42:59.246Z","comments":true,"path":"2018/12/11/在Centos7上搭建Ngrok服务/","link":"","permalink":"http://blog.loyom.com/2018/12/11/在Centos7上搭建Ngrok服务/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778### 首先先装好一些编译需要使用的工具yum -y install zlib-devel openssl-devel perl hg cpio expat-devel gettext-devel curl curl-devel perl-ExtUtils-MakeMaker hg wget gcc gcc-c++### 安装好Git 最好是1.8+yum install -y git### 安装 Go 一定注意要找 1.4.3版本的 下载地址:https://golang.org/dl/ wget https://storage.googleapis.com/golang/go1.4.3.linux-amd64.tar.gztar -C /usr/local -xzf go1.4.3.linux-amd64.tar.gz### 添加Go的环境变量 首先打开 profile 在最后加上 export PATH=$PATH:/usr/local/go/binvi /etc/profileexport PATH=$PATH:/usr/local/go/bingo version### 下载 ngrok 源码cd /usr/local/git clone https://github.com/inconshreveable/ngrok.gitexport GOPATH=/usr/local/ngrok/export NGROK_DOMAIN=\"[此处填写你的域名:如: baidu.com]\"cd ngrok### 生成SSL证书 用于 Ngrok 服务端和客户端通信认证使用openssl genrsa -out rootCA.key 2048openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pemopenssl genrsa -out server.key 2048openssl req -new -key server.key -subj \"/CN=$NGROK_DOMAIN\" -out server.csropenssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000### 复制证书到 tls下\\cp -r rootCA.pem assets/client/tls/ngrokroot.crt\\cp -r server.crt assets/server/tls/snakeoil.crt\\cp -r server.key assets/server/tls/snakeoil.key### 国内的网络环境需要改一点代码vi /usr/local/ngrok/src/ngrok/log/logger.golog \"github.com/keepeye/log4go\"### 编译Server端 注意替换 GOOS 和 GOARCH , 具体的值可以通过命令 go env 查看cd /usr/local/go/srcGOOS=linux GOARCH=amd64 ./make.bashcd /usr/local/ngrok/GOOS=linux GOARCH=amd64 make release-server### 编译客户端cd /usr/local/go/srcGOOS=linux GOARCH=amd64 ./make.bashcd /usr/local/ngrok/GOOS=linux GOARCH=amd64 make release-client### 服务端启动/usr/local/ngrok/bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":80\"### 客户端配置文件server_addr: \"ngrok.sunnyos.com:4443\"trust_host_root_certs: false### 启动客户端./ngrok -config=./ngrok.cfg -subdomain=blog 80setsid ./ngrok -config=./ngrok.cfg -subdomain=test 80 #在linux下如果想后台运行","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"ngrok","slug":"Centos/ngrok","permalink":"http://blog.loyom.com/categories/Centos/ngrok/"},{"name":"nat","slug":"Centos/ngrok/nat","permalink":"http://blog.loyom.com/categories/Centos/ngrok/nat/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"nat","slug":"nat","permalink":"http://blog.loyom.com/tags/nat/"},{"name":"ngrok","slug":"ngrok","permalink":"http://blog.loyom.com/tags/ngrok/"}]},{"title":"Centos7中超简单的Docker入门","slug":"Centos7中超简单的Docker入门","date":"2018-12-11T09:42:13.000Z","updated":"2018-12-11T09:42:13.326Z","comments":true,"path":"2018/12/11/Centos7中超简单的Docker入门/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos7中超简单的Docker入门/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253### 使用yum安装dockeryum install docker-io -y### 直接yum安装，安装成功后查看版本docker -v### 启动dockerservice docker start### 设置开机启动chkconfig docker on### 使用腾讯国内镜像源echo \"OPTIONS='--registry-mirror=https://mirror.ccs.tencentyun.com'\" &gt;&gt; /etc/sysconfig/docker### 重新载入 systemdsystemctl daemon-reload### 重新启动dockerservice docker restart### 在Docker中下载一个官方的 CentOS 镜像到本地docker pull centos### 查看镜像列表docker images### 运行一个 Centos镜像为模板生成的容器 并使用 bash shelldocker run -it centos /bin/bash### 在容器中操作不会影响到宿主机mkdir -p /data/simple_docker### 查看创建出的目录ls /data###退出容器exit### 在宿主机中查看目录 确认没有影响ls /data### 查看所有的容器信息docker ps -a### 保存镜像 需要使用到容器信息中的 CONTAINER_ID 和 IMAGEdocker commit -m=\"备注\" CONTAINER_ID IMAGE##$ 如:docker commit -m=\"备注\" 5b2ed8fbc835 centos","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"docker","slug":"Centos/docker","permalink":"http://blog.loyom.com/categories/Centos/docker/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"docker","slug":"docker","permalink":"http://blog.loyom.com/tags/docker/"}]},{"title":"EXSi 添加硬盘出错","slug":"EXSi-添加硬盘出错","date":"2018-12-11T09:41:37.000Z","updated":"2018-12-11T09:41:37.295Z","comments":true,"path":"2018/12/11/EXSi-添加硬盘出错/","link":"","permalink":"http://blog.loyom.com/2018/12/11/EXSi-添加硬盘出错/","excerpt":"","text":"EXSi 添加硬盘出错 首先在VMware vSphere Client中找到 配置 然后再配置中启用SSH 安全配置文件 -&gt; 服务 -&gt; 属性 -&gt; SSH -&gt; 选项 -&gt; 启动 -&gt; 确定 ![image][https://static.oschina.net/uploads/space/2017/0607/165448_Acxz_2370543.png] 开启SSH后使用SSH工具登录到EXSi服务器上 并使用以下命令进行硬盘格式化123456789101112131415### 查看硬盘fdisk -l### 查看需要格式化的硬盘详情 此处硬盘为: naa.5000c507c14 fdisk /dev/disks/naa.5000c507c14 ### 删除硬盘上的分区partedUtil delete /dev/disks/naa.5000c507c14 1partedUtil delete /dev/disks/naa.5000c507c14 2partedUtil delete /dev/disks/naa.5000c507c14 3partedUtil delete /dev/disks/naa.5000c507c14 4partedUtil delete /dev/disks/naa.5000c507c14 5### 重新建立标签partedUtil mklabel /dev/disks/naa.5000c507c14 msdos 完成之后 再去 存储中 添加存储器 就可以了","categories":[{"name":"exsi","slug":"exsi","permalink":"http://blog.loyom.com/categories/exsi/"},{"name":"ssh","slug":"exsi/ssh","permalink":"http://blog.loyom.com/categories/exsi/ssh/"},{"name":"disk","slug":"exsi/ssh/disk","permalink":"http://blog.loyom.com/categories/exsi/ssh/disk/"}],"tags":[{"name":"disk","slug":"disk","permalink":"http://blog.loyom.com/tags/disk/"},{"name":"exsi","slug":"exsi","permalink":"http://blog.loyom.com/tags/exsi/"},{"name":"ssh","slug":"ssh","permalink":"http://blog.loyom.com/tags/ssh/"},{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"}]},{"title":"Maven工程自动打包脚本","slug":"Maven工程自动打包脚本","date":"2018-12-11T09:39:29.000Z","updated":"2018-12-11T09:39:29.977Z","comments":true,"path":"2018/12/11/Maven工程自动打包脚本/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Maven工程自动打包脚本/","excerpt":"","text":"Maven工程自动打包脚本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758@echo offtitle Automatic Packaging Applicationecho ==-Build this application start-================================:: 设置一个共享地址的拷贝目录,需要映射成磁盘set OTHERDESKTOP=Z:\\Kxvz\\PRO-PKG:: 设置本地的存储目录set DESKTOP=D:\\PRO-PKG:: 设置代码的根路径set SOURCE=D:\\Program Files\\CODE\\PRO\\branches\\dev-branch:: 设置SVN工具目录set SVN=G:\\Program Files\\TortoiseSVN\\bin:: 获取当前时间,2017-08-10set d=%date:~0,10%:: 删除已存在的日期文件目录并重建rd /s /q \"%DESKTOP%\\%d%\"mkdir \"%DESKTOP%\\%d%\"rd /s /q \"%OTHERDESKTOP%\\%d%\"mkdir \"%OTHERDESKTOP%\\%d%\":: 进入源码盘并进入目录D:cd \"%SOURCE%\\PRO-BUILD\":: 执行SVN的更新\"%SVN%\\TortoiseProc.exe\" /command:update /path:\"%SOURCE%\" /closeonend:2for /f \"tokens=2\" %%i in ('svn info ^| find \"Revision\"') do ( set SvnVersion=%%i):: 打包call mvn clean install -U -Dmaven.test.skip=true:: 复制已经打包好的工程和相关文件到指定的文件夹copy \"%SOURCE%\\PRO\\target\\PRO-EAR-1.0.ear\" \"%DESKTOP%\\%d%\\PRO-SVN%SvnVersion%.ear\" /ycopy \"%SOURCE%\\SystemLibrary\\docs\\db.table.sql\" \"%DESKTOP%\\%d%\\table.sql\" /ycopy \"%SOURCE%\\SystemLibrary\\docs\\db.initdata.sql\" \"%DESKTOP%\\%d%\\initdata.sql\" /ycopy \"%SOURCE%\\SystemLibrary\\docs\\db.update.sql\" \"%DESKTOP%\\%d%\\update.sql\" /ycopy \"%SOURCE%\\SystemLibrary\\docs\\update.txt\" \"%DESKTOP%\\%d%\\desc.txt\" /yecho ==-Copy the file to Remote Files-==================================copy \"%DESKTOP%\\%d%\\PRO-SVN%SvnVersion%.ear\" \"%OTHERDESKTOP%\\%d%\\PRO-SVN%SvnVersion%.ear\" /ycopy \"%DESKTOP%\\%d%\\table.sql\" \"%OTHERDESKTOP%\\%d%\\table.sql\" /ycopy \"%DESKTOP%\\%d%\\initdata.sql\" \"%OTHERDESKTOP%\\%d%\\initdata.sql\" /ycopy \"%DESKTOP%\\%d%\\update.sql\" \"%OTHERDESKTOP%\\%d%\\update.sql\" /ycopy \"%DESKTOP%\\%d%\\desc.txt\" \"%OTHERDESKTOP%\\%d%\\desc.txt\" /yecho ==-Build this application end-==================================echo ==-File Directory-==================================echo All files into \"%DESKTOP%\\%d%\"echo ==-File Directory-==================================pause","categories":[{"name":"maven","slug":"maven","permalink":"http://blog.loyom.com/categories/maven/"},{"name":"java","slug":"maven/java","permalink":"http://blog.loyom.com/categories/maven/java/"},{"name":"install","slug":"maven/java/install","permalink":"http://blog.loyom.com/categories/maven/java/install/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"maven","slug":"maven","permalink":"http://blog.loyom.com/tags/maven/"},{"name":"pip install","slug":"pip-install","permalink":"http://blog.loyom.com/tags/pip-install/"}]},{"title":"Maven的settings.xml","slug":"Maven的settings-xml","date":"2018-12-11T09:38:09.000Z","updated":"2018-12-11T09:38:09.964Z","comments":true,"path":"2018/12/11/Maven的settings-xml/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Maven的settings-xml/","excerpt":"","text":"Maven的settings.xml备份 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt; &lt;localRepository&gt;D:\\Program\\apache-maven-3.5.4\\repo&lt;/localRepository&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;mirror&lt;/id&gt; &lt;mirrorOf&gt;!rdc-releases,!rdc-snapshots&lt;/mirrorOf&gt; &lt;name&gt;mirror&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;servers&gt; &lt;server&gt; &lt;id&gt;rdc-releases&lt;/id&gt; &lt;username&gt;Kxvz123&lt;/username&gt; &lt;password&gt;KxvzPassI123&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;rdc-snapshots&lt;/id&gt; &lt;username&gt;Kxvz123&lt;/username&gt; &lt;password&gt;KxvzPassI123&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;nexus&lt;/activeProfile&gt; &lt;/activeProfiles&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;central&lt;/id&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;rdc-releases&lt;/id&gt; &lt;url&gt;https://repo.rdc.aliyun.com/repository/39362-release-d3Q3LM/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;rdc-snapshots&lt;/id&gt; &lt;url&gt;https://repo.rdc.aliyun.com/repository/39362-snapshot-fSoazt/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;central&lt;/id&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;rdc-releases&lt;/id&gt; &lt;url&gt;https://repo.rdc.aliyun.com/repository/39362-release-d3Q3LM/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;rdc-snapshots&lt;/id&gt; &lt;url&gt;https://repo.rdc.aliyun.com/repository/39362-snapshot-fSoazt/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/profile&gt; &lt;profile&gt; &lt;id&gt;jdk-1.8&lt;/id&gt; &lt;activation&gt; &lt;jdk&gt;jdk-1.8&lt;/jdk&gt; &lt;/activation&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;aliyun&lt;/id&gt; &lt;name&gt;ali nexus&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Central&lt;/id&gt; &lt;name&gt;Centrale&lt;/name&gt; &lt;url&gt;http://central.maven.org/maven2/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Sonatype Releases&lt;/id&gt; &lt;name&gt;Sonatype Releases&lt;/name&gt; &lt;url&gt;https://oss.sonatype.org/content/repositories/releases/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Spring Plugins&lt;/id&gt; &lt;name&gt;Spring Plugins&lt;/name&gt; &lt;url&gt;http://repo.spring.io/plugins-release/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Spring Libs&lt;/id&gt; &lt;name&gt;Spring Libs&lt;/name&gt; &lt;url&gt;http://repo.spring.io/libs-milestone/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Atlassian&lt;/id&gt; &lt;name&gt;Atlassian&lt;/name&gt; &lt;url&gt;https://maven.atlassian.com/content/repositories/atlassian-public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;JBoss Releases&lt;/id&gt; &lt;name&gt;JBoss Releases&lt;/name&gt; &lt;url&gt;https://repository.jboss.org/nexus/content/repositories/releases/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Nuxeo Releases&lt;/id&gt; &lt;name&gt;Nuxeo Releases&lt;/name&gt; &lt;url&gt;https://maven-eu.nuxeo.org/nexus/content/repositories/public-releases/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;XWiki Releases&lt;/id&gt; &lt;name&gt;XWiki Releases&lt;/name&gt; &lt;url&gt;http://maven.xwiki.org/releases/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Apache Releases&lt;/id&gt; &lt;name&gt;Apache Releases&lt;/name&gt; &lt;url&gt;https://repository.apache.org/content/repositories/releases/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Clojars&lt;/id&gt; &lt;name&gt;Clojars&gt;&lt;/name&gt; &lt;url&gt;http://clojars.org/repo/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Hortonworks&lt;/id&gt; &lt;name&gt;Hortonworks&lt;/name&gt; &lt;url&gt;http://repo.hortonworks.com/content/repositories/releases/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Cloudera&lt;/id&gt; &lt;name&gt;Cloudera&lt;/name&gt; &lt;url&gt;https://repository.cloudera.com/content/repositories/releases/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;WSO2&lt;/id&gt; &lt;name&gt;WSO2&lt;/name&gt; &lt;url&gt;http://dist.wso2.org/maven2/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Java.net Releases&lt;/id&gt; &lt;name&gt;Java.net Releases&lt;/name&gt; &lt;url&gt;https://maven.java.net/content/repositories/releases/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Alfresco Public&lt;/id&gt; &lt;name&gt;Alfresco Public&lt;/name&gt; &lt;url&gt;https://artifacts.alfresco.com/nexus/content/repositories/public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Boundless&lt;/id&gt; &lt;name&gt;Boundless&lt;/name&gt; &lt;url&gt;http://repo.boundlessgeo.com/main/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;OpenNMS&lt;/id&gt; &lt;name&gt;OpenNMSe&gt;&lt;/name&gt; &lt;url&gt;http://repo.opennms.org/maven2/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;Redhat GA&lt;/id&gt; &lt;name&gt;Redhat GA&lt;/name&gt; &lt;url&gt;https://maven.repository.redhat.com/ga/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;JBoss 3rd-party&lt;/id&gt; &lt;name&gt;JBoss 3rd-party&lt;/name&gt; &lt;url&gt;https://repository.jboss.org/nexus/content/repositories/ea/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;NetBeans&lt;/id&gt; &lt;name&gt;NetBeans&lt;/name&gt; &lt;url&gt;http://bits.netbeans.org/maven2/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; &lt;/profiles&gt;&lt;/settings&gt;","categories":[{"name":"maven","slug":"maven","permalink":"http://blog.loyom.com/categories/maven/"},{"name":"setting","slug":"maven/setting","permalink":"http://blog.loyom.com/categories/maven/setting/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://blog.loyom.com/tags/maven/"},{"name":"setting","slug":"setting","permalink":"http://blog.loyom.com/tags/setting/"}]},{"title":"Centos7上安装启动 tars","slug":"Centos7上安装启动-tars","date":"2018-12-11T09:35:41.000Z","updated":"2018-12-11T09:36:27.916Z","comments":true,"path":"2018/12/11/Centos7上安装启动-tars/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Centos7上安装启动-tars/","excerpt":"","text":"Centos7上安装启动 tars先在Centos的虚拟机上操作: 首先安装 JDK 和 Mysql 可以参照之前的文章: https://my.oschina.net/Kxvz/blog/420244 SQL脚本地址: https://github.com/Tencent/Tars/tree/master/cpp/framework/sql 安装好了之后进入数据库建库: 1234567## 这里我的数据库帐号密码是: root 123456## mysql -u root -p123456create database db_tars;create database tars_stat;create database tars_property; 建好库之后就导入db_tars.sql到db_tars库中 (可以参照:https://my.oschina.net/Kxvz/blog/417358) 数据库方面弄完之后可以开始安装 resin1234## 下载wget http://www.caucho.com/download/resin-4.0.49.tar.gz## 解压出来tar zxvf resin-4.0.49.tar.gz 解压好 resin 后就可以去打包tars了. 在开发机上操作: 首先进入 Tars\\web 目录 修改:src\\main\\resources 下的 app.config.properties 和 tars.conf app.config.properties12345tarsweb.datasource.tars.addr=127.0.0.1:3306tarsweb.datasource.tars.user=roottarsweb.datasource.tars.pswd=123456upload.tgz.path=\\opt\\app\\ tars.conf12345678910111213141516171819&lt;tars&gt; &lt;application&gt; #proxy需要的配置 &lt;client&gt; #地址 locator = tars.tarsregistry.QueryObj@tcp -h 127.0.0.1 -p 17890 sync-invoke-timeout = 20000 #最大超时时间(毫秒) max-invoke-timeout = 60000 #刷新端口时间间隔(毫秒) refresh-endpoint-interval = 300000 #模块间调用[可选] stat = tars.tarsstat.StatObj #网络异步回调线程个数 asyncthread = 3 modulename = tars.system &lt;/client&gt; &lt;/application&gt;&lt;/tars&gt; 完了之后用maven打包: 在Tars\\web目录下使用 cmd 输入: mvn clean install 打包好了以后可以在Tars\\web\\target 下得到一个 tars.war 然后把 tars.war 上传到 Centos的虚拟机上 并复制到 resin-4.0.49\\webapps 目录下 然后进入 resin-4.0.49\\conf 目录中 修改 resin.xml 文件 把:123&lt;host id=\"\" root-directory=\".\"&gt; &lt;web-app id=\"/\" root-directory=\"webapps/ROOT\"/&gt;&lt;/host&gt; 改为:123&lt;host id=\"\" root-directory=\".\"&gt; &lt;web-app id=\"/\" document-directory=\"webapps/tars\"/&gt;&lt;/host&gt; 完成后进进入 resin-4.0.49\\bin 目录中: 启动服务:1./resin.sh start 然后访问: http://{YourServerIP}:8080 如果访问不了可能是你的Centos端口被关了 可以自己打开端口或者关闭防火墙 添加端口可以参考 :https://my.oschina.net/Kxvz/blog/900648 关闭防火墙:1systemctl stop firewalld 如此应该可以访问了:: ![image][https://static.oschina.net/uploads/space/2017/0811/171253_vLMk_2370543.png]","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"tars","slug":"Centos/tars","permalink":"http://blog.loyom.com/categories/Centos/tars/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"tars","slug":"tars","permalink":"http://blog.loyom.com/tags/tars/"}]},{"title":"Shadowsocks编辑PAC以供本地使用代理","slug":"Shadowsocks编辑PAC以供本地使用代理","date":"2018-12-11T09:29:57.000Z","updated":"2018-12-11T09:29:57.867Z","comments":true,"path":"2018/12/11/Shadowsocks编辑PAC以供本地使用代理/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Shadowsocks编辑PAC以供本地使用代理/","excerpt":"","text":"Shadowsocks编辑PAC以供本地使用代理在线PAC网址 PAC地址(美国) ： http://dwz.cn/us-pac PAC地址(日本) ： http://dwz.cn/arukas PAC地址(日本) ： http://dwz.cn/4Kq5hn 12345678910111213141516171819202122232425var proxy = \"socks5 127.0.0.1:1080; socks 127.0.0.1:1080; DIRECT;\";var direct = 'DIRECT;';var hasOwnProperty = Object.hasOwnProperty;function FindProxyForURL(url, host) &#123; var suffix; var pos = host.lastIndexOf('.'); pos = host.lastIndexOf('.', pos - 1); while(1) &#123; if (pos &lt;= 0) &#123; if (hasOwnProperty.call(domains, host)) &#123; return proxy; &#125; else &#123; return direct; &#125; &#125; suffix = host.substring(pos + 1); if (hasOwnProperty.call(domains, suffix)) &#123; return proxy; &#125; pos = host.lastIndexOf('.', pos - 1); &#125;&#125; 主要就是:1var proxy = \"socks5 127.0.0.1:1080; socks 127.0.0.1:1080; DIRECT;\";","categories":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://blog.loyom.com/categories/Shadowsocks/"},{"name":"pac","slug":"Shadowsocks/pac","permalink":"http://blog.loyom.com/categories/Shadowsocks/pac/"},{"name":"proxy","slug":"Shadowsocks/pac/proxy","permalink":"http://blog.loyom.com/categories/Shadowsocks/pac/proxy/"}],"tags":[{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"http://blog.loyom.com/tags/Shadowsocks/"},{"name":"pac","slug":"pac","permalink":"http://blog.loyom.com/tags/pac/"},{"name":"proxy","slug":"proxy","permalink":"http://blog.loyom.com/tags/proxy/"}]},{"title":"Maven添加本地Jar文件到本地仓库","slug":"Maven添加本地Jar文件到本地仓库","date":"2018-12-11T09:28:42.000Z","updated":"2018-12-11T09:28:42.376Z","comments":true,"path":"2018/12/11/Maven添加本地Jar文件到本地仓库/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Maven添加本地Jar文件到本地仓库/","excerpt":"","text":"Maven添加本地Jar文件到本地仓库文档地址: https://openhome.alipay.com/developmentDocument.htm SDK地址：https://docs.open.alipay.com/203/105910/ Maven手动安装支付SDK： 1mvn install:install-file -Dfile=D:\\Ali\\alipay-sdk-java20170829142630.jar -DgroupId=com.alipay -DartifactId=sdk -Dversion=20170829142630 -Dpackaging=jar","categories":[{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/categories/cmd/"},{"name":"maven","slug":"cmd/maven","permalink":"http://blog.loyom.com/categories/cmd/maven/"},{"name":"localinstall","slug":"cmd/maven/localinstall","permalink":"http://blog.loyom.com/categories/cmd/maven/localinstall/"}],"tags":[{"name":"install","slug":"install","permalink":"http://blog.loyom.com/tags/install/"},{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"},{"name":"maven","slug":"maven","permalink":"http://blog.loyom.com/tags/maven/"},{"name":"jar","slug":"jar","permalink":"http://blog.loyom.com/tags/jar/"},{"name":"localinstall","slug":"localinstall","permalink":"http://blog.loyom.com/tags/localinstall/"}]},{"title":"SSH 内网穿透","slug":"SSH-内网穿透","date":"2018-12-11T09:27:30.000Z","updated":"2018-12-11T09:27:30.268Z","comments":true,"path":"2018/12/11/SSH-内网穿透/","link":"","permalink":"http://blog.loyom.com/2018/12/11/SSH-内网穿透/","excerpt":"","text":"SSH 内网穿透123456## 权限chmod 600 ~/.ssh/id_rsd## 转发服务器上的891端口的请求到本地 88端口上ssh -C -f -N -g -v -R 891:127.0.0.1:88 root@110.110.110.110 -p 1234 -i ~/.ssh/id_rsd","categories":[{"name":"centos","slug":"centos","permalink":"http://blog.loyom.com/categories/centos/"},{"name":"ssh","slug":"centos/ssh","permalink":"http://blog.loyom.com/categories/centos/ssh/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"ssh","slug":"ssh","permalink":"http://blog.loyom.com/tags/ssh/"},{"name":"nat","slug":"nat","permalink":"http://blog.loyom.com/tags/nat/"}]},{"title":"使用nrm管理npm的源","slug":"使用nrm管理npm的源","date":"2018-12-11T09:25:47.000Z","updated":"2018-12-11T09:25:47.475Z","comments":true,"path":"2018/12/11/使用nrm管理npm的源/","link":"","permalink":"http://blog.loyom.com/2018/12/11/使用nrm管理npm的源/","excerpt":"","text":"使用nrm管理npm的源12345678### 安装nrmnpm install -g nrm### 查看源nrm ls### 切换源nrm use taobao ![image][https://static.oschina.net/uploads/space/2017/1102/180931_jkEV_2370543.png] 这样, 使用 npm 的时候就是使用的taobao的源了","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://blog.loyom.com/categories/nodejs/"},{"name":"nrm","slug":"nodejs/nrm","permalink":"http://blog.loyom.com/categories/nodejs/nrm/"},{"name":"npm","slug":"nodejs/nrm/npm","permalink":"http://blog.loyom.com/categories/nodejs/nrm/npm/"}],"tags":[{"name":"nrm","slug":"nrm","permalink":"http://blog.loyom.com/tags/nrm/"},{"name":"nodejs","slug":"nodejs","permalink":"http://blog.loyom.com/tags/nodejs/"},{"name":"npm","slug":"npm","permalink":"http://blog.loyom.com/tags/npm/"}]},{"title":"Dump Java内存信息","slug":"Dump-Java内存信息","date":"2018-12-11T09:23:24.000Z","updated":"2018-12-12T02:06:46.725Z","comments":true,"path":"2018/12/11/Dump-Java内存信息/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Dump-Java内存信息/","excerpt":"","text":"Dump Java内存信息123456789101112PID -&gt; 9574jmap -dump:format=b,file=/tmp/bak1.bin 9574jstack -l 9574 &gt;&gt; /tmp/bak1.log### 线程./jstack pid &gt; bak1.log### 备份内存中对象./jmap -dump:format=b,file=bak1.bin pid","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"jmap","slug":"java/jmap","permalink":"http://blog.loyom.com/categories/java/jmap/"},{"name":"jstack","slug":"java/jmap/jstack","permalink":"http://blog.loyom.com/categories/java/jmap/jstack/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"jmap","slug":"jmap","permalink":"http://blog.loyom.com/tags/jmap/"},{"name":"jstack","slug":"jstack","permalink":"http://blog.loyom.com/tags/jstack/"},{"name":"dump","slug":"dump","permalink":"http://blog.loyom.com/tags/dump/"}]},{"title":"使用mvn打包jar","slug":"使用mvn打包jar","date":"2018-12-11T09:22:36.000Z","updated":"2018-12-11T09:22:36.829Z","comments":true,"path":"2018/12/11/使用mvn打包jar/","link":"","permalink":"http://blog.loyom.com/2018/12/11/使用mvn打包jar/","excerpt":"","text":"使用mvn打包jar使用maven打包成可执行的jar文件,需要包含了dependencies的相关jar文件 1mvn assembly:assembly pom.xml中需要使用的plugins1234567891011121314151617181920212223242526272829303132&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;2.4&lt;/version&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;addClasspath&gt;true&lt;/addClasspath&gt; &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt; &lt;mainClass&gt;com.your.package.main.class&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;mainClass&gt;com.your.package.main.class&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;descriptorRefs&gt; &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt; &lt;/descriptorRefs&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 假设你的入口java文件路径为:1com.your.package.main.class","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"maven","slug":"java/maven","permalink":"http://blog.loyom.com/categories/java/maven/"},{"name":"jar","slug":"java/maven/jar","permalink":"http://blog.loyom.com/categories/java/maven/jar/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"maven","slug":"maven","permalink":"http://blog.loyom.com/tags/maven/"},{"name":"jar","slug":"jar","permalink":"http://blog.loyom.com/tags/jar/"},{"name":"build","slug":"build","permalink":"http://blog.loyom.com/tags/build/"}]},{"title":"如何理解RESTful的幂等性","slug":"如何理解RESTful的幂等性","date":"2018-12-11T09:18:42.000Z","updated":"2018-12-11T09:21:11.231Z","comments":true,"path":"2018/12/11/如何理解RESTful的幂等性/","link":"","permalink":"http://blog.loyom.com/2018/12/11/如何理解RESTful的幂等性/","excerpt":"","text":"如何理解RESTful的幂等性怎么理解幂等性HTTP幂等方法，是指无论调用多少次都不会有不同结果的 HTTP 方法。不管你调用一次，还是调用一百次，一千次，结果都是相同的。123456GET /tickets # 获取ticket列表GET /tickets/12 # 查看某个具体的ticketPOST /tickets # 新建一个ticketPUT /tickets/12 # 更新ticket 12PATCH /tickets/12 # 更新ticket 12DELETE /tickets/12 # 删除ticekt 12 HTTP GET方法HTTP GET方法，用于获取资源，不管调用多少次接口，结果都不会改变，所以是幂等的。12GET /tickets # 获取ticket列表GET /tickets/12 # 查看某个具体的ticket 只是查询数据，不会影响到资源的变化，因此我们认为它幂等。 值得注意，幂等性指的是作用于结果而非资源本身。怎么理解呢？ 例如，这个HTTP GET方法可能会每次得到不同的返回内容，但并不影响资源。 可能你会问有这种情况么？当然有咯。例如，我们有一个接口获取当前时间，我们就应该设计成1GET /service_time # 获取服务器当前时间 它本身不会对资源本身产生影响，因此满足幂等性。 HTTP POST方法HTTP POST方法是一个非幂等方法，因为调用多次，都将产生新的资源。1POST /tickets # 新建一个ticket 因为它会对资源本身产生影响，每次调用都会有新的资源产生，因此不满足幂等性。 HTTP PUT方法HTTP PUT方法是不是幂等的呢？我们来看下1PUT /tickets/12 # 更新ticket 12 因为它直接把实体部分的数据替换到服务器的资源，我们多次调用它，只会产生一次影响，但是有相同结果的 HTTP 方法，所以满足幂等性。 HTTP PATCH方法HTTP PATCH方法是非幂等的。HTTP POST方法和HTTP PUT方法可能比较好理解，但是HTTP PATCH方法只是更新部分资源，怎么是非幂等的呢? 因为，PATCH提供的实体则需要根据程序或其它协议的定义，解析后在服务器上执行，以此来修改服务器上的资源。换句话说，PATCH请求是会执行某个程序的，如果重复提交，程序可能执行多次，对服务器上的资源就可能造成额外的影响，这就可以解释它为什么是非幂等的了。 可能你还不能理解这点。我们举个例子1PATCH /tickets/12 # 更新ticket 12 此时，我们服务端对方法的处理是，当调用一次方法，更新部分字段，将这条ticket记录的操作记录加一，这次，每次调用的资源是不是变了呢，所以它是有可能是非幂等的操作。 HTTP DELETE方法HTTP DELETE方法用于删除资源，会将资源删除。1DELETE /tickets/12 # 删除ticekt 12 调用一次和多次对资源产生影响是相同的，所以也满足幂等性。 如何设计符合幂等性的高质量RESTful APIHTTP GET方法 vs HTTP POST方法也许，你会想起一个面试题。HTTP请求的GET与POST方式有什么区别？你可能会回答到：GET方式通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交。但是，我们现在从RESTful的资源角度来看待问题，HTTP GET方法是幂等的，所以它适合作为查询操作，HTTP POST方法是非幂等的，所以用来表示新增操作。 但是，也有例外，我们有的时候可能需要把查询方法改造成HTTP POST方法。比如，超长（1k）的GET URL使用POST方法来替代，因为GET受到URL长度的限制。虽然，它不符合幂等性，但是它是一种折中的方案。 HTTP POST方法 vs HTTP PUT方法对于HTTP POST方法和TTP PUT方法，我们一般的理解是POST表示创建资源，PUT表示更新资源。当然，这个是正确的理解。 但是，实际上，两个方法都用于创建资源，更为本质的差别是在幂等性。HTTP POST方法是非幂等，所以用来表示创建资源，HTTP PUT方法是幂等的，因此表示更新资源更加贴切。 HTTP PUT方法 vs HTTP PATCH方法此时，你看会有另外一个问题。HTTP PUT方法和HTTP PATCH方法，都是用来表述更新资源，它们之间有什么区别呢？我们一般的理解是PUT表示更新全部资源，PATCH表示更新部分资源。首先，这个是我们遵守的第一准则。根据上面的描述，PATCH方法是非幂等的，因此我们在设计我们服务端的RESTful API的时候，也需要考虑。如果，我们想要明确的告诉调用者我们的资源是幂等的，我的设计更倾向于使用HTTP PUT方法。 原文链接:http://blog.720ui.com/2016/restful_idempotent/","categories":[{"name":"幂等性","slug":"幂等性","permalink":"http://blog.loyom.com/categories/幂等性/"},{"name":"restful","slug":"幂等性/restful","permalink":"http://blog.loyom.com/categories/幂等性/restful/"}],"tags":[{"name":"restful","slug":"restful","permalink":"http://blog.loyom.com/tags/restful/"},{"name":"幂等性","slug":"幂等性","permalink":"http://blog.loyom.com/tags/幂等性/"}]},{"title":"Springboot无法访问static的html","slug":"Springboot无法访问static的html","date":"2018-12-11T09:18:08.000Z","updated":"2018-12-11T09:18:08.142Z","comments":true,"path":"2018/12/11/Springboot无法访问static的html/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Springboot无法访问static的html/","excerpt":"","text":"Springboot无法访问static的html在项目中如果使用了 1@EnableWebMvc 那么就会自动覆盖了官方给出的 1/static, /public, META-INF/resources, /resources 存放静态资源的目录。而将静态资源定位于 1src/main/webapp 所以当要访问 /static 里面内容的时候不要使用此注解","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"spring","slug":"java/spring","permalink":"http://blog.loyom.com/categories/java/spring/"},{"name":"resources","slug":"java/spring/resources","permalink":"http://blog.loyom.com/categories/java/spring/resources/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"Spring","slug":"Spring","permalink":"http://blog.loyom.com/tags/Spring/"},{"name":"html","slug":"html","permalink":"http://blog.loyom.com/tags/html/"},{"name":"resources","slug":"resources","permalink":"http://blog.loyom.com/tags/resources/"},{"name":"webaoo","slug":"webaoo","permalink":"http://blog.loyom.com/tags/webaoo/"}]},{"title":"在Java代码中使用Spring WebSocket","slug":"在Java代码中使用Spring-WebSocket","date":"2018-12-11T09:13:27.000Z","updated":"2018-12-11T09:15:51.349Z","comments":true,"path":"2018/12/11/在Java代码中使用Spring-WebSocket/","link":"","permalink":"http://blog.loyom.com/2018/12/11/在Java代码中使用Spring-WebSocket/","excerpt":"","text":"在Java代码中使用Spring WebSocket首先 pom.xml123456789101112131415161718192021222324252627282930313233343536&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.8.RELEASE&lt;/version&gt;&lt;/parent&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;javax.websocket&lt;/groupId&gt; &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-websocket&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;&lt;/dependency&gt; 接收消息后的处理类 GameHandler :1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import java.net.URI;import org.springframework.web.socket.BinaryMessage;import org.springframework.web.socket.CloseStatus;import org.springframework.web.socket.PongMessage;import org.springframework.web.socket.TextMessage;import org.springframework.web.socket.WebSocketSession;import org.springframework.web.socket.handler.AbstractWebSocketHandler;public class GameHandler extends AbstractWebSocketHandler &#123; /** * 处理字符串类的信息 * * @param session * @param message * @throws Exception */ @Override protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception &#123; session.sendMessage(new TextMessage(message.asBytes())); &#125; /** * 处理二进制类的信息 * * @param session * @param message * @throws Exception */ @Override protected void handleBinaryMessage(WebSocketSession session, BinaryMessage message) throws Exception &#123; session.sendMessage(new BinaryMessage(message.getPayload())); &#125; /** * ping-pong * * @param session * @param message * @throws Exception */ @Override protected void handlePongMessage(WebSocketSession session, PongMessage message) throws Exception &#123; &#125; /** * 传出错误的处理 * * @param session * @param exception * @throws Exception */ @Override public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception &#123; &#125; /** * 连接关闭的处理 * * @param session * @param status * @throws Exception */ @Override public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception &#123; &#125; /** * 连接建立后的处理 * * @param session * @throws Exception */ @Override public void afterConnectionEstablished(WebSocketSession session) throws Exception &#123; &#125;&#125; 握手信息拦截器 WebSocketHandshakeInterceptor : 12345678910111213141516171819202122import java.util.Map;import javax.servlet.http.Cookie;import org.springframework.http.server.ServerHttpRequest;import org.springframework.http.server.ServerHttpResponse;import org.springframework.http.server.ServletServerHttpRequest;import org.springframework.web.socket.WebSocketHandler;import org.springframework.web.socket.server.HandshakeInterceptor;public class WebSocketHandshakeInterceptor implements HandshakeInterceptor &#123; @Override public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse shr1, WebSocketHandler wsh, Map&lt;String, Object&gt; attributes) throws Exception &#123; // 此处可以做一些权限认证的事情或者其他 return true; &#125; @Override public void afterHandshake(ServerHttpRequest shr, ServerHttpResponse shr1, WebSocketHandler wsh, Exception excptn) &#123; &#125;&#125; 使用WebSocket的配置类 WebSocketConfig : 1234567891011121314151617181920212223242526272829import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;import org.springframework.web.socket.config.annotation.EnableWebSocket;import org.springframework.web.socket.config.annotation.WebSocketConfigurer;import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;@Configuration@EnableWebSocketpublic class WebSocketConfig extends WebMvcConfigurerAdapter implements WebSocketConfigurer &#123; @Override public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) &#123; // 允许连接的域,只能以http或https开头 String[] allowsOrigins = &#123;\"http://127.0.0.1:1213\", \"http://localhost:1213\"&#125;; registry.addHandler(gameHandler(),\"/game\").addInterceptors(handshakeInterceptor()).setAllowedOrigins(allowsOrigins); &#125; @Bean public GameHandler gameHandler() &#123; return new GameHandler(); &#125; @Bean public WebSocketHandshakeInterceptor handshakeInterceptor() &#123; return new WebSocketHandshakeInterceptor(); &#125;&#125; 启动类 Launcher : 1234567@SpringBootApplicationpublic class Launcher &#123; public static void main(String[] params) &#123; SpringApplication.run(Launcher.class, params); &#125;&#125; 配置文件 main/resources/application.properties:1234567server.port=1213server.session-timeout=1800server.undertow.io-threads=4server.undertow.worker-threads=20server.undertow.buffer-size=1024server.undertow.buffers-per-region=1024server.undertow.direct-buffers=true 前端的测试页面 main\\resources\\static\\index.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165&lt;!DOCTYPE html&gt;&lt;html lang=\"zh-CN\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;title&gt;Platform Gateway&lt;/title&gt; &lt;link href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"&gt; &lt;!--&lt;link href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" rel=\"stylesheet\"&gt;--&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.bootcss.com/jquery-scrollTo/2.1.2/jquery.scrollTo.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/pako/1.0.6/pako.min.js\"&gt;&lt;/script&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=\"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js\"&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;style&gt; #message&#123; height: 600px; overflow-y:auto; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;h1&gt;WebSocket Test Page&lt;/h1&gt; &lt;hr/&gt; &lt;div class=\"form-inline\"&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"wsAddr\"&gt;WebSocket Address: &lt;/label&gt; &lt;div class=\"input-group\"&gt; &lt;span class=\"input-group-addon\" id=\"basic-ws\"&gt;ws://127.0.0.1:1213/&lt;/span&gt; &lt;input type=\"text\" class=\"form-control\" id=\"basic-ws-addr\" aria-describedby=\"basic-ws\" placeholder=\"game\" data-container=\"body\" data-placement=\"top\" data-content=\"链接地址不能为空,请填写\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;button type=\"button\" id=\"btnConnect\" class=\"btn btn-primary\" onclick=\"connect();\"&gt; &lt;span class=\"glyphicon glyphicon-resize-small\" aria-hidden=\"true\"&gt;&lt;/span&gt; 连接 &lt;/button&gt; &lt;button type=\"button\" id=\"btnClose\" class=\"btn btn-danger\" disabled=\"disabled\" onclick=\"closeWebSocket();\"&gt; &lt;span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"&gt;&lt;/span&gt; 断开 &lt;/button&gt; &lt;button type=\"button\" id=\"btnSend\" class=\"btn btn-info\" disabled=\"disabled\" style=\"margin-left: 50px;\" onclick=\"send();\"&gt; &lt;span class=\"glyphicon glyphicon-transfer\" aria-hidden=\"true\"&gt;&lt;/span&gt; 发送消息 &lt;/button&gt; &lt;/div&gt;&lt;br/&gt; &lt;textarea class=\"form-control\" id=\"inMsg\" rows=\"5\" placeholder=\"在这里输入需要发送的信息...\"&gt;&lt;/textarea&gt; &lt;hr/&gt; &lt;div id=\"message\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;script src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; function zip(str) &#123; var binaryString = pako.gzip(str, &#123;to: 'string'&#125;); return btoa(binaryString); &#125; function unzip(b64Data) &#123; var strData = atob(b64Data); var charData = strData.split('').map(function (x) &#123; return x.charCodeAt(0); &#125;); var binData = new Uint8Array(charData); var data = pako.inflate(binData); strData = String.fromCharCode.apply(null, new Uint16Array(data)); return strData; &#125; var websocket = null; var wsBaseUrl = null; var wsUrl = null; function init() &#123; wsBaseUrl = \"ws://\" + window.location.host + \"/\"; $(\"#basic-ws\").text(wsBaseUrl); $(function () &#123; $('[data-toggle=\"popover\"]').popover(); &#125;); return false; &#125;//关闭WebSocket连接 function closeWebSocket() &#123; if (websocket) &#123; websocket.close(); &#125; return false; &#125;//将消息显示在网页上 function setMessageInnerHTML(who, msg) &#123; var message = null; if (who === 1) &#123; message = '&lt;div class=\"alert alert-success\" role=\"alert\"&gt;本地: ' + msg + '&lt;/div&gt;'; &#125; else &#123; message = '&lt;div class=\"alert alert-info\" role=\"alert\"&gt;服务器: ' + msg + '&lt;/div&gt;'; &#125; document.getElementById('message').innerHTML = (document.getElementById('message').innerHTML + message); $(\"#message\").scrollTo('100%'); return false; &#125;//发送消息 function send() &#123; if (websocket) &#123; var message = $(\"#inMsg\").val(); websocket.send(zip(message)); setMessageInnerHTML(1, message); &#125; return false; &#125; function connect() &#123; var url = $(\"#basic-ws-addr\").val(); if (url.length &lt;= 0) &#123; $('#basic-ws-addr').popover('show'); setTimeout(function () &#123; $('#basic-ws-addr').popover('hide'); &#125;, 3000); &#125; else &#123; wsUrl = wsBaseUrl + url; if ('WebSocket' in window) &#123; websocket = new WebSocket(wsUrl); //连接发生错误的回调方法 websocket.onerror = function () &#123; setMessageInnerHTML(0, \"WebSocket连接发生错误 -&gt; \" + wsUrl); $(\"#btnConnect\").removeAttr(\"disabled\"); $(\"#btnClose\").attr(\"disabled\", \"disabled\"); $(\"#btnSend\").attr(\"disabled\", \"disabled\"); &#125;; //连接成功建立的回调方法 websocket.onopen = function () &#123; setMessageInnerHTML(0, \"WebSocket连接成功 -&gt; \" + wsUrl); $(\"#btnConnect\").attr(\"disabled\", \"disabled\"); $(\"#btnClose\").removeAttr(\"disabled\"); $(\"#btnSend\").removeAttr(\"disabled\"); &#125;; //接收到消息的回调方法 websocket.onmessage = function (event) &#123; setMessageInnerHTML(0, unzip(event.data)); &#125;; //连接关闭的回调方法 websocket.onclose = function () &#123; setMessageInnerHTML(0, \"WebSocket连接关闭 -&gt; \" + wsUrl); $(\"#btnConnect\").removeAttr(\"disabled\"); $(\"#btnClose\").attr(\"disabled\", \"disabled\"); $(\"#btnSend\").attr(\"disabled\", \"disabled\"); &#125;; //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。 window.onbeforeunload = function () &#123; closeWebSocket(); &#125;; &#125; else &#123; alert('Not support websocket'); &#125; &#125; return false; &#125; window.onload = init(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 到此就可以使用 WebSocket 进行前后端的通信了,Good Luck.","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"Spring","slug":"java/Spring","permalink":"http://blog.loyom.com/categories/java/Spring/"},{"name":"websocket","slug":"java/Spring/websocket","permalink":"http://blog.loyom.com/categories/java/Spring/websocket/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"spring-boot","slug":"spring-boot","permalink":"http://blog.loyom.com/tags/spring-boot/"},{"name":"SpringWebSocket","slug":"SpringWebSocket","permalink":"http://blog.loyom.com/tags/SpringWebSocket/"},{"name":"WebSocket","slug":"WebSocket","permalink":"http://blog.loyom.com/tags/WebSocket/"}]},{"title":"在spring-starter-redis中实现一个RedisSerializer<T>","slug":"在spring-starter-redis中实现一个RedisSerializer-T","date":"2018-12-11T09:12:53.000Z","updated":"2018-12-11T09:12:53.090Z","comments":true,"path":"2018/12/11/在spring-starter-redis中实现一个RedisSerializer-T/","link":"","permalink":"http://blog.loyom.com/2018/12/11/在spring-starter-redis中实现一个RedisSerializer-T/","excerpt":"","text":"实现一个RedisSerializer用在spring-boot-starter-data-redis中需求:因为会使用到Spring-redis作为缓存框架缓存数据,不让程序每次查询都进到数据库中,因此正对不同的数据格式需要进行序列化和反序列化,于是就自己实现了一个简单的序列化类 首先 配置 Springboot 的 redis 配置12345678910111213141516171819# REDIS (RedisProperties)# Redis数据库索引（默认为0）spring.redis.database=0 # Redis服务器地址spring.redis.host=192.168.0.11# Redis服务器连接端口spring.redis.port=6379 # Redis服务器连接密码（默认为空）spring.redis.password=ThisIsPass# 连接池最大连接数（使用负值表示没有限制）spring.redis.pool.max-active=-1 # 连接池最大阻塞等待时间（使用负值表示没有限制）spring.redis.pool.max-wait=-1 # 连接池中的最大空闲连接spring.redis.pool.max-idle=8 # 连接池中的最小空闲连接spring.redis.pool.min-idle=2 # 连接超时时间（毫秒）spring.redis.timeout=50 接下来实现 序列化类 (这里使用到了GSON):123456789101112131415161718192021222324252627282930313233import org.springframework.data.redis.serializer.RedisSerializer;import org.springframework.data.redis.serializer.SerializationException;public class RedisValueSerializer&lt;T&gt; implements RedisSerializer&lt;T&gt; &#123; private static final byte[] EMPTY_ARRAY = new byte[0]; @Override public byte[] serialize(T t) throws SerializationException &#123; if (t == null) &#123; return EMPTY_ARRAY; &#125; String tmp = String.format(\"%s_%s\", t.getClass().getName(), JsonUtils.obj2Json(t)); return tmp.getBytes(Encode.UTF8); &#125; @Override public T deserialize(byte[] bytes) throws SerializationException &#123; try &#123; if (bytes == null || bytes.length &lt;= 0) &#123; return null; &#125; String tmp = new String(bytes, Encode.UTF8); String className = tmp.substring(0, tmp.indexOf(\"_&#123;\")); String json = tmp.substring(tmp.indexOf(\"_&#123;\") + 1); return (T) JsonUtils.json2Obj(json, Class.forName(className)); &#125; catch (ClassNotFoundException ex) &#123; LogUtils.error(TAG.DEF, this.getClass(), \"deserialize\", ex); &#125; return null; &#125;&#125; 然后RedisConfig:12345678910111213141516171819202122232425262728293031import org.springframework.cache.CacheManager;import org.springframework.cache.annotation.CachingConfigurerSupport;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.data.redis.cache.RedisCacheManager;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.StringRedisTemplate;@Primary@Configurationpublic class RedisConfig extends CachingConfigurerSupport &#123; @Primary @Bean public CacheManager cacheManager(RedisTemplate redisTemplate) &#123; RedisCacheManager rcm = new RedisCacheManager(redisTemplate); return rcm; &#125; @Primary @Bean public StringRedisTemplate redisTemplate(RedisConnectionFactory factory) &#123; StringRedisTemplate template = new StringRedisTemplate(factory); template.setValueSerializer(new RedisValueSerializer&lt;Object&gt;()); template.afterPropertiesSet(); return template; &#125;&#125; 然后就可以使用缓存注解了:1234567@Cacheable(key =\"#p0\") @CachePut(key = \"#p0\")@CacheEvict(key =\"#p0\",allEntries=true)... 注解使用参考:http://blog.csdn.net/sanjay_f/article/details/47372967","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"redis","slug":"java/redis","permalink":"http://blog.loyom.com/categories/java/redis/"},{"name":"RedisSerializer","slug":"java/redis/RedisSerializer","permalink":"http://blog.loyom.com/categories/java/redis/RedisSerializer/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"redis","slug":"redis","permalink":"http://blog.loyom.com/tags/redis/"},{"name":"spring-boot","slug":"spring-boot","permalink":"http://blog.loyom.com/tags/spring-boot/"},{"name":"RedisSerializer","slug":"RedisSerializer","permalink":"http://blog.loyom.com/tags/RedisSerializer/"}]},{"title":"Glassfish常用操作","slug":"Glassfish常用操作","date":"2018-12-11T09:09:37.000Z","updated":"2018-12-11T09:09:37.230Z","comments":true,"path":"2018/12/11/Glassfish常用操作/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Glassfish常用操作/","excerpt":"","text":"Glassfish常用操作12345678910111213141516171819## 创建名为DomainName的域./asadmin create-domain [DomainName]1.输入管理员账号2.输入管理员密码3.确认管理员密码## 接收外部网络的访问,此操作需要先启动域,再操作,然后在重启域./asadmin --port 4848 enable-secure-admin## 启动名为DomainName的域./asadmin start-domain [DomainName]## 停止名为DomainName的域./asadmin stop-domain [DomainName]## 重启名为DomainName的域./asadmin restart-domain [DomainName]","categories":[{"name":"glassfish","slug":"glassfish","permalink":"http://blog.loyom.com/categories/glassfish/"}],"tags":[{"name":"glassfish","slug":"glassfish","permalink":"http://blog.loyom.com/tags/glassfish/"},{"name":"asadmin","slug":"asadmin","permalink":"http://blog.loyom.com/tags/asadmin/"},{"name":"domain","slug":"domain","permalink":"http://blog.loyom.com/tags/domain/"}]},{"title":"Java的Excel导出工具类","slug":"Java的Excel导出工具类","date":"2018-12-11T09:08:42.000Z","updated":"2018-12-11T09:08:42.223Z","comments":true,"path":"2018/12/11/Java的Excel导出工具类/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Java的Excel导出工具类/","excerpt":"","text":"Java的Excel导出工具类###首先在POM中引入需要的Jar123456789101112131415&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.47&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt; &lt;version&gt;3.17&lt;/version&gt;&lt;/dependency&gt; 工具类:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899import com.alibaba.fastjson.JSON;import java.io.IOException;import java.io.OutputStream;import java.lang.reflect.Field;import java.util.Arrays;import java.util.Collection;import java.util.Date;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.function.Function;import java.util.stream.Collectors;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;public class Excel&lt;T&gt; &#123; private XSSFWorkbook workBook = null; private XSSFSheet sheet = null; public Excel(String sheetName, String... headers) &#123; workBook = new XSSFWorkbook(); sheet = workBook.createSheet(sheetName); XSSFRow titleRow = sheet.createRow((short) 0); int index = 0; for (String header : headers) &#123; XSSFCell cell = titleRow.createCell((short) index); cell.setCellValue(header); index++; &#125; &#125; public Excel(String sheetName) &#123; workBook = new XSSFWorkbook(); sheet = workBook.createSheet(sheetName); &#125; private Map&lt;String, Field&gt; extract(T obj) &#123; List&lt;Field&gt; declaredFields = Arrays.asList(obj.getClass().getDeclaredFields()); return declaredFields.stream().collect(Collectors.toMap(Field::getName, Function.identity())); &#125; public void export(OutputStream out) &#123; try &#123; workBook.write(out); &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; finally &#123; try &#123; out.flush(); out.close(); &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; &#125; &#125; public void setDatas(Collection&lt;T&gt; dataset, String... fieldNames) &#123; if (dataset == null || fieldNames == null) &#123; return; &#125; Iterator&lt;T&gt; it = dataset.iterator(); int y = 0; while (it.hasNext()) &#123; y++; XSSFRow row = sheet.createRow(y); T t = (T) it.next(); Map&lt;String, Field&gt; fieldMap = this.extract(t); int x = -1; for (String fieldName : fieldNames) &#123; Field field = fieldMap.get(fieldName); if (field == null) &#123; continue; &#125; x++; try &#123; field.setAccessible(true); String value; Object obj = field.get(t); if (obj instanceof Date) &#123; value = DateUtil.format((Date) obj, \"yyyy-MM-dd HH:mm:ss\"); &#125; else if (obj instanceof String) &#123; value = String.valueOf(obj); &#125; else &#123; value = JSON.toJSONString(obj); &#125; XSSFCell cell = row.createCell((short) x); cell.setCellValue(value); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125; &#125; &#125;&#125; 在网页上导出:12345678910111213141516@RequestMapping(value = \"/api/export\", method = RequestMethod.GET)public void export(HttpServletRequest request, HttpServletResponse response) &#123; try &#123; List&lt;TmpData&gt; tmps = findTempDate(); String name = DateUtil.current(\"yyyyMMddHHmmsss\"); response.setContentType(\"octets/stream\"); response.addHeader(\"Content-Disposition\", \"attachment;filename = \" + name + \".xlsx\"); Excel&lt;TmpData&gt; export = new Excel&lt;&gt;(\"查询导出\", \"账号\", \"密码\", \"IP\"); export.setDatas(tmps, \"account\", \"password\", \"ip\"); export.export(response.getOutputStream()); &#125; catch (IOException ex) &#123; &#125;&#125; 这样就可以了,至于设置样式之类的,各位自行百度吧…","categories":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/categories/java/"},{"name":"excel","slug":"java/excel","permalink":"http://blog.loyom.com/categories/java/excel/"},{"name":"poi","slug":"java/excel/poi","permalink":"http://blog.loyom.com/categories/java/excel/poi/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.loyom.com/tags/java/"},{"name":"excel","slug":"excel","permalink":"http://blog.loyom.com/tags/excel/"},{"name":"poi","slug":"poi","permalink":"http://blog.loyom.com/tags/poi/"},{"name":"fastjson","slug":"fastjson","permalink":"http://blog.loyom.com/tags/fastjson/"}]},{"title":"在Centos7中使用firewall添加端口","slug":"在Centos7中使用firewall添加端口","date":"2018-12-11T09:04:42.000Z","updated":"2018-12-11T09:04:42.120Z","comments":true,"path":"2018/12/11/在Centos7中使用firewall添加端口/","link":"","permalink":"http://blog.loyom.com/2018/12/11/在Centos7中使用firewall添加端口/","excerpt":"","text":"在Centos7中使用firewall添加端口123456789101112### 查看端口列表firewall-cmd --zone=public --list-portsfirewall-cmd --zone=dmz --list-ports### 添加80端口firewall-cmd --zone=public --add-port=80/tcp --permanentfirewall-cmd --zone=public --add-port=80/udp --permanentfirewall-cmd --zone=dmz --add-port=80/tcp --permanentfirewall-cmd --zone=dmz --add-port=80/udp --permanent### 使添加的端口生效firewall-cmd --reload","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"firewall","slug":"Centos/firewall","permalink":"http://blog.loyom.com/categories/Centos/firewall/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/tags/Centos/"},{"name":"firewall-cmd","slug":"firewall-cmd","permalink":"http://blog.loyom.com/tags/firewall-cmd/"},{"name":"port","slug":"port","permalink":"http://blog.loyom.com/tags/port/"}]},{"title":"对比Win10的文件","slug":"对比Win10的文件","date":"2018-12-11T09:03:50.000Z","updated":"2018-12-11T09:03:50.476Z","comments":true,"path":"2018/12/11/对比Win10的文件/","link":"","permalink":"http://blog.loyom.com/2018/12/11/对比Win10的文件/","excerpt":"","text":"对比Win10的文件在管理员命令提示符下键入以下命令：1234567891011121314151617### 这条命令将扫描全部系统文件并和官方系统文件对比，扫描计算机中的不一致情况。Dism /Online /Cleanup-Image /ScanHealth### 这条命令必须在前一条命令执行完以后，发现系统文件有损坏时使用Dism /Online /Cleanup-Image /CheckHealth### 这条命令是把那些不同的系统文件还原成官方系统源文件DISM /Online /Cleanup-image /RestoreHealth### 完成后重启，再键入以下命令sfc /SCANNOW","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/categories/windows/"},{"name":"cmd","slug":"windows/cmd","permalink":"http://blog.loyom.com/categories/windows/cmd/"}],"tags":[{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"},{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/tags/windows/"},{"name":"dism","slug":"dism","permalink":"http://blog.loyom.com/tags/dism/"}]},{"title":"Win8.1上安装.NET Framework3.5","slug":"Win8-1上安装-NET-Framework3-5","date":"2018-12-11T09:03:07.000Z","updated":"2018-12-11T09:03:07.199Z","comments":true,"path":"2018/12/11/Win8-1上安装-NET-Framework3-5/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Win8-1上安装-NET-Framework3-5/","excerpt":"","text":"Win8.1上安装.NET Framework3.51.首先找到你的系统安装文件 如:cn_windows_8.1_professional_vl_with_update_x64_dvd_4050293.iso 2.解压出来的路径: E:\\cn_windows_8.1_professional_vl_with_update_x64_dvd_4050293 3.找到 组件位置 : 解压出来的文件夹下 \\sources\\sxs 4.打开CMD 运行1dism.exe /online /enable-feature /featurename:NetFX3 /Source:E:\\cn_windows_8.1_professional_vl_with_update_x64_dvd_4050293\\sources\\sxs 就可以看到安装的进度了 ++==注意需要修改路径为自己解压出来的路径==++","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/categories/windows/"},{"name":"cmd","slug":"windows/cmd","permalink":"http://blog.loyom.com/categories/windows/cmd/"},{"name":"netframwork","slug":"windows/cmd/netframwork","permalink":"http://blog.loyom.com/categories/windows/cmd/netframwork/"}],"tags":[{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"},{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/tags/windows/"},{"name":"netframework3.5","slug":"netframework3-5","permalink":"http://blog.loyom.com/tags/netframework3-5/"}]},{"title":"安装Win出现无法创建新的分区也找不到现有的分区解决方案","slug":"安装Win出现无法创建新的分区也找不到现有的分区解决方案","date":"2018-12-11T09:01:07.000Z","updated":"2018-12-11T09:01:07.783Z","comments":true,"path":"2018/12/11/安装Win出现无法创建新的分区也找不到现有的分区解决方案/","link":"","permalink":"http://blog.loyom.com/2018/12/11/安装Win出现无法创建新的分区也找不到现有的分区解决方案/","excerpt":"","text":"安装Win出现无法创建新的分区也找不到现有的分区解决方案安装Win出现无法创建新的分区也找不到现有的分区解决方案123456789101112131415161718192021222324252627282930313233### 首先在安装界面按下 Shift+F10### 在出现的CMD界面输入: diskpart 进入磁盘管理工具diskpart### 可以输入 : list disk 查看磁盘列表list disk### 选择你需要安装的磁盘序号(假设选择第一个) select disk 0### 清除磁盘数据: clean### 转换分区: convert mbr### 查看磁盘上的分区列表: list partition### 创建用于安装系统的主分区(100G): create partition primary size = 100000### 完成后再查看分区: list partition### 退出磁盘管理工具:exit### 退出命令行: exit再继续安装吧 转换为 GPT分区的操作(Win不支持的磁盘格式)12345678910### 转换为 GPT分区的操作### 从转换分区开始: convert gpt### 创建特有EFI分区(500M): create partition efi size = 500### 创建特有MSR分区(500M): create partition msr size = 500","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/categories/windows/"},{"name":"cmd","slug":"windows/cmd","permalink":"http://blog.loyom.com/categories/windows/cmd/"},{"name":"disk","slug":"windows/cmd/disk","permalink":"http://blog.loyom.com/categories/windows/cmd/disk/"}],"tags":[{"name":"disk","slug":"disk","permalink":"http://blog.loyom.com/tags/disk/"},{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"},{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/tags/windows/"},{"name":"mbr","slug":"mbr","permalink":"http://blog.loyom.com/tags/mbr/"},{"name":"gpt","slug":"gpt","permalink":"http://blog.loyom.com/tags/gpt/"},{"name":"partition","slug":"partition","permalink":"http://blog.loyom.com/tags/partition/"}]},{"title":"Win建立文件夹的软连接","slug":"Win建立文件夹的软连接","date":"2018-12-11T08:59:47.000Z","updated":"2018-12-11T08:59:47.332Z","comments":true,"path":"2018/12/11/Win建立文件夹的软连接/","link":"","permalink":"http://blog.loyom.com/2018/12/11/Win建立文件夹的软连接/","excerpt":"","text":"Win建立文件夹的软连接12345678### 添加文件夹的软连接mklink /D \"C:/Users/xxx/.m2/repository\" \"D:\\Program\\apache-maven-3.5.4\\repo\"## 说明:## /D 表示文件夹,不加表示文件## 第一个路径表示需要软连接的文件夹## 第二个路径表示原始文件夹路径","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/categories/windows/"},{"name":"cmd","slug":"windows/cmd","permalink":"http://blog.loyom.com/categories/windows/cmd/"}],"tags":[{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"},{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/tags/windows/"},{"name":"mklink","slug":"mklink","permalink":"http://blog.loyom.com/tags/mklink/"}]},{"title":"通过调用Windows命令，将chm 文件转换为html 文件","slug":"通过调用Windows命令，将chm-文件转换为html-文件","date":"2018-12-11T08:58:07.000Z","updated":"2018-12-11T08:58:07.858Z","comments":true,"path":"2018/12/11/通过调用Windows命令，将chm-文件转换为html-文件/","link":"","permalink":"http://blog.loyom.com/2018/12/11/通过调用Windows命令，将chm-文件转换为html-文件/","excerpt":"","text":"通过调用Windows命令，将chm 文件转换为html 文件方法：命令行(cmd)，输入:hh -decompile &lt;输出文件夹路径&gt; &lt;要反编译的CHM文件全路径名&gt; 例如：win+r 键，弹出运行窗口输入命令cmd回车,然后输入： 1hh -decompile C:\\Users\\xxx\\Desktop\\1 C:\\Users\\xxx\\Desktop\\1.chm","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/categories/windows/"},{"name":"cmd","slug":"windows/cmd","permalink":"http://blog.loyom.com/categories/windows/cmd/"},{"name":"chm","slug":"windows/cmd/chm","permalink":"http://blog.loyom.com/categories/windows/cmd/chm/"}],"tags":[{"name":"cmd","slug":"cmd","permalink":"http://blog.loyom.com/tags/cmd/"},{"name":"windows","slug":"windows","permalink":"http://blog.loyom.com/tags/windows/"},{"name":"chm","slug":"chm","permalink":"http://blog.loyom.com/tags/chm/"},{"name":"hh","slug":"hh","permalink":"http://blog.loyom.com/tags/hh/"},{"name":"decompile","slug":"decompile","permalink":"http://blog.loyom.com/tags/decompile/"}]},{"title":"TensorFlow提示AVX2","slug":"TensorFlow提示AVX2","date":"2018-12-11T08:56:34.000Z","updated":"2018-12-11T08:56:34.705Z","comments":true,"path":"2018/12/11/TensorFlow提示AVX2/","link":"","permalink":"http://blog.loyom.com/2018/12/11/TensorFlow提示AVX2/","excerpt":"","text":"12345678### https://github.com/lakshayg/tensorflow-build### https://github.com/fo40225/tensorflow-windows-wheel### 如果你在使用tensorflow的过程中出现类似这样的提示信息:### Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2### 你只需要访问上面两个链接找到对应的操作系统和python版本对应的whl文件下载下来 执行:pip install --ignore-installed --upgrade /your/path/binary.whl --user","categories":[{"name":"代码","slug":"代码","permalink":"http://blog.loyom.com/categories/代码/"},{"name":"tensorflow","slug":"代码/tensorflow","permalink":"http://blog.loyom.com/categories/代码/tensorflow/"},{"name":"python","slug":"代码/tensorflow/python","permalink":"http://blog.loyom.com/categories/代码/tensorflow/python/"},{"name":"whl","slug":"代码/tensorflow/python/whl","permalink":"http://blog.loyom.com/categories/代码/tensorflow/python/whl/"}],"tags":[{"name":"pip install","slug":"pip-install","permalink":"http://blog.loyom.com/tags/pip-install/"},{"name":"tensorflow","slug":"tensorflow","permalink":"http://blog.loyom.com/tags/tensorflow/"},{"name":"AVX2","slug":"AVX2","permalink":"http://blog.loyom.com/tags/AVX2/"},{"name":"python","slug":"python","permalink":"http://blog.loyom.com/tags/python/"},{"name":"whl","slug":"whl","permalink":"http://blog.loyom.com/tags/whl/"}]},{"title":"一个简单的系统监控脚本","slug":"一个简单的系统监控脚本","date":"2018-12-07T03:01:45.000Z","updated":"2018-12-11T08:33:44.529Z","comments":true,"path":"2018/12/07/一个简单的系统监控脚本/","link":"","permalink":"http://blog.loyom.com/2018/12/07/一个简单的系统监控脚本/","excerpt":"","text":"一个简单的系统信息监控脚本12345678910111213141516#!/bin/bash# DATE:20181018# System monitor by Kxvzinterval=5while :do echo '====================================================================' date echo '--------------------------------------------------------------------' vmstat 2 2 echo '====================================================================' sleep $intervaldone 说明r 表示运行队列(就是说多少个进程真的分配到CPU)，我测试的服务器目前CPU比较空闲，没什么程序在跑，当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。 b 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。 swpd 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。 free 空闲的物理内存的大小，我的机器内存总共8G，剩余3415M。 buff Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用300多M cache cache直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用300多M(这里是Linux/Unix的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。) si 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。 so 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。 bi 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte，我本机上没什么IO操作，所以一直是0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到140000/s，磁盘写入速度差不多140M每秒 bo 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。 in 每秒CPU的中断次数，包括时间中断 cs 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。 us 用户CPU时间，我曾经在一个做加密解密很频繁的服务器上，可以看到us接近100,r运行队列达到80(机器在做压力测试，性能表现不佳)。 sy 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。 id 空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。 wt 等待IO CPU时间 执行1nohup ./monitor.sh &amp; 添加执行权限1chmod +x monitor.sh","categories":[{"name":"Centos","slug":"Centos","permalink":"http://blog.loyom.com/categories/Centos/"},{"name":"监控","slug":"Centos/监控","permalink":"http://blog.loyom.com/categories/Centos/监控/"}],"tags":[{"name":"系统监控","slug":"系统监控","permalink":"http://blog.loyom.com/tags/系统监控/"},{"name":"系统脚本","slug":"系统脚本","permalink":"http://blog.loyom.com/tags/系统脚本/"},{"name":"内存监控","slug":"内存监控","permalink":"http://blog.loyom.com/tags/内存监控/"},{"name":"CPU监控","slug":"CPU监控","permalink":"http://blog.loyom.com/tags/CPU监控/"}]}]}